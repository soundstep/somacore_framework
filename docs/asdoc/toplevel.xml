<asdoc>

<packageRec name='com.soma.core.view.null' fullname='com.soma.core.view.null'>
<description><![CDATA[
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied.
 See the License for the specific language governing rights and
 limitations under the License.
 
 The Original Code is SomaCore.
 
 The Initial Developer of the Original Code is Romuald Quantin.
 romu]]></description>
<soundstep.com><![CDATA[(www.soundstep.com).
 
 Portions created by
 
 Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved.
 All Rights Reserved.
 
 ]]></soundstep.com>
</packageRec>
<classRec name='SomaViews' fullname='com.soma.core.view:SomaViews' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/view/SomaViews.as' namespace='com.soma.core.view' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 The SomaViews class handles the views of the application (DisplayObject).
	 ]]></description>
<example><![CDATA[Add a view.
	 <listing version="3.0">
addView(MySprite.NAME, new MySprite());
	 </listing>
	 Remove a view.
	 <listing version="3.0">
removeView(MySprite.NAME);
	 </listing>
	 Retrieve a view.
	 <listing version="3.0">
var sprite:MySprite = getView(MySprite.NAME) as MySprite;
	 </listing>
	 Create a shortcut to retrieve a view is a good practice (not necessary with injection enabled).
	 <listing version="3.0">
private function get mySprite():MySprite {
	return getView(MySprite.NAME) as MySprite;
}
private function doSomething():void {
	trace(mySprite);
}
	 </listing>
	 ]]></example>
</classRec>
<method name='SomaViews' fullname='com.soma.core.view:SomaViews/SomaViews' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Create an instance of the SomaViews class. Should not be directly instantiated, the framework will instantiate the class.
		 ]]></description>
</method>
<method name='addView' fullname='com.soma.core.view:SomaViews/addView' isStatic='false' isFinal='false' isOverride='false'  param_names='viewName;view' param_types='String;Object' param_defaults='undefined;undefined' result_type='Object'>
<description><![CDATA[
		 Registers a view to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addView(MySprite.NAME, new MySprite());</listing>
		 ]]></example>
<param><![CDATA[viewName Name of the view.
		 ]]></param>
<param><![CDATA[view Instance of the view.
		 ]]></param>
<return><![CDATA[The view instance.
		 ]]></return>
</method>
<method name='dispose' fullname='com.soma.core.view:SomaViews/dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Destroys all the views and properties. The class will call the dispose method of each view instance.
		 ]]></description>
</method>
<method name='getView' fullname='com.soma.core.view:SomaViews/getView' isStatic='false' isFinal='false' isOverride='false'  param_names='viewName' param_types='String' param_defaults='undefined' result_type='Object'>
<description><![CDATA[
		 Retrieves the view instance that has been registered using its name.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var mySprite:MySprite = getView(MySprite.NAME) as MySprite;</listing>
		 ]]></example>
<param><![CDATA[viewName Name of the view.
		 ]]></param>
<return><![CDATA[An Object instance.
		 ]]></return>
</method>
<method name='getViews' fullname='com.soma.core.view:SomaViews/getViews' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.utils:Dictionary'>
<description><![CDATA[
		 Retrieves all the view instances that have been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var sprites:Dictionary = getViews();</listing>
		 ]]></example>
<return><![CDATA[A Dictionary (the key of the Dictionary is the name used for the registration).
		 ]]></return>
</method>
<method name='hasView' fullname='com.soma.core.view:SomaViews/hasView' isStatic='false' isFinal='false' isOverride='false'  param_names='viewName' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a view has been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">hasView(MySprite.NAME);</listing>
		 ]]></example>
<param><![CDATA[viewName Name of the view.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
</method>
<method name='initialize' fullname='com.soma.core.view:SomaViews/private:initialize' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeView' fullname='com.soma.core.view:SomaViews/removeView' isStatic='false' isFinal='false' isOverride='false'  param_names='viewName' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a view from the framework and call the (optional) dispose method of this view.
		 ]]></description>
<example><![CDATA[<listing version="3.0">removeView(MySprite.NAME);</listing>
		 ]]></example>
<param><![CDATA[viewName Name of the view.
		 ]]></param>
</method>
<field name='views' fullname='com.soma.core.view:SomaViews/protected:views' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<packageRec name='com.soma.core.interfaces.null' fullname='com.soma.core.interfaces.null'>
<description><![CDATA[
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied.
 See the License for the specific language governing rights and
 limitations under the License.
 
 The Original Code is SomaCore.
 
 The Initial Developer of the Original Code is Romuald Quantin.
 romu]]></description>
<soundstep.com><![CDATA[(www.soundstep.com).
 
 Portions created by
 
 Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved.
 All Rights Reserved.
 
 ]]></soundstep.com>
</packageRec>
<interfaceRec name='IResponder' fullname='com.soma.core.interfaces:IResponder' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/interfaces/IResponder.as' namespace='com.soma.core.interfaces' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 Interface used by a class that receive data from a asynchronous call.
	 ]]></description>
<see><![CDATA[com.soma.core.controller.SequenceCommand
	 ]]></see>
</interfaceRec>
<method name='fault' fullname='com.soma.core.interfaces:IResponder/com.soma.core.interfaces:IResponder:fault' isStatic='false' isFinal='false' isOverride='false'  param_names='info' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Method that receives a fault object.
		 ]]></description>
<param><![CDATA[info The fault Object.
		 ]]></param>
</method>
<method name='result' fullname='com.soma.core.interfaces:IResponder/com.soma.core.interfaces:IResponder:result' isStatic='false' isFinal='false' isOverride='false'  param_names='data' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Method that receives a success object.
		 ]]></description>
<param><![CDATA[data THe success Object.
		 ]]></param>
</method>
<packageRec name='com.soma.core.interfaces.null' fullname='com.soma.core.interfaces.null'>
<description><![CDATA[
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied.
 See the License for the specific language governing rights and
 limitations under the License.
 
 The Original Code is SomaCore.
 
 The Initial Developer of the Original Code is Romuald Quantin.
 romu]]></description>
<soundstep.com><![CDATA[(www.soundstep.com).
 
 Portions created by
 
 Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved.
 All Rights Reserved.
 
 ]]></soundstep.com>
</packageRec>
<interfaceRec name='ISomaPluginVO' fullname='com.soma.core.interfaces:ISomaPluginVO' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/interfaces/ISomaPluginVO.as' namespace='com.soma.core.interfaces' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 Interface used by a class that will hold the plugin options (ex: SomaDebuggerVO).
	 ]]></description>
</interfaceRec>
<packageRec name='com.soma.core.interfaces.null' fullname='com.soma.core.interfaces.null'>
<description><![CDATA[
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied.
 See the License for the specific language governing rights and
 limitations under the License.
 
 The Original Code is SomaCore.
 
 The Initial Developer of the Original Code is Romuald Quantin.
 romu]]></description>
<soundstep.com><![CDATA[(www.soundstep.com).
 
 Portions created by
 
 Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved.
 All Rights Reserved.
 
 ]]></soundstep.com>
</packageRec>
<interfaceRec name='IModel' fullname='com.soma.core.interfaces:IModel' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/interfaces/IModel.as' namespace='com.soma.core.interfaces' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 ]]></description>
<see><![CDATA[com.soma.core.model.Model
	 ]]></see>
</interfaceRec>
<method name='dispose' fullname='com.soma.core.interfaces:IModel/com.soma.core.interfaces:IModel:dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Method that you can overwrite, called by the framework when the model is removed.
		 ]]></description>
</method>
<method name='getName' fullname='com.soma.core.interfaces:IModel/com.soma.core.interfaces:IModel:getName' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Retrieves the name of the model.
		 ]]></description>
<return><![CDATA[A String.
		 ]]></return>
</method>
<method name='initialize' fullname='com.soma.core.interfaces:IModel/com.soma.core.interfaces:IModel:initialize' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Method that you can overwrite, called by the framework when the model is initialized.
		 ]]></description>
</method>
<method name='setName' fullname='com.soma.core.interfaces:IModel/com.soma.core.interfaces:IModel:setName' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the name of the model.
		 ]]></description>
<param><![CDATA[value A String.
		 ]]></param>
</method>
<method name='data' fullname='com.soma.core.interfaces:IModel/com.soma.core.interfaces:IModel:data/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
		 Data of the model.
		 ]]></description>
</method>
<method name='dispatcher' fullname='com.soma.core.interfaces:IModel/com.soma.core.interfaces:IModel:dispatcher/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.events:IEventDispatcher'>
<description><![CDATA[
		 EventDispatcher instance of the model.
		 ]]></description>
<default><![CDATA[The framework instance.
		 ]]></default>
</method>
<method name='data' fullname='com.soma.core.interfaces:IModel/com.soma.core.interfaces:IModel:data/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Object' param_defaults='undefined' result_type='void'>
</method>
<method name='dispatcher' fullname='com.soma.core.interfaces:IModel/com.soma.core.interfaces:IModel:dispatcher/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='flash.events:IEventDispatcher' param_defaults='undefined' result_type='void'>
</method>
<packageRec name='com.soma.core.interfaces.null' fullname='com.soma.core.interfaces.null'>
<description><![CDATA[
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied.
 See the License for the specific language governing rights and
 limitations under the License.
 
 The Original Code is SomaCore.
 
 The Initial Developer of the Original Code is Romuald Quantin.
 romu]]></description>
<soundstep.com><![CDATA[(www.soundstep.com).
 
 Portions created by
 
 Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved.
 All Rights Reserved.
 
 ]]></soundstep.com>
</packageRec>
<interfaceRec name='ISomaPlugin' fullname='com.soma.core.interfaces:ISomaPlugin' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/interfaces/ISomaPlugin.as' namespace='com.soma.core.interfaces' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 Interface used by a class that is meant to be instantiated by the framework (ex:SomaDebugger).
	 ]]></description>
<see><![CDATA[com.soma.core.Soma
	 ]]></see>
<see><![CDATA[com.soma.core.interfaces.ISomaPluginVO
	 ]]></see>
</interfaceRec>
<method name='dispose' fullname='com.soma.core.interfaces:ISomaPlugin/com.soma.core.interfaces:ISomaPlugin:dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Destroys the elements created by the plugin.
		 ]]></description>
</method>
<method name='initialize' fullname='com.soma.core.interfaces:ISomaPlugin/com.soma.core.interfaces:ISomaPlugin:initialize' isStatic='false' isFinal='false' isOverride='false'  param_names='pluginVO' param_types='com.soma.core.interfaces:ISomaPluginVO' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Initializes the plugin.
		 ]]></description>
<param><![CDATA[pluginVO
		 ]]></param>
</method>
<packageRec name='com.soma.core.interfaces.null' fullname='com.soma.core.interfaces.null'>
<description><![CDATA[
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied.
 See the License for the specific language governing rights and
 limitations under the License.
 
 The Original Code is SomaCore.
 
 The Initial Developer of the Original Code is Romuald Quantin.
 romu]]></description>
<soundstep.com><![CDATA[(www.soundstep.com).
 
 Portions created by
 
 Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved.
 All Rights Reserved.
 
 ]]></soundstep.com>
</packageRec>
<interfaceRec name='ICommand' fullname='com.soma.core.interfaces:ICommand' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/interfaces/ICommand.as' namespace='com.soma.core.interfaces' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 ]]></description>
<see><![CDATA[com.soma.core.controller.Command
	 ]]></see>
</interfaceRec>
<method name='execute' fullname='com.soma.core.interfaces:ICommand/com.soma.core.interfaces:ICommand:execute' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Method called by the framework, this is the execution of the command.
		 You can access from all the framework elements in this method (wires, commands, models, views, instance of the framework and stage).
		 ]]></description>
<param><![CDATA[event Event instance dispatched to execute the command.
		 ]]></param>
</method>
<packageRec name='com.soma.core.interfaces.null' fullname='com.soma.core.interfaces.null'>
<description><![CDATA[
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied.
 See the License for the specific language governing rights and
 limitations under the License.
 
 The Original Code is SomaCore.
 
 The Initial Developer of the Original Code is Romuald Quantin.
 romu]]></description>
<soundstep.com><![CDATA[(www.soundstep.com).
 
 Portions created by
 
 Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved.
 All Rights Reserved.
 
 ]]></soundstep.com>
</packageRec>
<interfaceRec name='ICommandASync' fullname='com.soma.core.interfaces:ICommandASync' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/interfaces/ICommandASync.as' namespace='com.soma.core.interfaces' access='public' baseClasses='com.soma.core.interfaces:ICommand;com.soma.core.interfaces:IResponder' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 Interface used to create asynchronous command.
	 ]]></description>
<example><![CDATA[<listing version="3.0">
package {

	import flash.utils.clearTimeout;
	import flash.utils.setTimeout;
	import flash.events.Event;
	import com.soma.core.interfaces.ICommandASync;
	import com.soma.core.controller.Command;
	
	public class CommandASyncExample extends Command implements ICommandASync {
		private var _event:Event;
		private var _timer:int;

		public function CommandASyncExample() {
			
		}
		
		public function execute(event:Event):void {
			_event = event;
			_timer = setTimeout(result, 1000, {});
		}
		
		public function fault(info:Object):void {
			
		}
		
		public function result(data:Object):void {
			if (isPartOfASequence(_event)) {
				getSequencer(_event).executeNextCommand();
			}
			_event = null;
			clearTimeout(_timer);
		}
		
	}
}
	 </listing>
	 ]]></example>
<see><![CDATA[com.soma.core.controller.Command
	 ]]></see>
<see><![CDATA[com.soma.core.interfaces.ICommand
	 ]]></see>
<see><![CDATA[com.soma.core.interfaces.IResponder
	 ]]></see>
</interfaceRec>
<packageRec name='com.soma.core.interfaces.null' fullname='com.soma.core.interfaces.null'>
<description><![CDATA[
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied.
 See the License for the specific language governing rights and
 limitations under the License.
 
 The Original Code is SomaCore.
 
 The Initial Developer of the Original Code is Romuald Quantin.
 romu]]></description>
<soundstep.com><![CDATA[(www.soundstep.com).
 
 Portions created by
 
 Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved.
 All Rights Reserved.
 
 ]]></soundstep.com>
</packageRec>
<interfaceRec name='ISequenceCommand' fullname='com.soma.core.interfaces:ISequenceCommand' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/interfaces/ISequenceCommand.as' namespace='com.soma.core.interfaces' access='public' baseClasses='com.soma.core.interfaces:ICommand' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 ]]></description>
<see><![CDATA[com.soma.core.controller.SequenceCommand
	 ]]></see>
</interfaceRec>
<method name='executeNextCommand' fullname='com.soma.core.interfaces:ISequenceCommand/com.soma.core.interfaces:ISequenceCommand:executeNextCommand' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Method used to execute the next command in the list of subcommands.
		 ]]></description>
</method>
<method name='stop' fullname='com.soma.core.interfaces:ISequenceCommand/com.soma.core.interfaces:ISequenceCommand:stop' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Stops the current sequence.
		 ]]></description>
</method>
<method name='commands' fullname='com.soma.core.interfaces:ISequenceCommand/com.soma.core.interfaces:ISequenceCommand:commands/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Retrieves the list of commands added as subcommands.
		 ]]></description>
<return><![CDATA[An Array of commands.
		 ]]></return>
</method>
<method name='currentCommand' fullname='com.soma.core.interfaces:ISequenceCommand/com.soma.core.interfaces:ISequenceCommand:currentCommand/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.events:Event'>
<description><![CDATA[
		 Retrieves the command that is currently executed (running).
		 ]]></description>
<return><![CDATA[An event instance.
		 ]]></return>
</method>
<method name='length' fullname='com.soma.core.interfaces:ISequenceCommand/com.soma.core.interfaces:ISequenceCommand:length/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Retrieves the number of commands added as subcommands.
		 ]]></description>
<return><![CDATA[An integer.
		 ]]></return>
</method>
<packageRec name='com.soma.core.interfaces.null' fullname='com.soma.core.interfaces.null'>
<description><![CDATA[
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied.
 See the License for the specific language governing rights and
 limitations under the License.
 
 The Original Code is SomaCore.
 
 The Initial Developer of the Original Code is Romuald Quantin.
 romu]]></description>
<soundstep.com><![CDATA[(www.soundstep.com).
 
 Portions created by
 
 Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved.
 All Rights Reserved.
 
 ]]></soundstep.com>
</packageRec>
<interfaceRec name='IParallelCommand' fullname='com.soma.core.interfaces:IParallelCommand' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/interfaces/IParallelCommand.as' namespace='com.soma.core.interfaces' access='public' baseClasses='com.soma.core.interfaces:ICommand' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 ]]></description>
<see><![CDATA[com.soma.core.controller.SomaController
	 ]]></see>
<see><![CDATA[com.soma.core.controller.Command
	 ]]></see>
<see><![CDATA[com.soma.core.interfaces.ICommand
	 ]]></see>
<see><![CDATA[com.soma.core.interfaces.IParallelCommand
	 ]]></see>
</interfaceRec>
<method name='commands' fullname='com.soma.core.interfaces:IParallelCommand/com.soma.core.interfaces:IParallelCommand:commands/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Retrieves the list of commands added as subcommands.
		 ]]></description>
<return><![CDATA[An Array of commands.
		 ]]></return>
</method>
<method name='length' fullname='com.soma.core.interfaces:IParallelCommand/com.soma.core.interfaces:IParallelCommand:length/get' isStatic='false' isFinal='false' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Retrieves the number of commands added as subcommands.
		 ]]></description>
<return><![CDATA[An integer.
		 ]]></return>
</method>
<interfaceRec name='ISomaInjector' fullname='com.soma.core.interfaces:ISomaInjector' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/interfaces/ISomaInjector.as' namespace='com.soma.core.interfaces' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 The ISomaInjector interface exposes the injection methods used by the framework. 
	 ]]></description>
<see><![CDATA[com.soma.core.di.SomaInjector
	 ]]></see>
</interfaceRec>
<method name='createChildInjector' fullname='com.soma.core.interfaces:ISomaInjector/com.soma.core.interfaces:ISomaInjector:createChildInjector' isStatic='false' isFinal='false' isOverride='false'  result_type='com.soma.core.interfaces:ISomaInjector'>
<description><![CDATA[
		 Creates a child injector.
		 The child injector inherits the rules of its parents.
		 ]]></description>
<return><![CDATA[A ISomaInjector instance.
		 ]]></return>
</method>
<method name='createInstance' fullname='com.soma.core.interfaces:ISomaInjector/com.soma.core.interfaces:ISomaInjector:createInstance' isStatic='false' isFinal='false' isOverride='false'  param_names='classTarget' param_types='Class' param_defaults='undefined' result_type='Object'>
<description><![CDATA[
		 Instantiates a new instance from a given class.
		 This method will always creates a new instance, regardless of any singleton mapping.
		 ]]></description>
<param><![CDATA[classTarget A Class.
		 ]]></param>
<return><![CDATA[An instance of the Class target.
		 ]]></return>
</method>
<method name='dispose' fullname='com.soma.core.interfaces:ISomaInjector/com.soma.core.interfaces:ISomaInjector:dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Destroys the injector elements.
		 ]]></description>
</method>
<method name='getInstance' fullname='com.soma.core.interfaces:ISomaInjector/com.soma.core.interfaces:ISomaInjector:getInstance' isStatic='false' isFinal='false' isOverride='false'  param_names='classTarget;name' param_types='Class;String' param_defaults='undefined;' result_type='Object'>
<description><![CDATA[
		 Retrieves or instantiates an instance of the given Class.
		 This method needs a mapping rule, the instance can be a singleton or a new one.
		 ]]></description>
<param><![CDATA[classTarget A Class.
		 ]]></param>
<param><![CDATA[name Injection name.
		 ]]></param>
<return><![CDATA[An instance of the Class target.
		 ]]></return>
</method>
<method name='getParentInjector' fullname='com.soma.core.interfaces:ISomaInjector/com.soma.core.interfaces:ISomaInjector:getParentInjector' isStatic='false' isFinal='false' isOverride='false'  result_type='com.soma.core.interfaces:ISomaInjector'>
<description><![CDATA[
		 Retrieves the injector parent if any.
		 ]]></description>
<return><![CDATA[A ISomaInjector instance.
		 ]]></return>
</method>
<method name='hasMapping' fullname='com.soma.core.interfaces:ISomaInjector/com.soma.core.interfaces:ISomaInjector:hasMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='classTarget;name' param_types='Class;String' param_defaults='undefined;' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a mapping rule exists for the given Class.
		 ]]></description>
<param><![CDATA[classTarget A Class.
		 ]]></param>
<param><![CDATA[name Injection name.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
</method>
<method name='injectInto' fullname='com.soma.core.interfaces:ISomaInjector/com.soma.core.interfaces:ISomaInjector:injectInto' isStatic='false' isFinal='false' isOverride='false'  param_names='instance' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Performs injection into the given instance.
		 ]]></description>
<param><![CDATA[instance An instance.
		 ]]></param>
</method>
<method name='mapSingletonOf' fullname='com.soma.core.interfaces:ISomaInjector/com.soma.core.interfaces:ISomaInjector:mapSingletonOf' isStatic='false' isFinal='false' isOverride='false'  param_names='whenAskFor;useSingletonOf;name' param_types='Class;Class;String' param_defaults='undefined;undefined;' result_type='void'>
<description><![CDATA[
		 Rule that defines the "whenAskFor" (usually an interface) to be injected with the same instance "useSingletonOf".
		 ]]></description>
<param><![CDATA[whenAskFor A Class.
		 ]]></param>
<param><![CDATA[useSingletonOf A class.
		 ]]></param>
<param><![CDATA[name Injection name.
		 ]]></param>
</method>
<method name='mapSingleton' fullname='com.soma.core.interfaces:ISomaInjector/com.soma.core.interfaces:ISomaInjector:mapSingleton' isStatic='false' isFinal='false' isOverride='false'  param_names='classTarget;name' param_types='Class;String' param_defaults='undefined;' result_type='void'>
<description><![CDATA[
		 Rule that defines the "classTarget" to be injected with always the same instance.
		 ]]></description>
<param><![CDATA[classTarget A Class.
		 ]]></param>
<param><![CDATA[name Injection name.
		 ]]></param>
</method>
<method name='mapToInstance' fullname='com.soma.core.interfaces:ISomaInjector/com.soma.core.interfaces:ISomaInjector:mapToInstance' isStatic='false' isFinal='false' isOverride='false'  param_names='whenAskFor;instance;name' param_types='Class;Object;String' param_defaults='undefined;undefined;' result_type='void'>
<description><![CDATA[
		 Rule that defines the "whenAskFor" to be injected the given instance.
		 ]]></description>
<param><![CDATA[whenAskFor A Class.
		 ]]></param>
<param><![CDATA[instance An instance.
		 ]]></param>
<param><![CDATA[name Injection name.
		 ]]></param>
</method>
<method name='map' fullname='com.soma.core.interfaces:ISomaInjector/com.soma.core.interfaces:ISomaInjector:map' isStatic='false' isFinal='false' isOverride='false'  param_names='whenAskFor;createClass;name' param_types='Class;Class;String' param_defaults='undefined;undefined;' result_type='void'>
<description><![CDATA[
		 Rule that defines the "whenAskFor" to be injected with an instance of the "createClass" Class.
		 ]]></description>
<param><![CDATA[whenAskFor A Class.
		 ]]></param>
<param><![CDATA[createClass A class.
		 ]]></param>
<param><![CDATA[name Injection name.
		 ]]></param>
</method>
<method name='removeMapping' fullname='com.soma.core.interfaces:ISomaInjector/com.soma.core.interfaces:ISomaInjector:removeMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='classTarget;name' param_types='Class;String' param_defaults='undefined;' result_type='void'>
<description><![CDATA[
		 Removes a mapping rule exists for the given Class.
		 ]]></description>
<param><![CDATA[classTarget A Class.
		 ]]></param>
<param><![CDATA[name Injection name.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
</method>
<method name='applicationDomain' fullname='com.soma.core.interfaces:ISomaInjector/com.soma.core.interfaces:ISomaInjector:applicationDomain/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.system:ApplicationDomain'>
<description><![CDATA[
		 ApplicationDomain in use in the injector.
		 ]]></description>
<param><![CDATA[classTarget A Class.
		 ]]></param>
<param><![CDATA[name Injection name.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
</method>
<method name='applicationDomain' fullname='com.soma.core.interfaces:ISomaInjector/com.soma.core.interfaces:ISomaInjector:applicationDomain/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='flash.system:ApplicationDomain' param_defaults='undefined' result_type='void'>
</method>
<interfaceRec name='ISomaReflector' fullname='com.soma.core.interfaces:ISomaReflector' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/interfaces/ISomaReflector.as' namespace='com.soma.core.interfaces' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 The ISomaReflector interface exposes the reflection methods used by the framework. 
	 ]]></description>
<see><![CDATA[com.soma.core.di.SomaReflector
	 ]]></see>
</interfaceRec>
<method name='classExtendsOrImplements' fullname='com.soma.core.interfaces:ISomaReflector/com.soma.core.interfaces:ISomaReflector:classExtendsOrImplements' isStatic='false' isFinal='false' isOverride='false'  param_names='classOrClassName;superclass;application' param_types='Object;Class;flash.system:ApplicationDomain' param_defaults='undefined;undefined;null' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a Class or Class name extends or implements a given Class.
		 ]]></description>
<param><![CDATA[classOrClassName A Class or a Class name.
		 ]]></param>
<param><![CDATA[superclass A Class.
		 ]]></param>
<param><![CDATA[application An ApplicationDomain.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
</method>
<method name='dispose' fullname='com.soma.core.interfaces:ISomaReflector/com.soma.core.interfaces:ISomaReflector:dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Destroys the reflector elements.
		 ]]></description>
</method>
<method name='getClass' fullname='com.soma.core.interfaces:ISomaReflector/com.soma.core.interfaces:ISomaReflector:getClass' isStatic='false' isFinal='false' isOverride='false'  param_names='value;applicationDomain' param_types='*;flash.system:ApplicationDomain' param_defaults='undefined;null' result_type='Class'>
<description><![CDATA[
		 Retrieves a Class.
		 ]]></description>
<param><![CDATA[value Class, Class name or instance. 
		 ]]></param>
<param><![CDATA[application An ApplicationDomain.
		 ]]></param>
<return><![CDATA[A Class.
		 ]]></return>
</method>
<method name='getFQCN' fullname='com.soma.core.interfaces:ISomaReflector/com.soma.core.interfaces:ISomaReflector:getFQCN' isStatic='false' isFinal='false' isOverride='false'  param_names='value;replaceColons' param_types='*;Boolean' param_defaults='undefined;false' result_type='String'>
<description><![CDATA[
		 Retrieves a fully qualified Class name.
		 ]]></description>
<param><![CDATA[value Class, Class name or instance. 
		 ]]></param>
<param><![CDATA[replaceColons
		 ]]></param>
<return><![CDATA[A String.
		 ]]></return>
</method>
<packageRec name='com.soma.core.interfaces.null' fullname='com.soma.core.interfaces.null'>
<description><![CDATA[
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied.
 See the License for the specific language governing rights and
 limitations under the License.
 
 The Original Code is SomaCore.
 
 The Initial Developer of the Original Code is Romuald Quantin.
 romu]]></description>
<soundstep.com><![CDATA[(www.soundstep.com).
 
 Portions created by
 
 Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved.
 All Rights Reserved.
 
 ]]></soundstep.com>
</packageRec>
<interfaceRec name='IWire' fullname='com.soma.core.interfaces:IWire' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/interfaces/IWire.as' namespace='com.soma.core.interfaces' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 ]]></description>
<see><![CDATA[com.soma.core.wire.Wire
	 ]]></see>
<see><![CDATA[com.soma.core.wire.SomaWires
	 ]]></see>
</interfaceRec>
<method name='dispose' fullname='com.soma.core.interfaces:IWire/com.soma.core.interfaces:IWire:dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Method that you can overwrite, called by the framework when the model is removed.
		 ]]></description>
</method>
<method name='getName' fullname='com.soma.core.interfaces:IWire/com.soma.core.interfaces:IWire:getName' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Retrieves the name of the wire.
		 ]]></description>
<return><![CDATA[A String.
		 ]]></return>
</method>
<method name='initialize' fullname='com.soma.core.interfaces:IWire/com.soma.core.interfaces:IWire:initialize' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Method that you can overwrite, called by the framework when the model is initialized.
		 ]]></description>
</method>
<method name='setName' fullname='com.soma.core.interfaces:IWire/com.soma.core.interfaces:IWire:setName' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the name of the wire.
		 ]]></description>
<param><![CDATA[value A String.
		 ]]></param>
</method>
<method name='instance' fullname='com.soma.core.interfaces:IWire/com.soma.core.interfaces:IWire:instance/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.soma.core.interfaces:ISoma'>
<description><![CDATA[
		 Instance of the framework.
		 ]]></description>
</method>
<method name='instance' fullname='com.soma.core.interfaces:IWire/com.soma.core.interfaces:IWire:instance/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='com.soma.core.interfaces:ISoma' param_defaults='undefined' result_type='void'>
</method>
<interfaceRec name='IMediator' fullname='com.soma.core.interfaces:IMediator' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/interfaces/IMediator.as' namespace='com.soma.core.interfaces' access='public' baseClasses='com.soma.core.interfaces:IWire' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 The IMediator interface exposes the methods of a Mediator instance. 
	 ]]></description>
<see><![CDATA[com.soma.core.mediator.Mediator
	 ]]></see>
<see><![CDATA[com.soma.core.mediator.SomaMediators
	 ]]></see>
</interfaceRec>
<method name='viewComponent' fullname='com.soma.core.interfaces:IMediator/com.soma.core.interfaces:IMediator:viewComponent/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
		 View that has been mapped to the mediator instance.
		 ]]></description>
</method>
<method name='viewComponent' fullname='com.soma.core.interfaces:IMediator/com.soma.core.interfaces:IMediator:viewComponent/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Object' param_defaults='undefined' result_type='void'>
</method>
<packageRec name='com.soma.core.interfaces.null' fullname='com.soma.core.interfaces.null'>
<description><![CDATA[
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied.
 See the License for the specific language governing rights and
 limitations under the License.
 
 The Original Code is SomaCore.
 
 The Initial Developer of the Original Code is Romuald Quantin.
 romu]]></description>
<soundstep.com><![CDATA[(www.soundstep.com).
 
 Portions created by
 
 Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved.
 All Rights Reserved.
 
 ]]></soundstep.com>
</packageRec>
<interfaceRec name='ISoma' fullname='com.soma.core.interfaces:ISoma' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/interfaces/ISoma.as' namespace='com.soma.core.interfaces' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 Interface used by the class that will extend the Soma class.
	 ]]></description>
<see><![CDATA[com.soma.core.Soma
	 ]]></see>
</interfaceRec>
<method name='addCommand' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:addCommand' isStatic='false' isFinal='false' isOverride='false'  param_names='commandName;command' param_types='String;Class' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Registers a command to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addCommand(MyEvent.DOSOMETHING, MyCommand);</listing>
		 ]]></example>
<param><![CDATA[commandName Event type that is used as a command name.
		 ]]></param>
<param><![CDATA[command Class that will be executed when a command has been dispatched.
		 ]]></param>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='addEventListener' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:addEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type;listener;useCapture;priority;useWeakReference' param_types='String;Function;Boolean;int;Boolean' param_defaults='undefined;undefined;false;0;false' result_type='void'>
<description><![CDATA[
		 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.
		 ]]></description>
<param><![CDATA[type The type of event.
		 ]]></param>
<param><![CDATA[listener The listener function that processes the event.
		 ]]></param>
<param><![CDATA[useCapture Determines whether the listener works in the capture phase or the target and bubbling phases.
		 ]]></param>
<param><![CDATA[priority The priority level of the event listener.
		 ]]></param>
<param><![CDATA[useWeakReference Determines whether the reference to the listener is strong or weak.
		 ]]></param>
</method>
<method name='addModel' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:addModel' isStatic='false' isFinal='false' isOverride='false'  param_names='modelName;model' param_types='String;com.soma.core.interfaces:IModel' param_defaults='undefined;undefined' result_type='com.soma.core.interfaces:IModel'>
<description><![CDATA[
		 Registers a model to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addModel(MyModel.NAME, new MyModel());</listing>
		 ]]></example>
<param><![CDATA[modelName Name of the model.
		 ]]></param>
<param><![CDATA[model Instance of the model.
		 ]]></param>
<return><![CDATA[The model instance.
		 ]]></return>
<see><![CDATA[com.soma.core.model.SomaModels
		 ]]></see>
</method>
<method name='addView' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:addView' isStatic='false' isFinal='false' isOverride='false'  param_names='viewName;view' param_types='String;Object' param_defaults='undefined;undefined' result_type='Object'>
<description><![CDATA[
		 Registers a view to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addView(MySprite.NAME, new MySprite());</listing>
		 ]]></example>
<param><![CDATA[viewName Name of the view.
		 ]]></param>
<param><![CDATA[view Instance of the view.
		 ]]></param>
<return><![CDATA[The view instance.
		 ]]></return>
<see><![CDATA[com.soma.core.view.SomaViews
		 ]]></see>
</method>
<method name='addWire' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:addWire' isStatic='false' isFinal='false' isOverride='false'  param_names='wireName;wire' param_types='String;com.soma.core.interfaces:IWire' param_defaults='undefined;undefined' result_type='com.soma.core.interfaces:IWire'>
<description><![CDATA[
		 Registers a wire to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addWire(MyWire.NAME, new MyWire());</listing>
		 ]]></example>
<param><![CDATA[wireName Name of the wire.
		 ]]></param>
<param><![CDATA[view Instance of the wire.
		 ]]></param>
<return><![CDATA[The wire instance.
		 ]]></return>
<see><![CDATA[com.soma.core.wire.SomaWires
		 ]]></see>
</method>
<method name='createPluginFromClassName' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:createPluginFromClassName' isStatic='false' isFinal='false' isOverride='false'  param_names='pluginClassName;pluginVO' param_types='String;com.soma.core.interfaces:ISomaPluginVO' param_defaults='undefined;undefined' result_type='com.soma.core.interfaces:ISomaPlugin'>
<description><![CDATA[
		 Creates a plugin instance using the class name and the getDefinitionByName method.
		 ]]></description>
<example><![CDATA[<listing version="3.0">
var pluginVO:SomaDebuggerVO = new SomaDebuggerVO(this, SomaDebugger.NAME_DEFAULT, getCommands(), true, false);
var debugger:SomaDebugger = createPluginFromClassName("com.soma.core.debugger.SomaDebugger", pluginVO) as SomaDebugger;
		 </listing>
		 ]]></example>
<param><![CDATA[plugin Class name of the plugin that will be instantiated.
		 ]]></param>
<param><![CDATA[pluginVO Value Object class of the plugin.
		 ]]></param>
<return><![CDATA[An instance of the plugin.
		 ]]></return>
</method>
<method name='createPlugin' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:createPlugin' isStatic='false' isFinal='false' isOverride='false'  param_names='plugin;pluginVO' param_types='Class;com.soma.core.interfaces:ISomaPluginVO' param_defaults='undefined;undefined' result_type='com.soma.core.interfaces:ISomaPlugin'>
<description><![CDATA[
		 Creates a plugin instance.
		 ]]></description>
<example><![CDATA[<listing version="3.0">
var pluginVO:SomaDebuggerVO = new SomaDebuggerVO(this, SomaDebugger.NAME_DEFAULT, getCommands(), true, false);
var debugger:SomaDebugger = createPlugin(SomaDebugger, pluginVO) as SomaDebugger;
		 </listing>
		 ]]></example>
<param><![CDATA[plugin Class of the plugin that will be instantiated.
		 ]]></param>
<param><![CDATA[pluginVO Value Object class of the plugin.
		 ]]></param>
<return><![CDATA[An instance of the plugin.
		 ]]></return>
</method>
<method name='dispatchEvent' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:dispatchEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Dispatches an event into the event flow. The event target is the EventDispatcher object upon which dispatchEvent() is called.
		 ]]></description>
<param><![CDATA[event The event object dispatched into the event flow.
		 ]]></param>
<return><![CDATA[A value of true unless preventDefault() is called on the event, in which case it returns false.
		 ]]></return>
</method>
<method name='dispose' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Destroys the SomaCore core classes and elements registered to the framework.
		 ]]></description>
</method>
<method name='getCommand' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:getCommand' isStatic='false' isFinal='false' isOverride='false'  param_names='commandName' param_types='String' param_defaults='undefined' result_type='Class'>
<description><![CDATA[
		 Retrieves the command class that has been registered with a command name.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var commandClass:ICommand = getCommand(MyEvent.DOSOMETHING) as ICommand;</listing>
		 ]]></example>
<param><![CDATA[commandName Event type that is used as a command name.
		 ]]></param>
<return><![CDATA[A class.
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='getCommands' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:getCommands' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Retrieves all the command names (event type) that have been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var commands:Array = getCommands();</listing>
		 ]]></example>
<return><![CDATA[An Array of String (command name).
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='getLastSequencer' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:getLastSequencer' isStatic='false' isFinal='false' isOverride='false'  result_type='com.soma.core.interfaces:ISequenceCommand'>
<description><![CDATA[
		 Retrieves the last sequence command that has been instantiated in the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var lastSequencer:ISequenceCommand = getLastSequencer();</listing>
		 ]]></example>
<return><![CDATA[An ISequenceCommand instance.
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='getModel' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:getModel' isStatic='false' isFinal='false' isOverride='false'  param_names='modelName' param_types='String' param_defaults='undefined' result_type='com.soma.core.interfaces:IModel'>
<description><![CDATA[
		 Retrieves the model instance that has been registered using its name.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var myModel:MyModel = getModel(MyModel.NAME) as MyModel;</listing>
		 ]]></example>
<param><![CDATA[modelName Name of the model.
		 ]]></param>
<return><![CDATA[A IModel instance.
		 ]]></return>
<see><![CDATA[com.soma.core.model.SomaModels
		 ]]></see>
</method>
<method name='getModels' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:getModels' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.utils:Dictionary'>
<description><![CDATA[
		 Retrieves all the model instances that have been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var models:Dictionary = getModels();</listing>
		 ]]></example>
<return><![CDATA[A Dictionary (the key of the Dictionary is the name used for the registration).
		 ]]></return>
<see><![CDATA[com.soma.core.model.SomaModels
		 ]]></see>
</method>
<method name='getRunningSequencers' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:getRunningSequencers' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Retrieves all the sequence command instances that are running.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var sequencers:Array = getRunningSequencers();</listing>
		 ]]></example>
<return><![CDATA[An Array of ISequenceCommand instances.
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='getSequencer' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:getSequencer' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='com.soma.core.interfaces:ISequenceCommand'>
<description><![CDATA[
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var sequencer:ISequenceCommand = getSequencer(myEvent);</listing>
		 ]]></example>
<param><![CDATA[event Event instance.
		 ]]></param>
<return><![CDATA[A sequencer (ISequenceCommand).
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='getView' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:getView' isStatic='false' isFinal='false' isOverride='false'  param_names='viewName' param_types='String' param_defaults='undefined' result_type='Object'>
<description><![CDATA[
		 Retrieves the view instance that has been registered using its name.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var mySprite:MySprite = getView(MySprite.NAME) as MySprite;</listing>
		 ]]></example>
<param><![CDATA[viewName Name of the view.
		 ]]></param>
<return><![CDATA[An Object instance.
		 ]]></return>
<see><![CDATA[com.soma.core.view.SomaViews
		 ]]></see>
</method>
<method name='getViews' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:getViews' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.utils:Dictionary'>
<description><![CDATA[
		 Retrieves all the view instances that have been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var sprites:Dictionary = getViews();</listing>
		 ]]></example>
<return><![CDATA[A Dictionary (the key of the Dictionary is the name used for the registration).
		 ]]></return>
<see><![CDATA[com.soma.core.view.SomaViews
		 ]]></see>
</method>
<method name='getWire' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:getWire' isStatic='false' isFinal='false' isOverride='false'  param_names='wireName' param_types='String' param_defaults='undefined' result_type='com.soma.core.interfaces:IWire'>
<description><![CDATA[
		 Retrieves the wire instance that has been registered using its name.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var myWire:MyWire = getWire(MyWire.NAME) as MyWire;</listing>
		 ]]></example>
<param><![CDATA[wireName Name of the wire.
		 ]]></param>
<return><![CDATA[A wire instance.
		 ]]></return>
<see><![CDATA[com.soma.core.wire.SomaWires
		 ]]></see>
</method>
<method name='getWires' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:getWires' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.utils:Dictionary'>
<description><![CDATA[
		 Retrieves all the wire instances that have been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var wires:Dictionary = getWires();</listing>
		 ]]></example>
<return><![CDATA[A Dictionary (the key of the Dictionary is the name used for the registration).
		 ]]></return>
<see><![CDATA[com.soma.core.wire.SomaWires
		 ]]></see>
</method>
<method name='hasCommand' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:hasCommand' isStatic='false' isFinal='false' isOverride='false'  param_names='commandName' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a command has been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">hasCommand(MyEvent.DOSOMETHING);</listing>
		 ]]></example>
<param><![CDATA[commandName Event type that is used as a command name.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='hasEventListener' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:hasEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Checks whether the EventDispatcher object has any listeners registered for a specific type of event.
		 ]]></description>
<param><![CDATA[type The type of event.
		 ]]></param>
<return><![CDATA[A value of true if a listener of the specified type is registered; false otherwise.
		 ]]></return>
</method>
<method name='hasModel' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:hasModel' isStatic='false' isFinal='false' isOverride='false'  param_names='modelName' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a model has been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">hasModel(MyModel.NAME);</listing>
		 ]]></example>
<param><![CDATA[modelName Name of the model.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
<see><![CDATA[com.soma.core.model.SomaModels
		 ]]></see>
</method>
<method name='hasView' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:hasView' isStatic='false' isFinal='false' isOverride='false'  param_names='viewName' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a view has been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">hasView(MySprite.NAME);</listing>
		 ]]></example>
<param><![CDATA[viewName Name of the view.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
<see><![CDATA[com.soma.core.view.SomaViews
		 ]]></see>
</method>
<method name='hasWire' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:hasWire' isStatic='false' isFinal='false' isOverride='false'  param_names='wireName' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a wire has been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">hasWire(MyWire.NAME);</listing>
		 ]]></example>
<param><![CDATA[wireName Name of the wire.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
<see><![CDATA[com.soma.core.wire.SomaWires
		 ]]></see>
</method>
<method name='isPartOfASequence' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:isPartOfASequence' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether an event has been instantiated from a ISequenceCommand class.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var inSequence:Boolean = isPartOfASequence(myEvent);</listing>
		 ]]></example>
<return><![CDATA[A Boolean.
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='removeCommand' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:removeCommand' isStatic='false' isFinal='false' isOverride='false'  param_names='commandName' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a command from the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">removeCommand(MyEvent.DOSOMETHING);</listing>
		 ]]></example>
<param><![CDATA[commandName Event type that is used as a command name.
		 ]]></param>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='removeEventListener' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:removeEventListener' isStatic='false' isFinal='false' isOverride='false'  param_names='type;listener;useCapture' param_types='String;Function;Boolean' param_defaults='undefined;undefined;false' result_type='void'>
<description><![CDATA[
		 Removes a listener from the EventDispatcher object. If there is no matching listener registered with the EventDispatcher object, a call to this method has no effect.
		 ]]></description>
<param><![CDATA[type The type of event. 
		 ]]></param>
<param><![CDATA[listener The listener object to remove. 
		 ]]></param>
<param><![CDATA[useCapture Specifies whether the listener was registered for the capture phase or the target and bubbling phases.
		 ]]></param>
</method>
<method name='removeModel' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:removeModel' isStatic='false' isFinal='false' isOverride='false'  param_names='modelName' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a model from the framework and call the dispose method of this model.
		 ]]></description>
<example><![CDATA[<listing version="3.0">removeModel(MyModel.NAME);</listing>
		 ]]></example>
<param><![CDATA[modelName Name of the model.
		 ]]></param>
<see><![CDATA[com.soma.core.model.SomaModels
		 ]]></see>
</method>
<method name='removeView' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:removeView' isStatic='false' isFinal='false' isOverride='false'  param_names='viewName' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a view from the framework and call the (optional) dispose method of this view.
		 ]]></description>
<example><![CDATA[<listing version="3.0">removeView(MySprite.NAME);</listing>
		 ]]></example>
<param><![CDATA[viewName Name of the view.
		 ]]></param>
<see><![CDATA[com.soma.core.view.SomaViews
		 ]]></see>
</method>
<method name='removeWire' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:removeWire' isStatic='false' isFinal='false' isOverride='false'  param_names='wireName' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a wire from the framework and call the dispose method of this wire.
		 ]]></description>
<example><![CDATA[<listing version="3.0">removeWire(MyWire.NAME);</listing>
		 ]]></example>
<param><![CDATA[wireName Name of the wire.
		 ]]></param>
<see><![CDATA[com.soma.core.wire.SomaWires
		 ]]></see>
</method>
<method name='setup' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:setup' isStatic='false' isFinal='false' isOverride='false'  param_names='stage;injectorClass' param_types='flash.display:Stage;Class' param_defaults='null;null' result_type='void'>
<description><![CDATA[
		 Register elements that the frameworks needs to be ready, such as the stage and the optional injector class (default is SomaInjector).
		 ]]></description>
<param><![CDATA[stage The stage is used as a global EventDispatcher (as well as the Soma class), and is required to instantiate the framework.
		 ]]></param>
<param><![CDATA[injectorClass Class that must extend ISomaInjector.
		 ]]></param>
</method>
<method name='stopAllSequencers' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:stopAllSequencers' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Stops all the sequence command instances that are running.
		 ]]></description>
<example><![CDATA[<listing version="3.0">stopAllSequencers();</listing>
		 ]]></example>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='stopSequencerWithEvent' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:stopSequencerWithEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Stops a sequence command using an event instance that has been created from this sequence command.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var success:Boolean = stopSequencerWithEvent(myEvent);</listing>
		 ]]></example>
<param><![CDATA[event Event instance.
		 ]]></param>
<return><![CDATA[A Boolean (true if a sequence command has been stopped).
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='stopSequencer' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:stopSequencer' isStatic='false' isFinal='false' isOverride='false'  param_names='sequencer' param_types='com.soma.core.interfaces:ISequenceCommand' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Stops a sequence command using the sequence command instance itself.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var success:Boolean = stopSequencer(mySequenceCommand);</listing>
		 ]]></example>
<param><![CDATA[sequencer The sequence command instance.
		 ]]></param>
<return><![CDATA[A Boolean (true if the sequence command has been stopped).
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='willTrigger' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:willTrigger' isStatic='false' isFinal='false' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.
		 ]]></description>
<param><![CDATA[type The type of event. 
		 ]]></param>
<return><![CDATA[A value of true if a listener of the specified type will be triggered; false otherwise. 
		 ]]></return>
</method>
<method name='controller' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:controller/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.soma.core.controller:SomaController'>
<description><![CDATA[
		 Gets the commands manager instance.
		 ]]></description>
</method>
<method name='injectorClass' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:injectorClass/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Class'>
<description><![CDATA[
		 Retrieves the injector Class registered to the framework.
		 ]]></description>
<return><![CDATA[A Class.
		 ]]></return>
</method>
<method name='injector' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:injector/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.soma.core.interfaces:ISomaInjector'>
<description><![CDATA[
		 Retrieves the injector instance that has been created by the framework from the injector Class registered.
		 ]]></description>
<return><![CDATA[a ISomaInjector instance (default is SomaInjector).
		 ]]></return>
</method>
<method name='mediators' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:mediators/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.soma.core.mediator:SomaMediators'>
<description><![CDATA[
		 Gets the mediator manager instance that has been created by the framework from the injector Class registered.
		 ]]></description>
</method>
<method name='models' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:models/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.soma.core.model:SomaModels'>
<description><![CDATA[
		 Gets the model manager instance.
		 ]]></description>
</method>
<method name='reflector' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:reflector/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.soma.core.interfaces:ISomaReflector'>
<description><![CDATA[
		 Retrieves the refletor instance.
		 ]]></description>
<return><![CDATA[a ISomaReflector instance (default is SomaReflector).
		 ]]></return>
</method>
<method name='stage' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:stage/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:Stage'>
<description><![CDATA[
		 Get the stage that has been registered to the framework.
		 ]]></description>
<return><![CDATA[The stage instance.
		 ]]></return>
</method>
<method name='views' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:views/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.soma.core.view:SomaViews'>
<description><![CDATA[
		 Gets the view manager class.
		 ]]></description>
</method>
<method name='wires' fullname='com.soma.core.interfaces:ISoma/com.soma.core.interfaces:ISoma:wires/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.soma.core.wire:SomaWires'>
<description><![CDATA[
		 Gets the wires manager instance.
		 ]]></description>
</method>
<packageRec name='com.soma.core.ns.null' fullname='com.soma.core.ns.null'>
<description><![CDATA[
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied.
 See the License for the specific language governing rights and
 limitations under the License.
 
 The Original Code is SomaCore.
 
 The Initial Developer of the Original Code is Romuald Quantin.
 romu]]></description>
<soundstep.com><![CDATA[(www.soundstep.com).
 
 Portions created by
 
 Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved.
 All Rights Reserved.
 
 ]]></soundstep.com>
</packageRec>
<packageRec name='com.soma.core.model.null' fullname='com.soma.core.model.null'>
<description><![CDATA[
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied.
 See the License for the specific language governing rights and
 limitations under the License.
 
 The Original Code is SomaCore.
 
 The Initial Developer of the Original Code is Romuald Quantin.
 romu]]></description>
<soundstep.com><![CDATA[(www.soundstep.com).
 
 Portions created by
 
 Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved.
 All Rights Reserved.
 
 ]]></soundstep.com>
</packageRec>
<classRec name='Model' fullname='com.soma.core.model:Model' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/model/Model.as' namespace='com.soma.core.model' access='public' baseclass='Object' interfaces='com.soma.core.interfaces:IModel' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 <p>The model is the class used to manage you application's data model.</p>
	 <p>The data can be XML, local data, data retrieved from a server or anything. Ideally, the data should be set to the data property of the model instance, but you are free to create specific getters.</p>
	 ]]></description>
<example><![CDATA[Create a model.
	 <listing version="3.0">
package  {
	import com.soma.core.interfaces.IModel;
	import com.soma.core.model.Model;
	
	public class ModelExample extends Model implements IModel {
		
		public static const NAME:String = "Model example name";
		
		public function ModelExample() {
			super(NAME);
		}
		
		override protected function initialize():void {
			// called when the model has been registered to the framework
			data = new XML('&lt;myXML/&gt;');
			// you can use the model as a dispatcher (default dispatcher is the framework instance) to dispatch commands, example:
			dispatchEvent(new MyEvent(MyEvent.DATA_READY));
		}
		
		override protected function dispose():void {
			// called when the model has been removed from the framework
			data = null;
		}
		
	}
}
	 </listing>
	 Add a model.
	 <listing version="3.0">
addModel(ModelExample.NAME, new ModelExample());
	 </listing>
	 Remove a model.
	 <listing version="3.0">
removeModel(ModelExample.NAME);
	 </listing>
	 Retrieve a model.
	 <listing version="3.0">
var model:ModelExample = getModel(ModelExample.NAME) as ModelExample;
	 </listing>
	 Create a shortcut to retrieve a model is a good practice (not necessary with injection enabled).
	 <listing version="3.0">
private function get modelExample():ModelExample {
	return getModel(ModelExample.NAME) as ModelExample;
}
private function doSomething():void {
	trace(modelExample.data);
}
	 </listing>
	 ]]></example>
<see><![CDATA[com.soma.core.model.SomaModels
	 ]]></see>
</classRec>
<method name='Model' fullname='com.soma.core.model:Model/Model' isStatic='false' isFinal='false' isOverride='false'  param_names='name;data;dispatcher' param_types='String;Object;flash.events:IEventDispatcher' param_defaults='null;null;null' result_type='*'>
<description><![CDATA[
		 Create an instance of a Model class. The Model class should be extended.
		 ]]></description>
<param><![CDATA[name Name of the model.
		 ]]></param>
<param><![CDATA[data Data of the model.
		 ]]></param>
<param><![CDATA[dispatcher EventDispatcher instance that can be used to dispatch commands.
		 ]]></param>
</method>
<method name='addEventListener' fullname='com.soma.core.model:Model/addEventListener' isStatic='false' isFinal='true' isOverride='false'  param_names='type;listener;useCapture;priority;useWeakReference' param_types='String;Function;Boolean;int;Boolean' param_defaults='undefined;undefined;false;0;false' result_type='void'>
<description><![CDATA[
		 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.
		 ]]></description>
<param><![CDATA[type The type of event.
		 ]]></param>
<param><![CDATA[listener The listener function that processes the event.
		 ]]></param>
<param><![CDATA[useCapture Determines whether the listener works in the capture phase or the target and bubbling phases.
		 ]]></param>
<param><![CDATA[priority The priority level of the event listener.
		 ]]></param>
<param><![CDATA[useWeakReference Determines whether the reference to the listener is strong or weak.
		 ]]></param>
</method>
<method name='dispatchEvent' fullname='com.soma.core.model:Model/dispatchEvent' isStatic='false' isFinal='true' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Dispatches an event into the event flow. The event target is the EventDispatcher object upon which dispatchEvent() is called.
		 ]]></description>
<param><![CDATA[event The event object dispatched into the event flow.
		 ]]></param>
<return><![CDATA[A value of true unless preventDefault() is called on the event, in which case it returns false.
		 ]]></return>
</method>
<method name='dispose' fullname='com.soma.core.model:Model/dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Method that can you can override, called when the model has been removed from the framework.
		 ]]></description>
</method>
<method name='getName' fullname='com.soma.core.model:Model/getName' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Retrieves the name of the model.
		 ]]></description>
<return><![CDATA[A String.
		 ]]></return>
</method>
<method name='hasEventListener' fullname='com.soma.core.model:Model/hasEventListener' isStatic='false' isFinal='true' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Checks whether the EventDispatcher object has any listeners registered for a specific type of event.
		 ]]></description>
<param><![CDATA[type The type of event.
		 ]]></param>
<return><![CDATA[A value of true if a listener of the specified type is registered; false otherwise.
		 ]]></return>
</method>
<method name='initialize' fullname='com.soma.core.model:Model/initialize' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Method that can you can override, called when the model has been registered to the framework.
		 ]]></description>
</method>
<method name='postConstruct' fullname='com.soma.core.model:Model/postConstruct' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='removeEventListener' fullname='com.soma.core.model:Model/removeEventListener' isStatic='false' isFinal='true' isOverride='false'  param_names='type;listener;useCapture' param_types='String;Function;Boolean' param_defaults='undefined;undefined;false' result_type='void'>
<description><![CDATA[
		 Removes a listener from the EventDispatcher object. If there is no matching listener registered with the EventDispatcher object, a call to this method has no effect.
		 ]]></description>
<param><![CDATA[type The type of event. 
		 ]]></param>
<param><![CDATA[listener The listener object to remove. 
		 ]]></param>
<param><![CDATA[useCapture Specifies whether the listener was registered for the capture phase or the target and bubbling phases.
		 ]]></param>
</method>
<method name='setName' fullname='com.soma.core.model:Model/setName' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the name of the model.
		 ]]></description>
<param><![CDATA[value A String.
		 ]]></param>
</method>
<method name='willTrigger' fullname='com.soma.core.model:Model/willTrigger' isStatic='false' isFinal='true' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.
		 ]]></description>
<param><![CDATA[type The type of event. 
		 ]]></param>
<return><![CDATA[A value of true if a listener of the specified type will be triggered; false otherwise. 
		 ]]></return>
</method>
<method name='data' fullname='com.soma.core.model:Model/data/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Object'>
<description><![CDATA[
		 Data of the model.
		 ]]></description>
</method>
<method name='dispatcher' fullname='com.soma.core.model:Model/dispatcher/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.events:IEventDispatcher'>
<description><![CDATA[
		 EventDispatcher instance of the model.
		 ]]></description>
<default><![CDATA[The framework instance.
		 ]]></default>
</method>
<method name='data' fullname='com.soma.core.model:Model/data/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Object' param_defaults='undefined' result_type='void'>
</method>
<method name='dispatcher' fullname='com.soma.core.model:Model/dispatcher/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='flash.events:IEventDispatcher' param_defaults='undefined' result_type='void'>
</method>
<field name='_data' fullname='com.soma.core.model:Model/protected:_data' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[
		 Variable that can be used to hold you data.
		 ]]></description>
<default><![CDATA[null;
		 ]]></default>
</field>
<field name='_dispatcher' fullname='com.soma.core.model:Model/protected:_dispatcher' type='flash.events:IEventDispatcher' isStatic='false' isConst='false' >
<description><![CDATA[
		 Instance of a EventDispatcher that can be used to dispatch commands.
		 ]]></description>
<default><![CDATA[Framework instance (Soma instance).
		 ]]></default>
</field>
<field name='_name' fullname='com.soma.core.model:Model/protected:_name' type='String' isStatic='false' isConst='false' >
<description><![CDATA[
		 Name of the model.
		 ]]></description>
</field>
<packageRec name='com.soma.core.model.null' fullname='com.soma.core.model.null'>
<description><![CDATA[
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied.
 See the License for the specific language governing rights and
 limitations under the License.
 
 The Original Code is SomaCore.
 
 The Initial Developer of the Original Code is Romuald Quantin.
 romu]]></description>
<soundstep.com><![CDATA[(www.soundstep.com).
 
 Portions created by
 
 Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved.
 All Rights Reserved.
 
 ]]></soundstep.com>
</packageRec>
<classRec name='SomaModels' fullname='com.soma.core.model:SomaModels' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/model/SomaModels.as' namespace='com.soma.core.model' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 The SomaModels class handles the models of the application. See the Model class documentation for implementation.
	 ]]></description>
<see><![CDATA[com.soma.core.model.Model
	 ]]></see>
</classRec>
<method name='SomaModels' fullname='com.soma.core.model:SomaModels/SomaModels' isStatic='false' isFinal='false' isOverride='false'  param_names='instance' param_types='com.soma.core.interfaces:ISoma' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Create an instance of the SomaModels class. Should not be directly instantiated, the framework will instantiate the class.
		 ]]></description>
<param><![CDATA[instance Framework instance.
		 ]]></param>
</method>
<method name='addModel' fullname='com.soma.core.model:SomaModels/addModel' isStatic='false' isFinal='false' isOverride='false'  param_names='modelName;model' param_types='String;com.soma.core.interfaces:IModel' param_defaults='undefined;undefined' result_type='com.soma.core.interfaces:IModel'>
<description><![CDATA[
		 Registers a model to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addModel(MyModel.NAME, new MyModel());</listing>
		 ]]></example>
<param><![CDATA[modelName Name of the model.
		 ]]></param>
<param><![CDATA[model Instance of the model.
		 ]]></param>
<return><![CDATA[The model instance.
		 ]]></return>
</method>
<method name='dispose' fullname='com.soma.core.model:SomaModels/dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Destroys all the models and properties. The class will call the dispose method of each model instance.
		 ]]></description>
</method>
<method name='getModel' fullname='com.soma.core.model:SomaModels/getModel' isStatic='false' isFinal='false' isOverride='false'  param_names='modelName' param_types='String' param_defaults='undefined' result_type='com.soma.core.interfaces:IModel'>
<description><![CDATA[
		 Retrieves the model instance that has been registered using its name.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var myModel:MyModel = getModel(MyModel.NAME) as MyModel;</listing>
		 ]]></example>
<param><![CDATA[modelName Name of the model.
		 ]]></param>
<return><![CDATA[A IModel instance.
		 ]]></return>
</method>
<method name='getModels' fullname='com.soma.core.model:SomaModels/getModels' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.utils:Dictionary'>
<description><![CDATA[
		 Retrieves all the model instances that have been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var models:Dictionary = getModels();</listing>
		 ]]></example>
<return><![CDATA[A Dictionary (the key of the Dictionary is the name used for the registration).
		 ]]></return>
</method>
<method name='hasModel' fullname='com.soma.core.model:SomaModels/hasModel' isStatic='false' isFinal='false' isOverride='false'  param_names='modelName' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a model has been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">hasModel(MyModel.NAME);</listing>
		 ]]></example>
<param><![CDATA[modelName Name of the model.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
</method>
<method name='initialize' fullname='com.soma.core.model:SomaModels/private:initialize' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeModel' fullname='com.soma.core.model:SomaModels/removeModel' isStatic='false' isFinal='false' isOverride='false'  param_names='modelName' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a model from the framework and call the dispose method of this model.
		 ]]></description>
<example><![CDATA[<listing version="3.0">removeModel(MyModel.NAME);</listing>
		 ]]></example>
<param><![CDATA[modelName Name of the model.
		 ]]></param>
</method>
<field name='_instance' fullname='com.soma.core.model:SomaModels/private:_instance' type='com.soma.core.interfaces:ISoma' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='models' fullname='com.soma.core.model:SomaModels/protected:models' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[
		 List of the models registered to the framework.
		 ]]></description>
</field>
<classRec name='SomaReflector' fullname='com.soma.core.di:SomaReflector' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/di/SomaReflector.as' namespace='com.soma.core.di' access='public' baseclass='org.swiftsuspenders:Reflector' interfaces='com.soma.core.interfaces:ISomaReflector' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 <p>The SomaReflector Class is an adapter for the reflection library used by the framework: Swiftsuspenders.<br/>
	 <a href="http://github.com/tschneidereit/SwiftSuspenders" target="_blank">http://github.com/tschneidereit/SwiftSuspenders</a>
	 </p>
	 ]]></description>
<see><![CDATA[com.soma.core.interfaces.ISomaReflector
	 ]]></see>
</classRec>
<method name='dispose' fullname='com.soma.core.di:SomaReflector/dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Destroys the reflector elements.
		 ]]></description>
</method>
<classRec name='SomaInjector' fullname='com.soma.core.di:SomaInjector' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/di/SomaInjector.as' namespace='com.soma.core.di' access='public' baseclass='Object' interfaces='com.soma.core.interfaces:ISomaInjector' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 <p>The SomaInjector Class is an adapter for the injection library used by the framework: Swiftsuspenders.<br/>
	 <a href="http://github.com/tschneidereit/SwiftSuspenders" target="_blank">http://github.com/tschneidereit/SwiftSuspenders</a>
	 </p>
	 <p>Injection is not enabled by default to keep the framework lighter in its basic use.<br/>
	 To enable injection, The Soma Class constructor or its setup public method can receive a Class that must extends ISomaInjector.<br/>
	 The default framework injector that can be used is SomaInjector.</p>
	 <p>The SomaInjector instance is accessible using the injector property from the facade (your Soma instance), the wires, the mediators and the commands.</p>
	 <p>The injector instance can be used directly and/or using metadata tags such as [Inject] or [PostConstruct], see the SwiftSuspenders documentation for more information: <a href="https://github.com/tschneidereit/SwiftSuspenders/blob/master/README.textile" target="_blank">https://github.com/tschneidereit/SwiftSuspenders</a></p>
	 ]]></description>
<example><![CDATA[<listing version="3.0">
var application:ISoma = new Soma(stage, SomaInjector);
	 </listing>
	 <listing version="3.0">
var application:ISoma = new Soma();
application.setup(stage, SomaInjector);
	 </listing>
	 <listing version="3.0">
package  {
	import com.soma.core.interfaces.ISoma;
	import com.soma.core.di.SomaInjector;
	import flash.display.Sprite;
	
	public class Main extends Sprite {
		
		private var _app:ISoma;
		
		public function Main() {
			_app = new SomaApplication(stage, SomaInjector);
		}
		
	}
}
	 </listing>
	 <listing version="3.0">
package  {
	import com.soma.core.Soma;
	import com.soma.core.interfaces.ISoma;
	import flash.display.Stage;
	
	public class SomaApplication extends Soma implements ISoma {

		public function SomaApplication(stage:Stage, injectorClass:Class) {
			super(stage, injectorClass);
		}
		
	}
}
	 </listing>
	 <listing version="3.0">
package {
	public class Injectee {
		[Inject]
		public var myClass:MyClass;
		[PostConstruct]
		public funtion test():void {
			trace(myClass);
		}
	}
}
	 </listing>
	 <listing version="3.0">
injector.mapSingleton(MyClass);
injector.createInstance(Injectee);
	 </listing>
	 ]]></example>
<see><![CDATA[com.soma.core.interfaces.ISomaInjector
	 ]]></see>
</classRec>
<method name='SomaInjector' fullname='com.soma.core.di:SomaInjector/SomaInjector' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Create an instance of the SomaInjector class.
		 Automatically created by the framework when the injection is enabled and accessible using the injector property.
		 ]]></description>
</method>
<method name='createChildInjector' fullname='com.soma.core.di:SomaInjector/createChildInjector' isStatic='false' isFinal='false' isOverride='false'  result_type='com.soma.core.interfaces:ISomaInjector'>
<description><![CDATA[
		 Creates a child injector.
		 The child injector inherits the rules of its parents.
		 ]]></description>
<example><![CDATA[<listing version="3.0">
var child:ISomaInjector = injector.createChildInjector();
		 </listing>
		 ]]></example>
<return><![CDATA[A ISomaInjector instance.
		 ]]></return>
</method>
<method name='createInstance' fullname='com.soma.core.di:SomaInjector/createInstance' isStatic='false' isFinal='false' isOverride='false'  param_names='classTarget' param_types='Class' param_defaults='undefined' result_type='Object'>
<description><![CDATA[
		 Instantiates a new instance from a given class.
		 This method will always creates a new instance, regardless of any singleton mapping.
		 ]]></description>
<example><![CDATA[<listing version="3.0">
injector.map(MyClass, MyClass);
var class1:MyClass = injector.createInstance(MyClass) as MyClass;
var class2:MyClass = injector.createInstance(MyClass) as MyClass;
		 </listing>
		 ]]></example>
<param><![CDATA[classTarget A Class.
		 ]]></param>
<return><![CDATA[An instance of the Class target.
		 ]]></return>
</method>
<method name='dispose' fullname='com.soma.core.di:SomaInjector/dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Destroys the injector elements.
		 ]]></description>
</method>
<method name='getInstance' fullname='com.soma.core.di:SomaInjector/getInstance' isStatic='false' isFinal='false' isOverride='false'  param_names='classTarget;name' param_types='Class;String' param_defaults='undefined;' result_type='Object'>
<description><![CDATA[
		 Retrieves or instantiates an instance of the given Class.
		 This method needs a mapping rule, the instance can be a singleton or a new one.
		 ]]></description>
<example><![CDATA[<listing version="3.0">
injector.map(MyClass, MyClass);
var class1:MyClass = injector.getInstance(MyClass) as MyClass;
var class2:MyClass = injector.getInstance(MyClass) as MyClass;
		 </listing>
		 ]]></example>
<param><![CDATA[classTarget A Class.
		 ]]></param>
<param><![CDATA[name Injection name.
		 ]]></param>
<return><![CDATA[An instance of the Class target.
		 ]]></return>
</method>
<method name='getParentInjector' fullname='com.soma.core.di:SomaInjector/getParentInjector' isStatic='false' isFinal='false' isOverride='false'  result_type='com.soma.core.interfaces:ISomaInjector'>
<description><![CDATA[
		 Retrieves the injector parent if any.
		 ]]></description>
<example><![CDATA[<listing version="3.0">
var parent:ISomaInjector = injector.getParentInjector();
		 </listing>
		 ]]></example>
<return><![CDATA[A ISomaInjector instance.
		 ]]></return>
</method>
<method name='hasMapping' fullname='com.soma.core.di:SomaInjector/hasMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='classTarget;name' param_types='Class;String' param_defaults='undefined;' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a mapping rule exists for the given Class.
		 ]]></description>
<example><![CDATA[<listing version="3.0">
injector.map(MyClass, MyClass)
var value:Boolean = injector.hasMapping(MyClass); // return true
		 </listing>
		 ]]></example>
<param><![CDATA[classTarget A Class.
		 ]]></param>
<param><![CDATA[name Injection name.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
</method>
<method name='initialize' fullname='com.soma.core.di:SomaInjector/com.soma.core.di:initialize' isStatic='false' isFinal='false' isOverride='false'  param_names='specifiedInjector;parentInjector' param_types='org.swiftsuspenders:Injector;com.soma.core.interfaces:ISomaInjector' param_defaults='null;null' result_type='com.soma.core.interfaces:ISomaInjector'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='injectInto' fullname='com.soma.core.di:SomaInjector/injectInto' isStatic='false' isFinal='false' isOverride='false'  param_names='instance' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Performs injection into the given instance.
		 ]]></description>
<example><![CDATA[<listing version="3.0">
package {
	public class Injectee {
		[Inject]
		public var myClass:MyClass;
	}
}
		 </listing>
		 <listing version="3.0">
injector.map(MyClass, MyClass);
var myClass:MyClass = injector.createInstance(MyClass) as MyClass;
injector.injectInto(myClass);
		 </listing>
		 ]]></example>
<param><![CDATA[instance An instance.
		 ]]></param>
</method>
<method name='mapSingletonOf' fullname='com.soma.core.di:SomaInjector/mapSingletonOf' isStatic='false' isFinal='false' isOverride='false'  param_names='whenAskFor;useSingletonOf;name' param_types='Class;Class;String' param_defaults='undefined;undefined;' result_type='void'>
<description><![CDATA[
		 Rule that defines the "whenAskFor" (usually an interface) to be injected with the same instance "useSingletonOf".
		 ]]></description>
<example><![CDATA[<listing version="3.0">
injector.mapSingletonOf(IMyClass, MyClass);
var myClass:MyClass = injector.getInstance(MyClass) as MyClass;
		 </listing>
		 ]]></example>
<param><![CDATA[whenAskFor A Class.
		 ]]></param>
<param><![CDATA[useSingletonOf A class.
		 ]]></param>
<param><![CDATA[name Injection name.
		 ]]></param>
</method>
<method name='mapSingleton' fullname='com.soma.core.di:SomaInjector/mapSingleton' isStatic='false' isFinal='false' isOverride='false'  param_names='classTarget;name' param_types='Class;String' param_defaults='undefined;' result_type='void'>
<description><![CDATA[
		 Rule that defines the "classTarget" to be injected with always the same instance.
		 ]]></description>
<example><![CDATA[<listing version="3.0">
injector.mapSingleton(MyClass, MyClass);
var myClass:MyClass = injector.getInstance(MyClass) as MyClass;
		 </listing>
		 ]]></example>
<param><![CDATA[classTarget A Class.
		 ]]></param>
<param><![CDATA[name Injection name.
		 ]]></param>
</method>
<method name='mapToInstance' fullname='com.soma.core.di:SomaInjector/mapToInstance' isStatic='false' isFinal='false' isOverride='false'  param_names='whenAskFor;instance;name' param_types='Class;Object;String' param_defaults='undefined;undefined;' result_type='void'>
<description><![CDATA[
		 Rule that defines the "whenAskFor" to be injected the given instance.
		 ]]></description>
<example><![CDATA[<listing version="3.0">
var myClass:MyClass = new MyClass();
injector.mapToInstance(MyClass, myClass)
var myClassSameInstance:MyClass = injector.getInstance(MyClass) as MyClass;
		 </listing>
		 ]]></example>
<param><![CDATA[whenAskFor A Class.
		 ]]></param>
<param><![CDATA[instance An instance.
		 ]]></param>
<param><![CDATA[name Injection name.
		 ]]></param>
</method>
<method name='map' fullname='com.soma.core.di:SomaInjector/map' isStatic='false' isFinal='false' isOverride='false'  param_names='whenAskFor;createClass;name' param_types='Class;Class;String' param_defaults='undefined;undefined;' result_type='void'>
<description><![CDATA[
		 Rule that defines the "whenAskFor" to be injected with an instance of the "createClass" Class.
		 ]]></description>
<example><![CDATA[<listing version="3.0">
injector.map(MyClass, MyOtherClass)
var myOtherClass:MyOtherClass = injector.getInstance(MyClass) as MyOtherClass;
		 </listing>
		 ]]></example>
<param><![CDATA[whenAskFor A Class.
		 ]]></param>
<param><![CDATA[createClass A class.
		 ]]></param>
<param><![CDATA[name Injection name.
		 ]]></param>
</method>
<method name='removeMapping' fullname='com.soma.core.di:SomaInjector/removeMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='classTarget;name' param_types='Class;String' param_defaults='undefined;' result_type='void'>
<description><![CDATA[
		 Removes a mapping rule exists for the given Class.
		 ]]></description>
<example><![CDATA[<listing version="3.0">
injector.map(MyClass, MyClass)
var value:Boolean = injector.hasMapping(MyClass); // return true
injector.removeMapping(MyClass);
value = injector.hasMapping(MyClass); // return false
		 </listing>
		 ]]></example>
<param><![CDATA[classTarget A Class.
		 ]]></param>
<param><![CDATA[name Injection name.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
</method>
<method name='applicationDomain' fullname='com.soma.core.di:SomaInjector/applicationDomain/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.system:ApplicationDomain'>
<description><![CDATA[
		 ApplicationDomain in use in the injector.
		 ]]></description>
<param><![CDATA[classTarget A Class.
		 ]]></param>
<param><![CDATA[name Injection name.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
</method>
<method name='applicationDomain' fullname='com.soma.core.di:SomaInjector/applicationDomain/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='flash.system:ApplicationDomain' param_defaults='undefined' result_type='void'>
</method>
<field name='_injector' fullname='com.soma.core.di:SomaInjector/protected:_injector' type='org.swiftsuspenders:Injector' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_parent' fullname='com.soma.core.di:SomaInjector/protected:_parent' type='com.soma.core.interfaces:ISomaInjector' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='SomaMediators' fullname='com.soma.core.mediator:SomaMediators' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/mediator/SomaMediators.as' namespace='com.soma.core.mediator' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 The SomaMediators class handles the mediators of the application. See the Mediator class documentation for implementation. 
	 ]]></description>
<see><![CDATA[com.soma.core.mediator.Mediator
	 ]]></see>
</classRec>
<method name='SomaMediators' fullname='com.soma.core.mediator:SomaMediators/SomaMediators' isStatic='false' isFinal='false' isOverride='false'  param_names='instance' param_types='com.soma.core.interfaces:ISoma' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Create an instance of the SomaWires class. Should not be directly instantiated, the framework will instantiate the class.
		 ]]></description>
<param><![CDATA[instance Framework instance.
		 ]]></param>
</method>
<method name='addedhandler' fullname='com.soma.core.mediator:SomaMediators/private:addedhandler' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='createMediator' fullname='com.soma.core.mediator:SomaMediators/private:createMediator' isStatic='false' isFinal='false' isOverride='false'  param_names='view;viewClass;mediatorClass' param_types='Object;Class;Class' param_defaults='undefined;undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='creationComplete' fullname='com.soma.core.mediator:SomaMediators/private:creationComplete' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='disposeMediator' fullname='com.soma.core.mediator:SomaMediators/private:disposeMediator' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='Object' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dispose' fullname='com.soma.core.mediator:SomaMediators/dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Destroys all the mediators and properties. The class will call the dispose method of each mediator instance.
		 ]]></description>
</method>
<method name='getClassFromInstance' fullname='com.soma.core.mediator:SomaMediators/private:getClassFromInstance' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Object' param_defaults='undefined' result_type='Class'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getClassName' fullname='com.soma.core.mediator:SomaMediators/private:getClassName' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='Object' param_defaults='undefined' result_type='String'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getMediatorByView' fullname='com.soma.core.mediator:SomaMediators/getMediatorByView' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='Object' param_defaults='undefined' result_type='com.soma.core.interfaces:IMediator'>
<description><![CDATA[
		 Retrieves a mediator instance using its view.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var mediator:MyViewMediator = mediators.getMediatorByView(myView) as MyViewMediator;</listing>
		 ]]></example>
<param><![CDATA[view View that the mediator represents.
		 ]]></param>
<return><![CDATA[A mediator instance.
		 ]]></return>
</method>
<method name='hasMediator' fullname='com.soma.core.mediator:SomaMediators/hasMediator' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='Object' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a mediator has been created by the framework for a specific view.
		 ]]></description>
<example><![CDATA[<listing version="3.0">mediators.hasMediator(myView);</listing>
		 ]]></example>
<param><![CDATA[view View that the mediator represents.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
</method>
<method name='initialize' fullname='com.soma.core.mediator:SomaMediators/private:initialize' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='isMapped' fullname='com.soma.core.mediator:SomaMediators/isMapped' isStatic='false' isFinal='false' isOverride='false'  param_names='viewClass' param_types='Class' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a view Class has a mapping rule.
		 ]]></description>
<example><![CDATA[<listing version="3.0">mediators.isMapped(MyView);</listing>
		 ]]></example>
<param><![CDATA[viewClass A Class.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
</method>
<method name='mapView' fullname='com.soma.core.mediator:SomaMediators/mapView' isStatic='false' isFinal='false' isOverride='false'  param_names='viewClass;mediatorClass' param_types='Class;Class' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Map a mediator Class to a view Class.
		 ]]></description>
<example><![CDATA[<listing version="3.0">mediators.mapView(MyView, MyViewMediator);</listing>
		 ]]></example>
<param><![CDATA[viewClass A Class.
		 ]]></param>
<param><![CDATA[mediatorClass A Class.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
</method>
<method name='removeMapping' fullname='com.soma.core.mediator:SomaMediators/removeMapping' isStatic='false' isFinal='false' isOverride='false'  param_names='viewClass' param_types='Class' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Remove a mapping rule for a specific Class.
		 ]]></description>
<example><![CDATA[<listing version="3.0">mediators.removeMapping(MyView);</listing>
		 ]]></example>
<param><![CDATA[viewClass A Class.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
</method>
<method name='removedhandler' fullname='com.soma.core.mediator:SomaMediators/private:removedhandler' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_classes' fullname='com.soma.core.mediator:SomaMediators/private:_classes' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_injector' fullname='com.soma.core.mediator:SomaMediators/private:_injector' type='com.soma.core.interfaces:ISomaInjector' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_instance' fullname='com.soma.core.mediator:SomaMediators/private:_instance' type='com.soma.core.interfaces:ISoma' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_mediators' fullname='com.soma.core.mediator:SomaMediators/private:_mediators' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<classRec name='Mediator' fullname='com.soma.core.mediator:Mediator' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/mediator/Mediator.as' namespace='com.soma.core.mediator' access='public' baseclass='com.soma.core.wire:Wire' interfaces='com.soma.core.interfaces:IMediator' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 <p>A Mediator is a class that extends a wire and has a relation one-to-one with a view. A mediator can be created with the injection enabled or disabled.</p>
	 <p>The first step is to map a view class to a mediator class, and everytime a view is added to a display list, a mediator for this view is automatically instantiated by the framework.</p>
	 <p>The mediator instance will automatically be destroyed by the framework when the view it represents will be removed from the display list.</p>
	 ]]></description>
<example><![CDATA[Map a view class to a mediator class
	 <listing version="3.0">
package {
	import com.soma.core.interfaces.IMediator;
	import com.soma.core.mediator.Mediator;

	public class MyViewMediator extends Mediator implements IMediator {
		
		[Inject]
		public var myView:MyView;
		
		override public function initialize():void {
			// called when the mediator has been created and registered to the framework
			trace(myView == viewComponent);
		}
		
		override public function dispose():void {
			// called when the mediator has been destroyed by the framework
		}
		
	}
}
	 </listing>
	 Map a mediator class to a view class.
	 <listing version="3.0">
mediators.mapView(MyView, MyViewMediator);
	 </listing>
	 Remove mapping.
	 <listing version="3.0">
mediators.removeMapping(MyView);
	 </listing>
	 Retrieve a mediator.
	 <listing version="3.0">
var mediator:MyViewMediator = mediators.getMediatorByView(view) as MyViewMediator;
	 </listing>
	 Trigger the creation of a mediator by adding a view to the display list.
	 <listing version="3.0">
mediators.mapView(MyView, MyViewMediator);
var view:MyView = new MyView();
myDisplayObjectContainer.addChild(view);
// mediator instance created
var mediator:MyViewMediator = mediators.getMediatorByView(view) as MyViewMediator;
trace(mediators.hasMediator(view));
	 </listing>
	 ]]></example>
<see><![CDATA[com.soma.core.mediator.SomaMediators
	 ]]></see>
<see><![CDATA[com.soma.core.interfaces.IMediator
	 ]]></see>
<see><![CDATA[com.soma.core.wire.Wire
	 ]]></see>
<see><![CDATA[com.soma.core.wire.SomaWires
	 ]]></see>
</classRec>
<method name='Mediator' fullname='com.soma.core.mediator:Mediator/Mediator' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='null' result_type='*'>
<description><![CDATA[
		 Create an instance of a Mediator class. The Mediator class should be extended and is usually automatically created (and removed) by the framework.
		 ]]></description>
<param><![CDATA[name Name of the wire.
		 ]]></param>
</method>
<method name='creationComplete' fullname='com.soma.core.mediator:Mediator/creationComplete' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Method that can you can override, called when if the view is part of the Flex Framework (not used for a pure AS3 view).
		 ]]></description>
</method>
<method name='postConstruct' fullname='com.soma.core.mediator:Mediator/postConstruct' isStatic='false' isFinal='true' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='viewComponent' fullname='com.soma.core.mediator:Mediator/viewComponent/get' isStatic='false' isFinal='true' isOverride='false'  result_type='Object'>
<description><![CDATA[
		 View that has been mapped to the mediator instance.
		 ]]></description>
</method>
<method name='viewComponent' fullname='com.soma.core.mediator:Mediator/viewComponent/set' isStatic='false' isFinal='true' isOverride='false'  param_names='value' param_types='Object' param_defaults='undefined' result_type='void'>
</method>
<field name='_viewComponent' fullname='com.soma.core.mediator:Mediator/protected:_viewComponent' type='Object' isStatic='false' isConst='false' >
<description><![CDATA[
		 View that has been mapped to the mediator instance.
		 ]]></description>
</field>
<packageRec name='com.soma.core.controller.null' fullname='com.soma.core.controller.null'>
<description><![CDATA[
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied.
 See the License for the specific language governing rights and
 limitations under the License.
 
 The Original Code is SomaCore.
 
 The Initial Developer of the Original Code is Romuald Quantin.
 romu]]></description>
<soundstep.com><![CDATA[(www.soundstep.com).
 
 Portions created by
 
 Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved.
 All Rights Reserved.
 
 ]]></soundstep.com>
</packageRec>
<classRec name='SomaController' fullname='com.soma.core.controller:SomaController' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/controller/SomaController.as' namespace='com.soma.core.controller' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 <p>The SomaController handles the commands added to the framework and the events dispatched from eiher a display list or a framework element (instance of the framework, commands or wires).</p>
	 <p>All the events dispatched with a property bubbles set to false will be ignored, that's why the event mapped to a command class must have this property set to true.</p>
	 <p>You can add commands, remove commands and dispatch commands from: the framework instance, the stage, any DisplayObject (as long as it is added to the stage), a wire, a command or a model using its dispatcher property.</p>
	 <p>You can create 4 types of commands: synchronous (Command), asynchronous (Command that implements ICommandASync), parallel (ParallelCommand) and sequence (SequenceCommand). See each class for a detailed explanation and examples.</p>
	 <p>You can use the properties of a custom event to send parameters and receive them in the command.</p>
	 ]]></description>
<example><![CDATA[<listing version="3.0">
addCommand(MyEvent.DOSOMETHING, CommandExample);
removeCommand(MyEvent.DOSOMETHING);
dispatchEvent(new MyEvent(MyEvent.DOSOMETHING));
	 </listing>
	 ]]></example>
<see><![CDATA[com.soma.core.controller.Command
	 ]]></see>
<see><![CDATA[com.soma.core.controller.ParallelCommand
	 ]]></see>
<see><![CDATA[com.soma.core.controller.SequenceCommand
	 ]]></see>
<see><![CDATA[com.soma.core.interfaces.ICommand
	 ]]></see>
<see><![CDATA[com.soma.core.interfaces.ICommandASync
	 ]]></see>
<see><![CDATA[com.soma.core.interfaces.IParallelCommand
	 ]]></see>
<see><![CDATA[com.soma.core.interfaces.ISequenceCommand
	 ]]></see>
</classRec>
<method name='SomaController' fullname='com.soma.core.controller:SomaController/SomaController' isStatic='false' isFinal='false' isOverride='false'  param_names='instance' param_types='com.soma.core.interfaces:ISoma' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Create an instance of the SomaController class. Should not be directly instantiated, the framework will instantiate the class.
		 ]]></description>
<param><![CDATA[instance Framework instance.
		 ]]></param>
</method>
<method name='addCommand' fullname='com.soma.core.controller:SomaController/addCommand' isStatic='false' isFinal='false' isOverride='false'  param_names='commandName;command' param_types='String;Class' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Registers a command to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addCommand(MyEvent.DOSOMETHING, MyCommand);</listing>
		 ]]></example>
<param><![CDATA[commandName Event type that is used as a command name.
		 ]]></param>
<param><![CDATA[command Class that will be executed when a command has been dispatched.
		 ]]></param>
</method>
<method name='addInterceptor' fullname='com.soma.core.controller:SomaController/private:addInterceptor' isStatic='false' isFinal='false' isOverride='false'  param_names='commandName' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='commandIsValid' fullname='com.soma.core.controller:SomaController/com.soma.core.controller:commandIsValid' isStatic='false' isFinal='false' isOverride='false'  param_names='CommandClass' param_types='Class' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='displayListHandler' fullname='com.soma.core.controller:SomaController/private:displayListHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dispose' fullname='com.soma.core.controller:SomaController/dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Destroys the SomaController elements (all commands, sequencers and properties).
		 ]]></description>
</method>
<method name='executeCommand' fullname='com.soma.core.controller:SomaController/com.soma.core.controller:executeCommand' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='getCommand' fullname='com.soma.core.controller:SomaController/getCommand' isStatic='false' isFinal='false' isOverride='false'  param_names='commandName' param_types='String' param_defaults='undefined' result_type='Class'>
<description><![CDATA[
		 Retrieves the command class that has been registered with a command name.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var commandClass:ICommand = getCommand(MyEvent.DOSOMETHING) as ICommand;</listing>
		 ]]></example>
<param><![CDATA[commandName Event type that is used as a command name.
		 ]]></param>
<return><![CDATA[A class.
		 ]]></return>
</method>
<method name='getCommands' fullname='com.soma.core.controller:SomaController/getCommands' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var sequencer:ISequenceCommand = getSequencer(myEvent);</listing>
		 ]]></example>
<param><![CDATA[event Event instance.
		 ]]></param>
<return><![CDATA[A sequencer (ISequenceCommand).
		 ]]></return>
</method>
<method name='getLastSequencer' fullname='com.soma.core.controller:SomaController/getLastSequencer' isStatic='false' isFinal='false' isOverride='false'  result_type='com.soma.core.interfaces:ISequenceCommand'>
<description><![CDATA[
		 Retrieves the last sequence command that has been instantiated in the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var lastSequencer:ISequenceCommand = getLastSequencer();</listing>
		 ]]></example>
<return><![CDATA[An ISequenceCommand instance.
		 ]]></return>
</method>
<method name='getRunningSequencers' fullname='com.soma.core.controller:SomaController/getRunningSequencers' isStatic='false' isFinal='false' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Retrieves all the sequence command instances that are running.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var sequencers:Array = getRunningSequencers();</listing>
		 ]]></example>
<return><![CDATA[An Array of ISequenceCommand instances.
		 ]]></return>
</method>
<method name='getSequencer' fullname='com.soma.core.controller:SomaController/getSequencer' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='com.soma.core.interfaces:ISequenceCommand'>
<description><![CDATA[
		 Stops a sequence command using an event instance that has been created from this sequence command.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var success:Boolean = stopSequencerWithEvent(myEvent);</listing>
		 ]]></example>
<param><![CDATA[event Event instance.
		 ]]></param>
<return><![CDATA[A Boolean (true if a sequence command has been stopped).
		 ]]></return>
</method>
<method name='hasCommand' fullname='com.soma.core.controller:SomaController/hasCommand' isStatic='false' isFinal='false' isOverride='false'  param_names='commandName' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a command has been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">hasCommand(MyEvent.DOSOMETHING);</listing>
		 ]]></example>
<param><![CDATA[commandName Event type that is used as a command name.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
</method>
<method name='initialize' fullname='com.soma.core.controller:SomaController/private:initialize' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='instanceHandler' fullname='com.soma.core.controller:SomaController/private:instanceHandler' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='isPartOfASequence' fullname='com.soma.core.controller:SomaController/isPartOfASequence' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether an event has been instantiated from a ISequenceCommand class.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var inSequence:Boolean = isPartOfASequence(myEvent);</listing>
		 ]]></example>
<return><![CDATA[A Boolean.
		 ]]></return>
</method>
<method name='registerSequencedCommand' fullname='com.soma.core.controller:SomaController/com.soma.core.controller:registerSequencedCommand' isStatic='false' isFinal='false' isOverride='false'  param_names='sequencer;event' param_types='com.soma.core.interfaces:ISequenceCommand;flash.events:Event' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeCommand' fullname='com.soma.core.controller:SomaController/removeCommand' isStatic='false' isFinal='false' isOverride='false'  param_names='commandName' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a command from the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">removeCommand(MyEvent.DOSOMETHING);</listing>
		 ]]></example>
<param><![CDATA[commandName Event type that is used as a command name.
		 ]]></param>
</method>
<method name='removeInterceptor' fullname='com.soma.core.controller:SomaController/private:removeInterceptor' isStatic='false' isFinal='false' isOverride='false'  param_names='commandName' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='stopAllSequencers' fullname='com.soma.core.controller:SomaController/stopAllSequencers' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Stops all the sequence command instances that are running.
		 ]]></description>
<example><![CDATA[<listing version="3.0">stopAllSequencers();</listing>
		 ]]></example>
</method>
<method name='stopSequencerWithEvent' fullname='com.soma.core.controller:SomaController/stopSequencerWithEvent' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Stops a sequence command using an event instance that has been created from this sequence command.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var success:Boolean = stopSequencerWithEvent(myEvent);</listing>
		 ]]></example>
<param><![CDATA[event Event instance.
		 ]]></param>
<return><![CDATA[A Boolean (true if a sequence command has been stopped).
		 ]]></return>
</method>
<method name='stopSequencer' fullname='com.soma.core.controller:SomaController/stopSequencer' isStatic='false' isFinal='false' isOverride='false'  param_names='sequencer' param_types='com.soma.core.interfaces:ISequenceCommand' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Stops a sequence command using the sequence command instance itself.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var success:Boolean = stopSequencer(mySequenceCommand);</listing>
		 ]]></example>
<param><![CDATA[sequencer The sequence command instance.
		 ]]></param>
<return><![CDATA[A Boolean (true if the sequence command has been stopped).
		 ]]></return>
</method>
<method name='unregisterSequencedCommand' fullname='com.soma.core.controller:SomaController/com.soma.core.controller:unregisterSequencedCommand' isStatic='false' isFinal='false' isOverride='false'  param_names='sequencer;event' param_types='com.soma.core.interfaces:ISequenceCommand;flash.events:Event' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='unregisterSequencer' fullname='com.soma.core.controller:SomaController/com.soma.core.controller:unregisterSequencer' isStatic='false' isFinal='false' isOverride='false'  param_names='sequencer' param_types='com.soma.core.interfaces:ISequenceCommand' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<field name='_commands' fullname='com.soma.core.controller:SomaController/private:_commands' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_instance' fullname='com.soma.core.controller:SomaController/private:_instance' type='com.soma.core.interfaces:ISoma' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_lastEvent' fullname='com.soma.core.controller:SomaController/private:_lastEvent' type='flash.events:Event' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_lastSequencer' fullname='com.soma.core.controller:SomaController/private:_lastSequencer' type='com.soma.core.interfaces:ISequenceCommand' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_sequencers' fullname='com.soma.core.controller:SomaController/private:_sequencers' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<packageRec name='com.soma.core.controller.null' fullname='com.soma.core.controller.null'>
<description><![CDATA[
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied.
 See the License for the specific language governing rights and
 limitations under the License.
 
 The Original Code is SomaCore.
 
 The Initial Developer of the Original Code is Romuald Quantin.
 romu]]></description>
<soundstep.com><![CDATA[(www.soundstep.com).
 
 Portions created by
 
 Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved.
 All Rights Reserved.
 
 ]]></soundstep.com>
</packageRec>
<classRec name='Command' fullname='com.soma.core.controller:Command' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/controller/Command.as' namespace='com.soma.core.controller' access='public' baseclass='Object' interfaces='flash.events:IEventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 Command class that will be instantiated when a registered event is dispatched, the framework will automatically call the execute method.
	 ]]></description>
<example><![CDATA[Register a command.
	 <listing version="3.0">
addCommand(MyEvent.DOSOMETHING, CommandExample);
dispatchEvent(new MyEvent(MyEvent.DOSOMETHING));
	 </listing>
	 Create a normal command.
	 <listing version="3.0">
package  {
	import flash.events.Event;
	import com.soma.core.interfaces.ICommand;
	import com.soma.core.controller.Command;
	
	public class CommandExample extends Command implements ICommand {

		public function execute(event:Event):void {
			
		}
		
	}
}
	 </listing>
	 Create an asynchronous command.
	 <listing version="3.0">
package  {
	import flash.events.Event;
	import com.soma.core.interfaces.ICommandASync;
	import com.soma.core.controller.Command;
	
	public class CommandASyncExample extends Command implements ICommandASync {

		public function CommandASyncExample() {
			
		}
		
		public function execute(event:Event):void {
			
		}
		
		public function fault(info:Object):void {
			
		}
		
		public function result(data:Object):void {
			
		}
		
	}
}
	 </listing>
	 ]]></example>
<see><![CDATA[com.soma.core.controller.SomaController
	 ]]></see>
<see><![CDATA[com.soma.core.controller.ParallelCommand
	 ]]></see>
<see><![CDATA[com.soma.core.controller.SequenceCommand
	 ]]></see>
<see><![CDATA[com.soma.core.interfaces.ICommand
	 ]]></see>
<see><![CDATA[com.soma.core.interfaces.ICommandASync
	 ]]></see>
</classRec>
<method name='Command' fullname='com.soma.core.controller:Command/Command' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Create an instance of the Command class. Should not be directly instantiated, the framework will instantiate the class.
		 ]]></description>
</method>
<method name='addCommand' fullname='com.soma.core.controller:Command/addCommand' isStatic='false' isFinal='true' isOverride='false'  param_names='commandName;command' param_types='String;Class' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Registers a command to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addCommand(MyEvent.DOSOMETHING, MyCommand);</listing>
		 ]]></example>
<param><![CDATA[commandName Event type that is used as a command name.
		 ]]></param>
<param><![CDATA[command Class that will be executed when a command has been dispatched.
		 ]]></param>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='addEventListener' fullname='com.soma.core.controller:Command/addEventListener' isStatic='false' isFinal='true' isOverride='false'  param_names='type;listener;useCapture;priority;useWeakReference' param_types='String;Function;Boolean;int;Boolean' param_defaults='undefined;undefined;false;0;false' result_type='void'>
<description><![CDATA[
		 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.
		 ]]></description>
<param><![CDATA[type The type of event.
		 ]]></param>
<param><![CDATA[listener The listener function that processes the event.
		 ]]></param>
<param><![CDATA[useCapture Determines whether the listener works in the capture phase or the target and bubbling phases.
		 ]]></param>
<param><![CDATA[priority The priority level of the event listener.
		 ]]></param>
<param><![CDATA[useWeakReference Determines whether the reference to the listener is strong or weak.
		 ]]></param>
</method>
<method name='addModel' fullname='com.soma.core.controller:Command/addModel' isStatic='false' isFinal='true' isOverride='false'  param_names='modelName;model' param_types='String;com.soma.core.interfaces:IModel' param_defaults='undefined;undefined' result_type='com.soma.core.interfaces:IModel'>
<description><![CDATA[
		 Registers a model to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addModel(MyModel.NAME, new MyModel());</listing>
		 ]]></example>
<param><![CDATA[modelName Name of the model.
		 ]]></param>
<param><![CDATA[model Instance of the model.
		 ]]></param>
<return><![CDATA[The model instance.
		 ]]></return>
<see><![CDATA[com.soma.core.model.SomaModels
		 ]]></see>
</method>
<method name='addView' fullname='com.soma.core.controller:Command/addView' isStatic='false' isFinal='true' isOverride='false'  param_names='viewName;view' param_types='String;Object' param_defaults='undefined;undefined' result_type='Object'>
<description><![CDATA[
		 Registers a view to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addView(MySprite.NAME, new MySprite());</listing>
		 ]]></example>
<param><![CDATA[viewName Name of the view.
		 ]]></param>
<param><![CDATA[view Instance of the view.
		 ]]></param>
<return><![CDATA[The view instance.
		 ]]></return>
<see><![CDATA[com.soma.core.view.SomaViews
		 ]]></see>
</method>
<method name='addWire' fullname='com.soma.core.controller:Command/addWire' isStatic='false' isFinal='true' isOverride='false'  param_names='wireName;wire' param_types='String;com.soma.core.interfaces:IWire' param_defaults='undefined;undefined' result_type='com.soma.core.interfaces:IWire'>
<description><![CDATA[
		 Registers a wire to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addWire(MyWire.NAME, new MyWire());</listing>
		 ]]></example>
<param><![CDATA[wireName Name of the wire.
		 ]]></param>
<param><![CDATA[view Instance of the wire.
		 ]]></param>
<return><![CDATA[The wire instance.
		 ]]></return>
<see><![CDATA[com.soma.core.wire.SomaWires
		 ]]></see>
</method>
<method name='dispatchEvent' fullname='com.soma.core.controller:Command/dispatchEvent' isStatic='false' isFinal='true' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Dispatches an event into the event flow. The event target is the EventDispatcher object upon which dispatchEvent() is called.
		 ]]></description>
<param><![CDATA[event The event object dispatched into the event flow.
		 ]]></param>
<return><![CDATA[A value of true unless preventDefault() is called on the event, in which case it returns false.
		 ]]></return>
</method>
<method name='getCommand' fullname='com.soma.core.controller:Command/getCommand' isStatic='false' isFinal='true' isOverride='false'  param_names='commandName' param_types='String' param_defaults='undefined' result_type='Class'>
<description><![CDATA[
		 Retrieves the command class that has been registered with a command name.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var commandClass:ICommand = getCommand(MyEvent.DOSOMETHING) as ICommand;</listing>
		 ]]></example>
<param><![CDATA[commandName Event type that is used as a command name.
		 ]]></param>
<return><![CDATA[A class.
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='getCommands' fullname='com.soma.core.controller:Command/getCommands' isStatic='false' isFinal='true' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Retrieves all the command names (event type) that have been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var commands:Array = getCommands();</listing>
		 ]]></example>
<return><![CDATA[An Array of String (command name).
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='getLastSequencer' fullname='com.soma.core.controller:Command/getLastSequencer' isStatic='false' isFinal='true' isOverride='false'  result_type='com.soma.core.interfaces:ISequenceCommand'>
<description><![CDATA[
		 Retrieves the last sequence command that has been instantiated in the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var lastSequencer:ISequenceCommand = getLastSequencer();</listing>
		 ]]></example>
<return><![CDATA[An ISequenceCommand instance.
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='getModel' fullname='com.soma.core.controller:Command/getModel' isStatic='false' isFinal='true' isOverride='false'  param_names='modelName' param_types='String' param_defaults='undefined' result_type='com.soma.core.interfaces:IModel'>
<description><![CDATA[
		 Retrieves the model instance that has been registered using its name.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var myModel:MyModel = getModel(MyModel.NAME) as MyModel;</listing>
		 ]]></example>
<param><![CDATA[modelName Name of the model.
		 ]]></param>
<return><![CDATA[A IModel instance.
		 ]]></return>
<see><![CDATA[com.soma.core.model.SomaModels
		 ]]></see>
</method>
<method name='getModels' fullname='com.soma.core.controller:Command/getModels' isStatic='false' isFinal='true' isOverride='false'  result_type='flash.utils:Dictionary'>
<description><![CDATA[
		 Retrieves all the model instances that have been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var models:Dictionary = getModels();</listing>
		 ]]></example>
<return><![CDATA[A Dictionary (the key of the Dictionary is the name used for the registration).
		 ]]></return>
<see><![CDATA[com.soma.core.model.SomaModels
		 ]]></see>
</method>
<method name='getRunningSequencers' fullname='com.soma.core.controller:Command/getRunningSequencers' isStatic='false' isFinal='true' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Retrieves all the sequence command instances that are running.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var sequencers:Array = getRunningSequencers();</listing>
		 ]]></example>
<return><![CDATA[An Array of ISequenceCommand instances.
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='getSequencer' fullname='com.soma.core.controller:Command/getSequencer' isStatic='false' isFinal='true' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='com.soma.core.interfaces:ISequenceCommand'>
<description><![CDATA[
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var sequencer:ISequenceCommand = getSequencer(myEvent);</listing>
		 ]]></example>
<param><![CDATA[event Event instance.
		 ]]></param>
<return><![CDATA[A sequencer (ISequenceCommand).
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='getView' fullname='com.soma.core.controller:Command/getView' isStatic='false' isFinal='true' isOverride='false'  param_names='viewName' param_types='String' param_defaults='undefined' result_type='Object'>
<description><![CDATA[
		 Retrieves the view instance that has been registered using its name.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var mySprite:MySprite = getView(MySprite.NAME) as MySprite;</listing>
		 ]]></example>
<param><![CDATA[viewName Name of the view.
		 ]]></param>
<return><![CDATA[An Object instance.
		 ]]></return>
<see><![CDATA[com.soma.core.view.SomaViews
		 ]]></see>
</method>
<method name='getViews' fullname='com.soma.core.controller:Command/getViews' isStatic='false' isFinal='true' isOverride='false'  result_type='flash.utils:Dictionary'>
<description><![CDATA[
		 Retrieves all the view instances that have been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var sprites:Dictionary = getViews();</listing>
		 ]]></example>
<return><![CDATA[A Dictionary (the key of the Dictionary is the name used for the registration).
		 ]]></return>
<see><![CDATA[com.soma.core.view.SomaViews
		 ]]></see>
</method>
<method name='getWire' fullname='com.soma.core.controller:Command/getWire' isStatic='false' isFinal='true' isOverride='false'  param_names='wireName' param_types='String' param_defaults='undefined' result_type='com.soma.core.interfaces:IWire'>
<description><![CDATA[
		 Retrieves the wire instance that has been registered using its name.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var myWire:MyWire = getWire(MyWire.NAME) as MyWire;</listing>
		 ]]></example>
<param><![CDATA[wireName Name of the wire.
		 ]]></param>
<return><![CDATA[A wire instance.
		 ]]></return>
<see><![CDATA[com.soma.core.wire.SomaWires
		 ]]></see>
</method>
<method name='getWires' fullname='com.soma.core.controller:Command/getWires' isStatic='false' isFinal='true' isOverride='false'  result_type='flash.utils:Dictionary'>
<description><![CDATA[
		 Retrieves all the wire instances that have been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var wires:Dictionary = getWires();</listing>
		 ]]></example>
<return><![CDATA[A Dictionary (the key of the Dictionary is the name used for the registration).
		 ]]></return>
<see><![CDATA[com.soma.core.wire.SomaWires
		 ]]></see>
</method>
<method name='hasCommand' fullname='com.soma.core.controller:Command/hasCommand' isStatic='false' isFinal='true' isOverride='false'  param_names='commandName' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a command has been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">hasCommand(MyEvent.DOSOMETHING);</listing>
		 ]]></example>
<param><![CDATA[commandName Event type that is used as a command name.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='hasEventListener' fullname='com.soma.core.controller:Command/hasEventListener' isStatic='false' isFinal='true' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Checks whether the EventDispatcher object has any listeners registered for a specific type of event.
		 ]]></description>
<param><![CDATA[type The type of event.
		 ]]></param>
<return><![CDATA[A value of true if a listener of the specified type is registered; false otherwise.
		 ]]></return>
</method>
<method name='hasModel' fullname='com.soma.core.controller:Command/hasModel' isStatic='false' isFinal='true' isOverride='false'  param_names='modelName' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a model has been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">hasModel(MyModel.NAME);</listing>
		 ]]></example>
<param><![CDATA[modelName Name of the model.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
<see><![CDATA[com.soma.core.model.SomaModels
		 ]]></see>
</method>
<method name='hasView' fullname='com.soma.core.controller:Command/hasView' isStatic='false' isFinal='true' isOverride='false'  param_names='viewName' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a view has been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">hasView(MySprite.NAME);</listing>
		 ]]></example>
<param><![CDATA[viewName Name of the view.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
<see><![CDATA[com.soma.core.view.SomaViews
		 ]]></see>
</method>
<method name='hasWire' fullname='com.soma.core.controller:Command/hasWire' isStatic='false' isFinal='true' isOverride='false'  param_names='wireName' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a wire has been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">hasWire(MyWire.NAME);</listing>
		 ]]></example>
<param><![CDATA[wireName Name of the wire.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
<see><![CDATA[com.soma.core.wire.SomaWires
		 ]]></see>
</method>
<method name='initialize' fullname='com.soma.core.controller:Command/protected:initialize' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ 
		 Method that you can optionally overwrite and that is called after the command has been registered with the framework.
		 ]]></description>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='isPartOfASequence' fullname='com.soma.core.controller:Command/isPartOfASequence' isStatic='false' isFinal='true' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether an event has been instantiated from a ISequenceCommand class.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var inSequence:Boolean = isPartOfASequence(myEvent);</listing>
		 ]]></example>
<return><![CDATA[A Boolean.
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='registerInstance' fullname='com.soma.core.controller:Command/somans:registerInstance' isStatic='false' isFinal='false' isOverride='false'  param_names='instance' param_types='com.soma.core.interfaces:ISoma' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeCommand' fullname='com.soma.core.controller:Command/removeCommand' isStatic='false' isFinal='true' isOverride='false'  param_names='commandName' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a command from the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">removeCommand(MyEvent.DOSOMETHING);</listing>
		 ]]></example>
<param><![CDATA[commandName Event type that is used as a command name.
		 ]]></param>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='removeEventListener' fullname='com.soma.core.controller:Command/removeEventListener' isStatic='false' isFinal='true' isOverride='false'  param_names='type;listener;useCapture' param_types='String;Function;Boolean' param_defaults='undefined;undefined;false' result_type='void'>
<description><![CDATA[
		 Removes a listener from the EventDispatcher object. If there is no matching listener registered with the EventDispatcher object, a call to this method has no effect.
		 ]]></description>
<param><![CDATA[type The type of event. 
		 ]]></param>
<param><![CDATA[listener The listener object to remove. 
		 ]]></param>
<param><![CDATA[useCapture Specifies whether the listener was registered for the capture phase or the target and bubbling phases.
		 ]]></param>
</method>
<method name='removeModel' fullname='com.soma.core.controller:Command/removeModel' isStatic='false' isFinal='true' isOverride='false'  param_names='modelName' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a model from the framework and call the dispose method of this model.
		 ]]></description>
<example><![CDATA[<listing version="3.0">removeModel(MyModel.NAME);</listing>
		 ]]></example>
<param><![CDATA[modelName Name of the model.
		 ]]></param>
<see><![CDATA[com.soma.core.model.SomaModels
		 ]]></see>
</method>
<method name='removeView' fullname='com.soma.core.controller:Command/removeView' isStatic='false' isFinal='true' isOverride='false'  param_names='viewName' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a view from the framework and call the (optional) dispose method of this view.
		 ]]></description>
<example><![CDATA[<listing version="3.0">removeView(MySprite.NAME);</listing>
		 ]]></example>
<param><![CDATA[viewName Name of the view.
		 ]]></param>
<see><![CDATA[com.soma.core.view.SomaViews
		 ]]></see>
</method>
<method name='removeWire' fullname='com.soma.core.controller:Command/removeWire' isStatic='false' isFinal='true' isOverride='false'  param_names='wireName' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a wire from the framework and call the dispose method of this wire.
		 ]]></description>
<example><![CDATA[<listing version="3.0">removeWire(MyWire.NAME);</listing>
		 ]]></example>
<param><![CDATA[wireName Name of the wire.
		 ]]></param>
<see><![CDATA[com.soma.core.wire.SomaWires
		 ]]></see>
</method>
<method name='stopAllSequencers' fullname='com.soma.core.controller:Command/stopAllSequencers' isStatic='false' isFinal='true' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Stops all the sequence command instances that are running.
		 ]]></description>
<example><![CDATA[<listing version="3.0">stopAllSequencers();</listing>
		 ]]></example>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='stopSequencerWithEvent' fullname='com.soma.core.controller:Command/stopSequencerWithEvent' isStatic='false' isFinal='true' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Stops a sequence command using an event instance that has been created from this sequence command.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var success:Boolean = stopSequencerWithEvent(myEvent);</listing>
		 ]]></example>
<param><![CDATA[event Event instance.
		 ]]></param>
<return><![CDATA[A Boolean (true if a sequence command has been stopped).
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='stopSequencer' fullname='com.soma.core.controller:Command/stopSequencer' isStatic='false' isFinal='true' isOverride='false'  param_names='sequencer' param_types='com.soma.core.interfaces:ISequenceCommand' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Stops a sequence command using the sequence command instance itself.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var success:Boolean = stopSequencer(mySequenceCommand);</listing>
		 ]]></example>
<param><![CDATA[sequencer The sequence command instance.
		 ]]></param>
<return><![CDATA[A Boolean (true if the sequence command has been stopped).
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='willTrigger' fullname='com.soma.core.controller:Command/willTrigger' isStatic='false' isFinal='true' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.
		 ]]></description>
<param><![CDATA[type The type of event. 
		 ]]></param>
<return><![CDATA[A value of true if a listener of the specified type will be triggered; false otherwise. 
		 ]]></return>
</method>
<method name='injector' fullname='com.soma.core.controller:Command/injector/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.soma.core.interfaces:ISomaInjector'>
</method>
<method name='instance' fullname='com.soma.core.controller:Command/instance/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.soma.core.interfaces:ISoma'>
<description><![CDATA[
		 Retrieves the instance of the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var myExtendedSomaClass:SomaApplication = SomaApplication(instance);</listing>
		 ]]></example>
<return><![CDATA[An ISoma instance.
		 ]]></return>
</method>
<method name='mediators' fullname='com.soma.core.controller:Command/mediators/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.soma.core.mediator:SomaMediators'>
</method>
<method name='stage' fullname='com.soma.core.controller:Command/stage/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.display:Stage'>
<description><![CDATA[
		 Get the stage that has been registered to the framework.
		 ]]></description>
<return><![CDATA[The stage instance.
		 ]]></return>
</method>
<field name='_instance' fullname='com.soma.core.controller:Command/private:_instance' type='com.soma.core.interfaces:ISoma' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<packageRec name='com.soma.core.controller.null' fullname='com.soma.core.controller.null'>
<description><![CDATA[
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied.
 See the License for the specific language governing rights and
 limitations under the License.
 
 The Original Code is SomaCore.
 
 The Initial Developer of the Original Code is Romuald Quantin.
 romu]]></description>
<soundstep.com><![CDATA[(www.soundstep.com).
 
 Portions created by
 
 Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved.
 All Rights Reserved.
 
 ]]></soundstep.com>
</packageRec>
<classRec name='ParallelCommand' fullname='com.soma.core.controller:ParallelCommand' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/controller/ParallelCommand.as' namespace='com.soma.core.controller' access='public' baseclass='com.soma.core.controller:Command' interfaces='com.soma.core.interfaces:IParallelCommand' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 The ParallelCommand class is used to execute a list of commands at the same time.
	 ]]></description>
<example><![CDATA[Register commands and a parallel command.
	 <listing version="3.0">
addCommand(MyEvent.DO_SOMETHING, CommandExample);
addCommand(MyEvent.DO_SOMETHING_ELSE, CommandExample);
addCommand(MyEvent.EXECUTE_PARALLEL_COMMAND, ParallelCommandExample);
dispatchEvent(new MyEvent(MyEvent.EXECUTE_PARALLEL_COMMAND));
	 </listing>
	 <listing version="3.0">
package  {
	import com.soma.core.interfaces.IParallelCommand;
	import com.soma.core.controller.ParallelCommand;
	
	public class ParallelCommandExample extends ParallelCommand implements IParallelCommand {

		public function ParallelCommandExample() {
			
		}
		
		override protected function initializeSubCommands():void {
			addSubCommand(new MyEvent(MyEvent.DO_SOMETHING));
			addSubCommand(new MyEvent(MyEvent.DO_SOMETHING_ELSE));
		}
		
	}
}
	 </listing>
	 ]]></example>
<see><![CDATA[com.soma.core.controller.SomaController
	 ]]></see>
<see><![CDATA[com.soma.core.controller.Command
	 ]]></see>
<see><![CDATA[com.soma.core.controller.SequenceCommand
	 ]]></see>
<see><![CDATA[com.soma.core.interfaces.IParallelCommand
	 ]]></see>
</classRec>
<method name='ParallelCommand' fullname='com.soma.core.controller:ParallelCommand/ParallelCommand' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Create an instance of the ParallelCommand class. Should not be directly instantiated, the framework will instantiate the class.
		 ]]></description>
</method>
<method name='addSubCommand' fullname='com.soma.core.controller:ParallelCommand/protected:addSubCommand' isStatic='false' isFinal='true' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Add a command to the list of commands to execute in parallel.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addSubCommand(new MyEvent(MyEvent.DO_SOMETHING));</listing>
		 ]]></example>
<param><![CDATA[event Event instance (must be registered as a command previously).
		 ]]></param>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='execute' fullname='com.soma.core.controller:ParallelCommand/execute' isStatic='false' isFinal='true' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeSubCommands' fullname='com.soma.core.controller:ParallelCommand/protected:initializeSubCommands' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ 
		 Method that you can overwrite to add commands to the parallele command.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addSubCommand(new MyEvent(MyEvent.DO_SOMETHING));</listing>
		 ]]></example>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='initialize' fullname='com.soma.core.controller:ParallelCommand/protected:initialize' isStatic='false' isFinal='true' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='commands' fullname='com.soma.core.controller:ParallelCommand/commands/get' isStatic='false' isFinal='true' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Retrieves the list of commands added as subcommands.
		 ]]></description>
<return><![CDATA[An Array of commands.
		 ]]></return>
</method>
<method name='length' fullname='com.soma.core.controller:ParallelCommand/length/get' isStatic='false' isFinal='true' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Retrieves the number of commands added as subcommands.
		 ]]></description>
<return><![CDATA[An integer.
		 ]]></return>
</method>
<field name='_commands' fullname='com.soma.core.controller:ParallelCommand/private:_commands' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<packageRec name='com.soma.core.controller.null' fullname='com.soma.core.controller.null'>
<description><![CDATA[
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied.
 See the License for the specific language governing rights and
 limitations under the License.
 
 The Original Code is SomaCore.
 
 The Initial Developer of the Original Code is Romuald Quantin.
 romu]]></description>
<soundstep.com><![CDATA[(www.soundstep.com).
 
 Portions created by
 
 Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved.
 All Rights Reserved.
 
 ]]></soundstep.com>
</packageRec>
<classRec name='SequenceCommand' fullname='com.soma.core.controller:SequenceCommand' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/controller/SequenceCommand.as' namespace='com.soma.core.controller' access='public' baseclass='com.soma.core.controller:Command' interfaces='com.soma.core.interfaces:ISequenceCommand' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 The SequenceCommand class is used to execute a list of commands one after the other. The command added can be asynchronous or synchronous.
	 ]]></description>
<example><![CDATA[Register commands and a sequence command.
	 <listing version="3.0">
addCommand(MyEvent.DO_SOMETHING_ASYNCHRONOUS, CommandASyncExample);
addCommand(MyEvent.DO_SOMETHING_ELSE_ASYNCHRONOUS, CommandASyncExample);
addCommand(MyEvent.EXECUTE_SEQUENCE_COMMAND, SequenceCommandExample);
dispatchEvent(new MyEvent(MyEvent.EXECUTE_SEQUENCE_COMMAND));
	 </listing>
	 Each asynchronous command added to a sequence much use the executeNextCommand method. Here is an example.
	 <listing version="3.0">
package {

	import flash.utils.clearTimeout;
	import flash.utils.setTimeout;
	import flash.events.Event;
	import com.soma.core.interfaces.ICommandASync;
	import com.soma.core.controller.Command;
	
	public class CommandASyncExample extends Command implements ICommandASync {
		private var _event:Event;
		private var _timer:int;

		public function CommandASyncExample() {
			
		}
		
		public function execute(event:Event):void {
			_event = event;
			_timer = setTimeout(result, 1000, {});
		}
		
		public function fault(info:Object):void {
			
		}
		
		public function result(data:Object):void {
			if (isPartOfASequence(_event)) {
				getSequencer(_event).executeNextCommand();
			}
			_event = null;
			clearTimeout(_timer);
		}
		
	}
}
	 </listing>
	 Create a sequence command.
	 <listing version="3.0">
package  {
	import com.soma.core.interfaces.ISequenceCommand;
	import com.soma.core.controller.SequenceCommand;
	
	public class SequenceCommandExample extends SequenceCommand implements ISequenceCommand {

		public function SequenceCommandExample() {
			
		}
		
		override protected function initializeSubCommands():void {
			addSubCommand(new MyEvent(MyEvent.DO_SOMETHING_ASYNCHRONOUS));
			addSubCommand(new MyEvent(MyEvent.DO_SOMETHING_ELSE_ASYNCHRONOUS));
		}
		
	}
}
	 </listing>
	 ]]></example>
<see><![CDATA[com.soma.core.controller.SomaController
	 ]]></see>
<see><![CDATA[com.soma.core.controller.Command
	 ]]></see>
<see><![CDATA[com.soma.core.controller.SequenceCommand
	 ]]></see>
<see><![CDATA[com.soma.core.interfaces.IParallelCommand
	 ]]></see>
<see><![CDATA[com.soma.core.interfaces.ICommandASync
	 ]]></see>
</classRec>
<method name='SequenceCommand' fullname='com.soma.core.controller:SequenceCommand/SequenceCommand' isStatic='false' isFinal='false' isOverride='false'  result_type='*'>
<description><![CDATA[
		 Create an instance of the SequenceCommand class. Should not be directly instantiated, the framework will instantiate the class.
		 ]]></description>
</method>
<method name='addSubCommand' fullname='com.soma.core.controller:SequenceCommand/protected:addSubCommand' isStatic='false' isFinal='true' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Add a command to the list of commands to execute one after the other.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addSubCommand(new MyEvent(MyEvent.DO_SOMETHING_ASYNC));</listing>
		 ]]></example>
<param><![CDATA[event Event instance (must be registered as a command previously).
		 ]]></param>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='executeNextCommand' fullname='com.soma.core.controller:SequenceCommand/executeNextCommand' isStatic='false' isFinal='true' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Method used to execute the next command in the list of subcommands.
		 ]]></description>
</method>
<method name='execute' fullname='com.soma.core.controller:SequenceCommand/execute' isStatic='false' isFinal='true' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeSubCommands' fullname='com.soma.core.controller:SequenceCommand/protected:initializeSubCommands' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ 
		 Method that you can overwrite to add commands to the sequence command.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addSubCommand(new MyEvent(MyEvent.DO_SOMETHING_ASYNC));</listing>
		 ]]></example>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='initialize' fullname='com.soma.core.controller:SequenceCommand/protected:initialize' isStatic='false' isFinal='true' isOverride='true'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='stop' fullname='com.soma.core.controller:SequenceCommand/stop' isStatic='false' isFinal='true' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Stops the current sequence.
		 ]]></description>
</method>
<method name='commands' fullname='com.soma.core.controller:SequenceCommand/commands/get' isStatic='false' isFinal='true' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Retrieves the list of commands added as subcommands.
		 ]]></description>
<return><![CDATA[An Array of commands.
		 ]]></return>
</method>
<method name='currentCommand' fullname='com.soma.core.controller:SequenceCommand/currentCommand/get' isStatic='false' isFinal='true' isOverride='false'  result_type='flash.events:Event'>
<description><![CDATA[
		 Retrieves the command that is currently executed (running).
		 ]]></description>
<return><![CDATA[An event instance.
		 ]]></return>
</method>
<method name='length' fullname='com.soma.core.controller:SequenceCommand/length/get' isStatic='false' isFinal='true' isOverride='false'  result_type='int'>
<description><![CDATA[
		 Retrieves the number of commands added as subcommands.
		 ]]></description>
<return><![CDATA[An integer.
		 ]]></return>
</method>
<field name='_commands' fullname='com.soma.core.controller:SequenceCommand/private:_commands' type='Array' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_currentCommand' fullname='com.soma.core.controller:SequenceCommand/private:_currentCommand' type='flash.events:Event' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<packageRec name='com.soma.core.wire.null' fullname='com.soma.core.wire.null'>
<description><![CDATA[
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied.
 See the License for the specific language governing rights and
 limitations under the License.
 
 The Original Code is SomaCore.
 
 The Initial Developer of the Original Code is Romuald Quantin.
 romu]]></description>
<soundstep.com><![CDATA[(www.soundstep.com).
 
 Portions created by
 
 Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved.
 All Rights Reserved.
 
 ]]></soundstep.com>
</packageRec>
<classRec name='SomaWires' fullname='com.soma.core.wire:SomaWires' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/wire/SomaWires.as' namespace='com.soma.core.wire' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 The SomaWires class handles the wires of the application. See the Wire class documentation for implementation. 
	 ]]></description>
<see><![CDATA[com.soma.core.wire.Wire
	 ]]></see>
</classRec>
<method name='SomaWires' fullname='com.soma.core.wire:SomaWires/SomaWires' isStatic='false' isFinal='false' isOverride='false'  param_names='instance' param_types='com.soma.core.interfaces:ISoma' param_defaults='undefined' result_type='*'>
<description><![CDATA[
		 Create an instance of the SomaWires class. Should not be directly instantiated, the framework will instantiate the class.
		 ]]></description>
<param><![CDATA[instance Framework instance.
		 ]]></param>
</method>
<method name='addWire' fullname='com.soma.core.wire:SomaWires/addWire' isStatic='false' isFinal='false' isOverride='false'  param_names='wireName;wire' param_types='String;com.soma.core.interfaces:IWire' param_defaults='undefined;undefined' result_type='com.soma.core.interfaces:IWire'>
<description><![CDATA[
		 Registers a wire to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addWire(MyWire.NAME, new MyWire());</listing>
		 ]]></example>
<param><![CDATA[wireName Name of the wire.
		 ]]></param>
<param><![CDATA[view Instance of the wire.
		 ]]></param>
<return><![CDATA[The wire instance.
		 ]]></return>
</method>
<method name='dispose' fullname='com.soma.core.wire:SomaWires/dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Destroys all the models and properties. The class will call the dispose method of each model instance.
		 ]]></description>
</method>
<method name='getWire' fullname='com.soma.core.wire:SomaWires/getWire' isStatic='false' isFinal='false' isOverride='false'  param_names='wireName' param_types='String' param_defaults='undefined' result_type='com.soma.core.interfaces:IWire'>
<description><![CDATA[
		 Retrieves the wire instance that has been registered using its name.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var myWire:MyWire = getWire(MyWire.NAME) as MyWire;</listing>
		 ]]></example>
<param><![CDATA[wireName Name of the wire.
		 ]]></param>
<return><![CDATA[A wire instance.
		 ]]></return>
</method>
<method name='getWires' fullname='com.soma.core.wire:SomaWires/getWires' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.utils:Dictionary'>
<description><![CDATA[
		 Retrieves all the wire instances that have been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var wires:Dictionary = getWires();</listing>
		 ]]></example>
<return><![CDATA[A Dictionary (the key of the Dictionary is the name used for the registration).
		 ]]></return>
</method>
<method name='hasWire' fullname='com.soma.core.wire:SomaWires/hasWire' isStatic='false' isFinal='false' isOverride='false'  param_names='wireName' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a wire has been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">hasWire(MyWire.NAME);</listing>
		 ]]></example>
<param><![CDATA[wireName Name of the wire.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
</method>
<method name='initialize' fullname='com.soma.core.wire:SomaWires/private:initialize' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='removeWire' fullname='com.soma.core.wire:SomaWires/removeWire' isStatic='false' isFinal='false' isOverride='false'  param_names='wireName' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a wire from the framework and call the dispose method of this wire.
		 ]]></description>
<example><![CDATA[<listing version="3.0">removeWire(MyWire.NAME);</listing>
		 ]]></example>
<param><![CDATA[wireName Name of the wire.
		 ]]></param>
</method>
<field name='_instance' fullname='com.soma.core.wire:SomaWires/private:_instance' type='com.soma.core.interfaces:ISoma' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='wires' fullname='com.soma.core.wire:SomaWires/protected:wires' type='flash.utils:Dictionary' isStatic='false' isConst='false' >
<description><![CDATA[
		 List of the wires registered to the framework.
		 ]]></description>
</field>
<packageRec name='com.soma.core.wire.null' fullname='com.soma.core.wire.null'>
<description><![CDATA[
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied.
 See the License for the specific language governing rights and
 limitations under the License.
 
 The Original Code is SomaCore.
 
 The Initial Developer of the Original Code is Romuald Quantin.
 romu]]></description>
<soundstep.com><![CDATA[(www.soundstep.com).
 
 Portions created by
 
 Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved.
 All Rights Reserved.
 
 ]]></soundstep.com>
</packageRec>
<classRec name='Wire' fullname='com.soma.core.wire:Wire' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/wire/Wire.as' namespace='com.soma.core.wire' access='public' baseclass='Object' interfaces='com.soma.core.interfaces:IWire;flash.events:IEventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 <p>A Wire is a class that will hold the logic of the Application.</p>
	 <p>Wires can be used in many ways, depending on how you want to manage your views, commands and models. A wire can be used as a manager and handle many models, views or other wires.
	 A wire can also be used in a one-to-one way (as a proxy), a single wire that handles a single view, a single wire that handles a single model, and so on.</p>
	 <p>Wires can be flexible or rigid depending on how your build your application.</p>
	 <p>A wire has access to everything in the framework: you can create views, add and dispatch commands, create models, access to the framework instance, access to the stage, and so on.</p>
	 <p>A wire can also be in control of the commands that are dispatched by listening to them and even stop their execution if needed (see the examples in this page).</p> 
	 ]]></description>
<example><![CDATA[Create a wire
	 <listing version="3.0">
package  {
	import com.soma.core.wire.Wire;
	import com.soma.core.interfaces.IWire;
	
	public class WireExample extends Wire implements IWire {
		
		public static const NAME:String = "Wire example name";
		
		public function WireExample() {
			super(NAME);
		}
		
		override protected function initialize():void {
			// called when the wire has been registered to the framework
		}
		
		override protected function dispose():void {
			// called when the wire has been removed from the framework
		}
		
	}
}
	 </listing>
	 Add a wire.
	 <listing version="3.0">
addWire(WireExample.NAME, new WireExample());
	 </listing>
	 Remove a wire.
	 <listing version="3.0">
removeWire(WireExample.NAME);
	 </listing>
	 Retrieve a wire.
	 <listing version="3.0">
var wire:WireExample = getWire(WireExample.NAME) as WireExample;
	 </listing>
	 Create a shortcut to retrieve a wire is a good practice (not necessary with injection enabled).
	 <listing version="3.0">
private function get wireExample():WireExample {
	return getWire(WireExample.NAME) as WireExample;
}
private function doSomething():void {
	trace(wireExample.myWireProperty);
}
	 </listing>
	 Listening to a command in a wire.
	 <listing version="3.0">
override protected function initialize():void {
	// called when the wire has been registered to the framework
	 addEventListener(MyEvent.DO_SOMETHING, handler);
}
	 </listing>
	 Stopping the execution of a command in a wire.
	 You need to set the cancelable property of the event to true when you dispatch it.
	 Any command can be stopped using the flash event built-in method: preventDefault.
	 <listing version="3.0">
override protected function initialize():void {
	// called when the wire has been registered to the framework
	 addEventListener(MyEvent.DO_SOMETHING, myEventHandler);
}
private function myEventHandler(event:MyEvent):void {
	e.preventDefault();
}
	 </listing>
	 ]]></example>
<see><![CDATA[com.soma.core.wire.SomaWires
	 ]]></see>
</classRec>
<method name='Wire' fullname='com.soma.core.wire:Wire/Wire' isStatic='false' isFinal='true' isOverride='false'  param_names='name' param_types='String' param_defaults='null' result_type='*'>
<description><![CDATA[
		 Create an instance of a Wire class. The Wire class should be extended.
		 ]]></description>
<param><![CDATA[name Name of the wire.
		 ]]></param>
</method>
<method name='addCommand' fullname='com.soma.core.wire:Wire/addCommand' isStatic='false' isFinal='true' isOverride='false'  param_names='commandName;command' param_types='String;Class' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Registers a command to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addCommand(MyEvent.DOSOMETHING, MyCommand);</listing>
		 ]]></example>
<param><![CDATA[commandName Event type that is used as a command name.
		 ]]></param>
<param><![CDATA[command Class that will be executed when a command has been dispatched.
		 ]]></param>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='addEventListener' fullname='com.soma.core.wire:Wire/addEventListener' isStatic='false' isFinal='true' isOverride='false'  param_names='type;listener;useCapture;priority;useWeakReference' param_types='String;Function;Boolean;int;Boolean' param_defaults='undefined;undefined;false;0;false' result_type='void'>
<description><![CDATA[
		 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.
		 ]]></description>
<param><![CDATA[type The type of event.
		 ]]></param>
<param><![CDATA[listener The listener function that processes the event.
		 ]]></param>
<param><![CDATA[useCapture Determines whether the listener works in the capture phase or the target and bubbling phases.
		 ]]></param>
<param><![CDATA[priority The priority level of the event listener.
		 ]]></param>
<param><![CDATA[useWeakReference Determines whether the reference to the listener is strong or weak.
		 ]]></param>
</method>
<method name='addModel' fullname='com.soma.core.wire:Wire/addModel' isStatic='false' isFinal='true' isOverride='false'  param_names='modelName;model' param_types='String;com.soma.core.interfaces:IModel' param_defaults='undefined;undefined' result_type='com.soma.core.interfaces:IModel'>
<description><![CDATA[
		 Registers a model to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addModel(MyModel.NAME, new MyModel());</listing>
		 ]]></example>
<param><![CDATA[modelName Name of the model.
		 ]]></param>
<param><![CDATA[model Instance of the model.
		 ]]></param>
<return><![CDATA[The model instance.
		 ]]></return>
<see><![CDATA[com.soma.core.model.SomaModels
		 ]]></see>
</method>
<method name='addView' fullname='com.soma.core.wire:Wire/addView' isStatic='false' isFinal='true' isOverride='false'  param_names='viewName;view' param_types='String;Object' param_defaults='undefined;undefined' result_type='Object'>
<description><![CDATA[
		 Registers a view to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addView(MySprite.NAME, new MySprite());</listing>
		 ]]></example>
<param><![CDATA[viewName Name of the view.
		 ]]></param>
<param><![CDATA[view Instance of the view.
		 ]]></param>
<return><![CDATA[The view instance.
		 ]]></return>
<see><![CDATA[com.soma.core.view.SomaViews
		 ]]></see>
</method>
<method name='addWire' fullname='com.soma.core.wire:Wire/addWire' isStatic='false' isFinal='true' isOverride='false'  param_names='wireName;wire' param_types='String;com.soma.core.interfaces:IWire' param_defaults='undefined;undefined' result_type='com.soma.core.interfaces:IWire'>
<description><![CDATA[
		 Registers a wire to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addWire(MyWire.NAME, new MyWire());</listing>
		 ]]></example>
<param><![CDATA[wireName Name of the wire.
		 ]]></param>
<param><![CDATA[view Instance of the wire.
		 ]]></param>
<return><![CDATA[The wire instance.
		 ]]></return>
<see><![CDATA[com.soma.core.wire.SomaWires
		 ]]></see>
</method>
<method name='dispatchEvent' fullname='com.soma.core.wire:Wire/dispatchEvent' isStatic='false' isFinal='true' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Dispatches an event into the event flow. The event target is the EventDispatcher object upon which dispatchEvent() is called.
		 ]]></description>
<param><![CDATA[event The event object dispatched into the event flow.
		 ]]></param>
<return><![CDATA[A value of true unless preventDefault() is called on the event, in which case it returns false.
		 ]]></return>
</method>
<method name='dispose' fullname='com.soma.core.wire:Wire/dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Method that can you can override, called when the wire has been removed from the framework.
		 ]]></description>
</method>
<method name='getCommand' fullname='com.soma.core.wire:Wire/getCommand' isStatic='false' isFinal='true' isOverride='false'  param_names='commandName' param_types='String' param_defaults='undefined' result_type='Class'>
<description><![CDATA[
		 Retrieves the command class that has been registered with a command name.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var commandClass:ICommand = getCommand(MyEvent.DOSOMETHING) as ICommand;</listing>
		 ]]></example>
<param><![CDATA[commandName Event type that is used as a command name.
		 ]]></param>
<return><![CDATA[A class.
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='getCommands' fullname='com.soma.core.wire:Wire/getCommands' isStatic='false' isFinal='true' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Retrieves all the command names (event type) that have been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var commands:Array = getCommands();</listing>
		 ]]></example>
<return><![CDATA[An Array of String (command name).
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='getLastSequencer' fullname='com.soma.core.wire:Wire/getLastSequencer' isStatic='false' isFinal='true' isOverride='false'  result_type='com.soma.core.interfaces:ISequenceCommand'>
<description><![CDATA[
		 Retrieves the last sequence command that has been instantiated in the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var lastSequencer:ISequenceCommand = getLastSequencer();</listing>
		 ]]></example>
<return><![CDATA[An ISequenceCommand instance.
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='getModel' fullname='com.soma.core.wire:Wire/getModel' isStatic='false' isFinal='true' isOverride='false'  param_names='modelName' param_types='String' param_defaults='undefined' result_type='com.soma.core.interfaces:IModel'>
<description><![CDATA[
		 Retrieves the model instance that has been registered using its name.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var myModel:MyModel = getModel(MyModel.NAME) as MyModel;</listing>
		 ]]></example>
<param><![CDATA[modelName Name of the model.
		 ]]></param>
<return><![CDATA[A IModel instance.
		 ]]></return>
<see><![CDATA[com.soma.core.model.SomaModels
		 ]]></see>
</method>
<method name='getModels' fullname='com.soma.core.wire:Wire/getModels' isStatic='false' isFinal='true' isOverride='false'  result_type='flash.utils:Dictionary'>
<description><![CDATA[
		 Retrieves all the model instances that have been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var models:Dictionary = getModels();</listing>
		 ]]></example>
<return><![CDATA[A Dictionary (the key of the Dictionary is the name used for the registration).
		 ]]></return>
<see><![CDATA[com.soma.core.model.SomaModels
		 ]]></see>
</method>
<method name='getName' fullname='com.soma.core.wire:Wire/getName' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Retrieves the name of the wire.
		 ]]></description>
<return><![CDATA[A String.
		 ]]></return>
</method>
<method name='getRunningSequencers' fullname='com.soma.core.wire:Wire/getRunningSequencers' isStatic='false' isFinal='true' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Retrieves all the sequence command instances that are running.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var sequencers:Array = getRunningSequencers();</listing>
		 ]]></example>
<return><![CDATA[An Array of ISequenceCommand instances.
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='getSequencer' fullname='com.soma.core.wire:Wire/getSequencer' isStatic='false' isFinal='true' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='com.soma.core.interfaces:ISequenceCommand'>
<description><![CDATA[
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var sequencer:ISequenceCommand = getSequencer(myEvent);</listing>
		 ]]></example>
<param><![CDATA[event Event instance.
		 ]]></param>
<return><![CDATA[A sequencer (ISequenceCommand).
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='getView' fullname='com.soma.core.wire:Wire/getView' isStatic='false' isFinal='true' isOverride='false'  param_names='viewName' param_types='String' param_defaults='undefined' result_type='Object'>
<description><![CDATA[
		 Retrieves the view instance that has been registered using its name.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var mySprite:MySprite = getView(MySprite.NAME) as MySprite;</listing>
		 ]]></example>
<param><![CDATA[viewName Name of the view.
		 ]]></param>
<return><![CDATA[An Object instance.
		 ]]></return>
<see><![CDATA[com.soma.core.view.SomaViews
		 ]]></see>
</method>
<method name='getViews' fullname='com.soma.core.wire:Wire/getViews' isStatic='false' isFinal='true' isOverride='false'  result_type='flash.utils:Dictionary'>
<description><![CDATA[
		 Retrieves all the view instances that have been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var sprites:Dictionary = getViews();</listing>
		 ]]></example>
<return><![CDATA[A Dictionary (the key of the Dictionary is the name used for the registration).
		 ]]></return>
<see><![CDATA[com.soma.core.view.SomaViews
		 ]]></see>
</method>
<method name='getWire' fullname='com.soma.core.wire:Wire/getWire' isStatic='false' isFinal='true' isOverride='false'  param_names='wireName' param_types='String' param_defaults='undefined' result_type='com.soma.core.interfaces:IWire'>
<description><![CDATA[
		 Retrieves the wire instance that has been registered using its name.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var myWire:MyWire = getWire(MyWire.NAME) as MyWire;</listing>
		 ]]></example>
<param><![CDATA[wireName Name of the wire.
		 ]]></param>
<return><![CDATA[A wire instance.
		 ]]></return>
<see><![CDATA[com.soma.core.wire.SomaWires
		 ]]></see>
</method>
<method name='getWires' fullname='com.soma.core.wire:Wire/getWires' isStatic='false' isFinal='true' isOverride='false'  result_type='flash.utils:Dictionary'>
<description><![CDATA[
		 Retrieves all the wire instances that have been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var wires:Dictionary = getWires();</listing>
		 ]]></example>
<return><![CDATA[A Dictionary (the key of the Dictionary is the name used for the registration).
		 ]]></return>
<see><![CDATA[com.soma.core.wire.SomaWires
		 ]]></see>
</method>
<method name='hasCommand' fullname='com.soma.core.wire:Wire/hasCommand' isStatic='false' isFinal='true' isOverride='false'  param_names='commandName' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a command has been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">hasCommand(MyEvent.DOSOMETHING);</listing>
		 ]]></example>
<param><![CDATA[commandName Event type that is used as a command name.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='hasEventListener' fullname='com.soma.core.wire:Wire/hasEventListener' isStatic='false' isFinal='true' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Checks whether the EventDispatcher object has any listeners registered for a specific type of event.
		 ]]></description>
<param><![CDATA[type The type of event.
		 ]]></param>
<return><![CDATA[A value of true if a listener of the specified type is registered; false otherwise.
		 ]]></return>
</method>
<method name='hasModel' fullname='com.soma.core.wire:Wire/hasModel' isStatic='false' isFinal='true' isOverride='false'  param_names='modelName' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a model has been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">hasModel(MyModel.NAME);</listing>
		 ]]></example>
<param><![CDATA[modelName Name of the model.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
<see><![CDATA[com.soma.core.model.SomaModels
		 ]]></see>
</method>
<method name='hasView' fullname='com.soma.core.wire:Wire/hasView' isStatic='false' isFinal='true' isOverride='false'  param_names='viewName' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a view has been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">hasView(MySprite.NAME);</listing>
		 ]]></example>
<param><![CDATA[viewName Name of the view.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
<see><![CDATA[com.soma.core.view.SomaViews
		 ]]></see>
</method>
<method name='hasWire' fullname='com.soma.core.wire:Wire/hasWire' isStatic='false' isFinal='true' isOverride='false'  param_names='wireName' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a wire has been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">hasWire(MyWire.NAME);</listing>
		 ]]></example>
<param><![CDATA[wireName Name of the wire.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
<see><![CDATA[com.soma.core.wire.SomaWires
		 ]]></see>
</method>
<method name='initialize' fullname='com.soma.core.wire:Wire/initialize' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Method that can you can override, called when the wire has been registered to the framework.
		 ]]></description>
</method>
<method name='isPartOfASequence' fullname='com.soma.core.wire:Wire/isPartOfASequence' isStatic='false' isFinal='true' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether an event has been instantiated from a ISequenceCommand class.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var inSequence:Boolean = isPartOfASequence(myEvent);</listing>
		 ]]></example>
<return><![CDATA[A Boolean.
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='postConstruct' fullname='com.soma.core.wire:Wire/postConstruct' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
</method>
<method name='removeCommand' fullname='com.soma.core.wire:Wire/removeCommand' isStatic='false' isFinal='true' isOverride='false'  param_names='commandName' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a command from the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">removeCommand(MyEvent.DOSOMETHING);</listing>
		 ]]></example>
<param><![CDATA[commandName Event type that is used as a command name.
		 ]]></param>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='removeEventListener' fullname='com.soma.core.wire:Wire/removeEventListener' isStatic='false' isFinal='true' isOverride='false'  param_names='type;listener;useCapture' param_types='String;Function;Boolean' param_defaults='undefined;undefined;false' result_type='void'>
<description><![CDATA[
		 Removes a listener from the EventDispatcher object. If there is no matching listener registered with the EventDispatcher object, a call to this method has no effect.
		 ]]></description>
<param><![CDATA[type The type of event. 
		 ]]></param>
<param><![CDATA[listener The listener object to remove. 
		 ]]></param>
<param><![CDATA[useCapture Specifies whether the listener was registered for the capture phase or the target and bubbling phases.
		 ]]></param>
</method>
<method name='removeModel' fullname='com.soma.core.wire:Wire/removeModel' isStatic='false' isFinal='true' isOverride='false'  param_names='modelName' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a model from the framework and call the dispose method of this model.
		 ]]></description>
<example><![CDATA[<listing version="3.0">removeModel(MyModel.NAME);</listing>
		 ]]></example>
<param><![CDATA[modelName Name of the model.
		 ]]></param>
<see><![CDATA[com.soma.core.model.SomaModels
		 ]]></see>
</method>
<method name='removeView' fullname='com.soma.core.wire:Wire/removeView' isStatic='false' isFinal='true' isOverride='false'  param_names='viewName' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a view from the framework and call the (optional) dispose method of this view.
		 ]]></description>
<example><![CDATA[<listing version="3.0">removeView(MySprite.NAME);</listing>
		 ]]></example>
<param><![CDATA[viewName Name of the view.
		 ]]></param>
<see><![CDATA[com.soma.core.view.SomaViews
		 ]]></see>
</method>
<method name='removeWire' fullname='com.soma.core.wire:Wire/removeWire' isStatic='false' isFinal='true' isOverride='false'  param_names='wireName' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a wire from the framework and call the dispose method of this wire.
		 ]]></description>
<example><![CDATA[<listing version="3.0">removeWire(MyWire.NAME);</listing>
		 ]]></example>
<param><![CDATA[wireName Name of the wire.
		 ]]></param>
<see><![CDATA[com.soma.core.wire.SomaWires
		 ]]></see>
</method>
<method name='setName' fullname='com.soma.core.wire:Wire/setName' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Sets the name of the wire.
		 ]]></description>
<param><![CDATA[value A String.
		 ]]></param>
</method>
<method name='stopAllSequencers' fullname='com.soma.core.wire:Wire/stopAllSequencers' isStatic='false' isFinal='true' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Stops all the sequence command instances that are running.
		 ]]></description>
<example><![CDATA[<listing version="3.0">stopAllSequencers();</listing>
		 ]]></example>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='stopSequencerWithEvent' fullname='com.soma.core.wire:Wire/stopSequencerWithEvent' isStatic='false' isFinal='true' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Stops a sequence command using an event instance that has been created from this sequence command.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var success:Boolean = stopSequencerWithEvent(myEvent);</listing>
		 ]]></example>
<param><![CDATA[event Event instance.
		 ]]></param>
<return><![CDATA[A Boolean (true if a sequence command has been stopped).
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='stopSequencer' fullname='com.soma.core.wire:Wire/stopSequencer' isStatic='false' isFinal='true' isOverride='false'  param_names='sequencer' param_types='com.soma.core.interfaces:ISequenceCommand' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Stops a sequence command using the sequence command instance itself.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var success:Boolean = stopSequencer(mySequenceCommand);</listing>
		 ]]></example>
<param><![CDATA[sequencer The sequence command instance.
		 ]]></param>
<return><![CDATA[A Boolean (true if the sequence command has been stopped).
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='willTrigger' fullname='com.soma.core.wire:Wire/willTrigger' isStatic='false' isFinal='true' isOverride='false'  param_names='type' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.
		 ]]></description>
<param><![CDATA[type The type of event. 
		 ]]></param>
<return><![CDATA[A value of true if a listener of the specified type will be triggered; false otherwise. 
		 ]]></return>
</method>
<method name='injector' fullname='com.soma.core.wire:Wire/injector/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.soma.core.interfaces:ISomaInjector'>
</method>
<method name='instance' fullname='com.soma.core.wire:Wire/instance/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.soma.core.interfaces:ISoma'>
<description><![CDATA[
		 Retrieves the instance of the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var myExtendedSomaClass:SomaApplication = SomaApplication(instance);</listing>
		 ]]></example>
<return><![CDATA[An ISoma instance.
		 ]]></return>
</method>
<method name='mediators' fullname='com.soma.core.wire:Wire/mediators/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.soma.core.mediator:SomaMediators'>
</method>
<method name='stage' fullname='com.soma.core.wire:Wire/stage/get' isStatic='false' isFinal='true' isOverride='false'  result_type='flash.display:Stage'>
<description><![CDATA[
		 Get the stage that has been registered to the framework.
		 ]]></description>
<return><![CDATA[The stage instance.
		 ]]></return>
</method>
<method name='instance' fullname='com.soma.core.wire:Wire/instance/set' isStatic='false' isFinal='false' isOverride='false'  param_names='value' param_types='com.soma.core.interfaces:ISoma' param_defaults='undefined' result_type='void'>
</method>
<field name='_instance' fullname='com.soma.core.wire:Wire/private:_instance' type='com.soma.core.interfaces:ISoma' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_name' fullname='com.soma.core.wire:Wire/protected:_name' type='String' isStatic='false' isConst='false' >
<description><![CDATA[
		 Name of the wire.
		 ]]></description>
</field>
<packageRec name='com.soma.core.null' fullname='com.soma.core.null'>
<description><![CDATA[
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied.
 See the License for the specific language governing rights and
 limitations under the License.
 
 The Original Code is SomaCore.
 
 The Initial Developer of the Original Code is Romuald Quantin.
 romu]]></description>
<soundstep.com><![CDATA[(www.soundstep.com).
 
 Portions created by
 
 Initial Developer are Copyright (C) 2008-2010 Soundstep. All Rights Reserved.
 All Rights Reserved.
 
 ]]></soundstep.com>
</packageRec>
<classRec name='Soma' fullname='com.soma.core:Soma' sourcefile='/Users/romuald/Documents/devserver/workspace/somacore_framework/src/com/soma/core/Soma.as' namespace='com.soma.core' access='public' baseclass='flash.events:EventDispatcher' interfaces='com.soma.core.interfaces:ISoma;flash.events:IEventDispatcher' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p><b>Author:</b> Romuald Quantin - <a href="http://www.soundstep.com/" target="_blank">www.soundstep.com</a></p>
	 <p><b>Resources:</b> <a href="http://www.soundstep.com/downloads/somacore" target="_blank">http://www.soundstep.com/downloads/somacore</a></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1)<br /> 
	 <a href="http://www.opensource.org/licenses/mozilla1.1.php" target="_blank">http://www.opensource.org/licenses/mozilla1.1.php</a></p>
	 <p>SomaCore is a lightweight event-based MVC framework written in AS3 that provides a structure, models, views management and commands.
	 Somacore can be used for Flash, Flex and AIR projects. SomaCore does not use any external library and does not use dependency injection. SomaCore is completely event-based and use a concept of wires to code in a efficient decoupled way.
	 You can use SomaCore in anything, except to include/distribute it in another framework, application, template, component or structure that is meant to build, scaffold or generate source files.</p>
	 <p>Few things to know: SomaCore requires the stage to be instantiated. Commands are normal built-in Flash events with the bubbles property set to true. Commands can be used in the views as they are not really framework code.
	 Wires are the glue of the frameworks elements (models, commands, views, wires) and can be used the way you wish, as proxy/mediators or managers.
	 Wires can manage one class or multiple classes.
	 Parallel and sequence commands are built-in.
	 You can create and register customs plugins to the framework (such as the SomaDebugger plugin).
	 You can access to all the framework elements that you have registered (stage, framework instance, wires, models, views and commands) from commands and wires. 
	 </p>
	 ]]></description>
<example><![CDATA[To get started, create a instance of a class that extends the Soma class and implements the ISoma interface.
	 <listing version="3.0">
package  {
	import com.soma.core.interfaces.ISoma;
	import com.soma.core.di.SomaInjector;
	import flash.display.Sprite;
	
	public class Main extends Sprite {
		
		private var _app:ISoma;
		
		public function Main() {
			// injection disabled
			_app = new SomaApplication(stage);
			// injection enabled
			_app = new SomaApplication(stage, SomaInjector);
		}
		
	}
}
	 </listing>
	 <listing version="3.0">
package  {
	import com.soma.core.Soma;
	import com.soma.core.interfaces.ISoma;
	import flash.display.Stage;
	
	public class SomaApplication extends Soma implements ISoma {

		public function SomaApplication(stage:Stage, injectorClass:Class) {
			super(stage, injector);
		}
		
		override protected function initialize():void {
			
		}

		override protected function registerCommands():void {
			
		}

		override protected function registerModels():void {
			
		}

		override protected function registerPlugins():void {
			
		}

		override protected function registerViews():void {
			
		}

		override protected function registerWires():void {
			
		}
		
		override protected function start():void {
			
		}

	}
}
	 </listing>
	 
	 ]]></example>
</classRec>
<method name='Soma' fullname='com.soma.core:Soma/Soma' isStatic='false' isFinal='false' isOverride='false'  param_names='stage;injectorClass' param_types='flash.display:Stage;Class' param_defaults='null;null' result_type='*'>
<description><![CDATA[
		 Create an instance of the SomaCore class.
		 ]]></description>
<param><![CDATA[stage The stage is used as a global EventDispatcher (as well as the Soma class), and is required to instantiate the framework.
		 ]]></param>
<param><![CDATA[injectorClass Class that must extend ISomaInjector.
		 ]]></param>
</method>
<method name='addCommand' fullname='com.soma.core:Soma/addCommand' isStatic='false' isFinal='true' isOverride='false'  param_names='commandName;command' param_types='String;Class' param_defaults='undefined;undefined' result_type='void'>
<description><![CDATA[
		 Registers a command to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addCommand(MyEvent.DOSOMETHING, MyCommand);</listing>
		 ]]></example>
<param><![CDATA[commandName Event type that is used as a command name.
		 ]]></param>
<param><![CDATA[command Class that will be executed when a command has been dispatched.
		 ]]></param>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='addModel' fullname='com.soma.core:Soma/addModel' isStatic='false' isFinal='true' isOverride='false'  param_names='modelName;model' param_types='String;com.soma.core.interfaces:IModel' param_defaults='undefined;undefined' result_type='com.soma.core.interfaces:IModel'>
<description><![CDATA[
		 Registers a model to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addModel(MyModel.NAME, new MyModel());</listing>
		 ]]></example>
<param><![CDATA[modelName Name of the model.
		 ]]></param>
<param><![CDATA[model Instance of the model.
		 ]]></param>
<return><![CDATA[The model instance.
		 ]]></return>
<see><![CDATA[com.soma.core.model.SomaModels
		 ]]></see>
</method>
<method name='addView' fullname='com.soma.core:Soma/addView' isStatic='false' isFinal='true' isOverride='false'  param_names='viewName;view' param_types='String;Object' param_defaults='undefined;undefined' result_type='Object'>
<description><![CDATA[
		 Registers a view to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addView(MySprite.NAME, new MySprite());</listing>
		 ]]></example>
<param><![CDATA[viewName Name of the view.
		 ]]></param>
<param><![CDATA[view Instance of the view.
		 ]]></param>
<return><![CDATA[The view instance.
		 ]]></return>
<see><![CDATA[com.soma.core.view.SomaViews
		 ]]></see>
</method>
<method name='addWire' fullname='com.soma.core:Soma/addWire' isStatic='false' isFinal='true' isOverride='false'  param_names='wireName;wire' param_types='String;com.soma.core.interfaces:IWire' param_defaults='undefined;undefined' result_type='com.soma.core.interfaces:IWire'>
<description><![CDATA[
		 Registers a wire to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addWire(MyWire.NAME, new MyWire());</listing>
		 ]]></example>
<param><![CDATA[wireName Name of the wire.
		 ]]></param>
<param><![CDATA[view Instance of the wire.
		 ]]></param>
<return><![CDATA[The wire instance.
		 ]]></return>
<see><![CDATA[com.soma.core.wire.SomaWires
		 ]]></see>
</method>
<method name='createPluginFromClassName' fullname='com.soma.core:Soma/createPluginFromClassName' isStatic='false' isFinal='true' isOverride='false'  param_names='pluginClassName;pluginVO' param_types='String;com.soma.core.interfaces:ISomaPluginVO' param_defaults='undefined;undefined' result_type='com.soma.core.interfaces:ISomaPlugin'>
<description><![CDATA[
		 Creates a plugin instance using the class name and the getDefinitionByName method.
		 ]]></description>
<example><![CDATA[<listing version="3.0">
var pluginVO:SomaDebuggerVO = new SomaDebuggerVO(this, SomaDebugger.NAME_DEFAULT, getCommands(), true, false);
var debugger:SomaDebugger = createPluginFromClassName("com.soma.core.debugger.SomaDebugger", pluginVO) as SomaDebugger;
		 </listing>
		 ]]></example>
<param><![CDATA[plugin Class name of the plugin that will be instantiated.
		 ]]></param>
<param><![CDATA[pluginVO Value Object class of the plugin.
		 ]]></param>
<return><![CDATA[An instance of the plugin.
		 ]]></return>
</method>
<method name='createPlugin' fullname='com.soma.core:Soma/createPlugin' isStatic='false' isFinal='true' isOverride='false'  param_names='plugin;pluginVO' param_types='Class;com.soma.core.interfaces:ISomaPluginVO' param_defaults='undefined;undefined' result_type='com.soma.core.interfaces:ISomaPlugin'>
<description><![CDATA[
		 Creates a plugin instance.
		 ]]></description>
<example><![CDATA[<listing version="3.0">
var pluginVO:SomaDebuggerVO = new SomaDebuggerVO(this, SomaDebugger.NAME_DEFAULT, getCommands(), true, false);
var debugger:SomaDebugger = createPlugin(SomaDebugger, pluginVO) as SomaDebugger;
		 </listing>
		 ]]></example>
<param><![CDATA[plugin Class of the plugin that will be instantiated.
		 ]]></param>
<param><![CDATA[pluginVO Value Object class of the plugin.
		 ]]></param>
<return><![CDATA[An instance of the plugin.
		 ]]></return>
</method>
<method name='disposeCore' fullname='com.soma.core:Soma/private:disposeCore' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='disposeInjector' fullname='com.soma.core:Soma/private:disposeInjector' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='disposeReflector' fullname='com.soma.core:Soma/private:disposeReflector' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='dispose' fullname='com.soma.core:Soma/dispose' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Destroys the SomaCore core classes and elements registered to the framework.
		 ]]></description>
</method>
<method name='getCommand' fullname='com.soma.core:Soma/getCommand' isStatic='false' isFinal='true' isOverride='false'  param_names='commandName' param_types='String' param_defaults='undefined' result_type='Class'>
<description><![CDATA[
		 Retrieves the command class that has been registered with a command name.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var commandClass:ICommand = getCommand(MyEvent.DOSOMETHING) as ICommand;</listing>
		 ]]></example>
<param><![CDATA[commandName Event type that is used as a command name.
		 ]]></param>
<return><![CDATA[A class.
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='getCommands' fullname='com.soma.core:Soma/getCommands' isStatic='false' isFinal='true' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Retrieves all the command names (event type) that have been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var commands:Array = getCommands();</listing>
		 ]]></example>
<return><![CDATA[An Array of String (command name).
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='getLastSequencer' fullname='com.soma.core:Soma/getLastSequencer' isStatic='false' isFinal='true' isOverride='false'  result_type='com.soma.core.interfaces:ISequenceCommand'>
<description><![CDATA[
		 Retrieves the last sequence command that has been instantiated in the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var lastSequencer:ISequenceCommand = getLastSequencer();</listing>
		 ]]></example>
<return><![CDATA[An ISequenceCommand instance.
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='getModel' fullname='com.soma.core:Soma/getModel' isStatic='false' isFinal='true' isOverride='false'  param_names='modelName' param_types='String' param_defaults='undefined' result_type='com.soma.core.interfaces:IModel'>
<description><![CDATA[
		 Retrieves the model instance that has been registered using its name.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var myModel:MyModel = getModel(MyModel.NAME) as MyModel;</listing>
		 ]]></example>
<param><![CDATA[modelName Name of the model.
		 ]]></param>
<return><![CDATA[A IModel instance.
		 ]]></return>
<see><![CDATA[com.soma.core.model.SomaModels
		 ]]></see>
</method>
<method name='getModels' fullname='com.soma.core:Soma/getModels' isStatic='false' isFinal='true' isOverride='false'  result_type='flash.utils:Dictionary'>
<description><![CDATA[
		 Retrieves all the model instances that have been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var models:Dictionary = getModels();</listing>
		 ]]></example>
<return><![CDATA[A Dictionary (the key of the Dictionary is the name used for the registration).
		 ]]></return>
<see><![CDATA[com.soma.core.model.SomaModels
		 ]]></see>
</method>
<method name='getRunningSequencers' fullname='com.soma.core:Soma/getRunningSequencers' isStatic='false' isFinal='true' isOverride='false'  result_type='Array'>
<description><![CDATA[
		 Retrieves all the sequence command instances that are running.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var sequencers:Array = getRunningSequencers();</listing>
		 ]]></example>
<return><![CDATA[An Array of ISequenceCommand instances.
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='getSequencer' fullname='com.soma.core:Soma/getSequencer' isStatic='false' isFinal='true' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='com.soma.core.interfaces:ISequenceCommand'>
<description><![CDATA[
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var sequencer:ISequenceCommand = getSequencer(myEvent);</listing>
		 ]]></example>
<param><![CDATA[event Event instance.
		 ]]></param>
<return><![CDATA[A sequencer (ISequenceCommand).
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='getView' fullname='com.soma.core:Soma/getView' isStatic='false' isFinal='true' isOverride='false'  param_names='viewName' param_types='String' param_defaults='undefined' result_type='Object'>
<description><![CDATA[
		 Retrieves the view instance that has been registered using its name.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var mySprite:MySprite = getView(MySprite.NAME) as MySprite;</listing>
		 ]]></example>
<param><![CDATA[viewName Name of the view.
		 ]]></param>
<return><![CDATA[An Object instance.
		 ]]></return>
<see><![CDATA[com.soma.core.view.SomaViews
		 ]]></see>
</method>
<method name='getViews' fullname='com.soma.core:Soma/getViews' isStatic='false' isFinal='true' isOverride='false'  result_type='flash.utils:Dictionary'>
<description><![CDATA[
		 Retrieves all the view instances that have been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var sprites:Dictionary = getViews();</listing>
		 ]]></example>
<return><![CDATA[A Dictionary (the key of the Dictionary is the name used for the registration).
		 ]]></return>
<see><![CDATA[com.soma.core.view.SomaViews
		 ]]></see>
</method>
<method name='getWire' fullname='com.soma.core:Soma/getWire' isStatic='false' isFinal='true' isOverride='false'  param_names='wireName' param_types='String' param_defaults='undefined' result_type='com.soma.core.interfaces:IWire'>
<description><![CDATA[
		 Retrieves the wire instance that has been registered using its name.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var myWire:MyWire = getWire(MyWire.NAME) as MyWire;</listing>
		 ]]></example>
<param><![CDATA[wireName Name of the wire.
		 ]]></param>
<return><![CDATA[A wire instance.
		 ]]></return>
<see><![CDATA[com.soma.core.wire.SomaWires
		 ]]></see>
</method>
<method name='getWires' fullname='com.soma.core:Soma/getWires' isStatic='false' isFinal='true' isOverride='false'  result_type='flash.utils:Dictionary'>
<description><![CDATA[
		 Retrieves all the wire instances that have been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var wires:Dictionary = getWires();</listing>
		 ]]></example>
<return><![CDATA[A Dictionary (the key of the Dictionary is the name used for the registration).
		 ]]></return>
<see><![CDATA[com.soma.core.wire.SomaWires
		 ]]></see>
</method>
<method name='hasCommand' fullname='com.soma.core:Soma/hasCommand' isStatic='false' isFinal='true' isOverride='false'  param_names='commandName' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a command has been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">hasCommand(MyEvent.DOSOMETHING);</listing>
		 ]]></example>
<param><![CDATA[commandName Event type that is used as a command name.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='hasModel' fullname='com.soma.core:Soma/hasModel' isStatic='false' isFinal='true' isOverride='false'  param_names='modelName' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a model has been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">hasModel(MyModel.NAME);</listing>
		 ]]></example>
<param><![CDATA[modelName Name of the model.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
<see><![CDATA[com.soma.core.model.SomaModels
		 ]]></see>
</method>
<method name='hasView' fullname='com.soma.core:Soma/hasView' isStatic='false' isFinal='true' isOverride='false'  param_names='viewName' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a view has been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">hasView(MySprite.NAME);</listing>
		 ]]></example>
<param><![CDATA[viewName Name of the view.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
<see><![CDATA[com.soma.core.view.SomaViews
		 ]]></see>
</method>
<method name='hasWire' fullname='com.soma.core:Soma/hasWire' isStatic='false' isFinal='true' isOverride='false'  param_names='wireName' param_types='String' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether a wire has been registered to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">hasWire(MyWire.NAME);</listing>
		 ]]></example>
<param><![CDATA[wireName Name of the wire.
		 ]]></param>
<return><![CDATA[A Boolean.
		 ]]></return>
<see><![CDATA[com.soma.core.wire.SomaWires
		 ]]></see>
</method>
<method name='initializeApplication' fullname='com.soma.core:Soma/private:initializeApplication' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initializeInjector' fullname='com.soma.core:Soma/protected:initializeInjector' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</method>
<method name='initialize' fullname='com.soma.core:Soma/protected:initialize' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ 
		 Method that you can optionally overwrite to initialize elements before anything else.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addModel(MyModel.NAME, new MyModel());</listing>
		 ]]></example>
<see><![CDATA[com.soma.core.model.SomaModels
		 ]]></see>
</method>
<method name='isPartOfASequence' fullname='com.soma.core:Soma/isPartOfASequence' isStatic='false' isFinal='true' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Indicates wether an event has been instantiated from a ISequenceCommand class.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var inSequence:Boolean = isPartOfASequence(myEvent);</listing>
		 ]]></example>
<return><![CDATA[A Boolean.
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='registerCommands' fullname='com.soma.core:Soma/protected:registerCommands' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ 
		 Method that you can optionally overwrite to register commands (mapping events to command classes) to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addCommand(MyEvent.DOSOMETING, MyCommandClass);</listing>
		 ]]></example>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='registerModels' fullname='com.soma.core:Soma/protected:registerModels' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ 
		 Method that you can optionally overwrite to register models to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addModel(MyModel.NAME, new MyModel());</listing>
		 ]]></example>
<see><![CDATA[com.soma.core.model.SomaModels
		 ]]></see>
</method>
<method name='registerPlugins' fullname='com.soma.core:Soma/protected:registerPlugins' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ 
		 Method that you can optionally overwrite to register plugins to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">
var pluginVO:SomaDebuggerVO = new SomaDebuggerVO(this, SomaDebugger.NAME_DEFAULT, getCommands(), true, false);
var debugger:SomaDebugger = createPlugin(SomaDebugger, pluginVO) as SomaDebugger;
		 </listing>
		 ]]></example>
</method>
<method name='registerViews' fullname='com.soma.core:Soma/protected:registerViews' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ 
		 Method that you can optionally overwrite to register views to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addView(MySprite.NAME, new MySprite());</listing>
		 ]]></example>
<see><![CDATA[com.soma.core.view.SomaViews
		 ]]></see>
</method>
<method name='registerWires' fullname='com.soma.core:Soma/protected:registerWires' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ 
		 Method that you can optionally overwrite to register wires to the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">addWire(MyWire.NAME, new MyWire());</listing>
		 ]]></example>
<see><![CDATA[com.soma.core.wire.SomaWires
		 ]]></see>
</method>
<method name='removeCommand' fullname='com.soma.core:Soma/removeCommand' isStatic='false' isFinal='true' isOverride='false'  param_names='commandName' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a command from the framework.
		 ]]></description>
<example><![CDATA[<listing version="3.0">removeCommand(MyEvent.DOSOMETHING);</listing>
		 ]]></example>
<param><![CDATA[commandName Event type that is used as a command name.
		 ]]></param>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='removeModel' fullname='com.soma.core:Soma/removeModel' isStatic='false' isFinal='true' isOverride='false'  param_names='modelName' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a model from the framework and call the dispose method of this model.
		 ]]></description>
<example><![CDATA[<listing version="3.0">removeModel(MyModel.NAME);</listing>
		 ]]></example>
<param><![CDATA[modelName Name of the model.
		 ]]></param>
<see><![CDATA[com.soma.core.model.SomaModels
		 ]]></see>
</method>
<method name='removeView' fullname='com.soma.core:Soma/removeView' isStatic='false' isFinal='true' isOverride='false'  param_names='viewName' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a view from the framework and call the (optional) dispose method of this view.
		 ]]></description>
<example><![CDATA[<listing version="3.0">removeView(MySprite.NAME);</listing>
		 ]]></example>
<param><![CDATA[viewName Name of the view.
		 ]]></param>
<see><![CDATA[com.soma.core.view.SomaViews
		 ]]></see>
</method>
<method name='removeWire' fullname='com.soma.core:Soma/removeWire' isStatic='false' isFinal='true' isOverride='false'  param_names='wireName' param_types='String' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Removes a wire from the framework and call the dispose method of this wire.
		 ]]></description>
<example><![CDATA[<listing version="3.0">removeWire(MyWire.NAME);</listing>
		 ]]></example>
<param><![CDATA[wireName Name of the wire.
		 ]]></param>
<see><![CDATA[com.soma.core.wire.SomaWires
		 ]]></see>
</method>
<method name='setup' fullname='com.soma.core:Soma/setup' isStatic='false' isFinal='false' isOverride='false'  param_names='stage;injectorClass' param_types='flash.display:Stage;Class' param_defaults='null;null' result_type='void'>
<description><![CDATA[
		 Register elements that the frameworks needs to be ready, such as the stage and the optional injector class (default is SomaInjector).
		 ]]></description>
<param><![CDATA[stage The stage is used as a global EventDispatcher (as well as the Soma class), and is required to instantiate the framework.
		 ]]></param>
<param><![CDATA[injectorClass Class that must extend ISomaInjector.
		 ]]></param>
</method>
<method name='start' fullname='com.soma.core:Soma/protected:start' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[ 
		 Method that you can optionally overwrite to start your own after that the framework has registered all the elements (models, views, commands, wires, plugins).
		 ]]></description>
<example><![CDATA[<listing version="3.0">addWire(MyWire.NAME, new MyWire());</listing>
		 ]]></example>
<see><![CDATA[com.soma.core.wire.SomaWires
		 ]]></see>
</method>
<method name='stopAllSequencers' fullname='com.soma.core:Soma/stopAllSequencers' isStatic='false' isFinal='true' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Stops all the sequence command instances that are running.
		 ]]></description>
<example><![CDATA[<listing version="3.0">stopAllSequencers();</listing>
		 ]]></example>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='stopSequencerWithEvent' fullname='com.soma.core:Soma/stopSequencerWithEvent' isStatic='false' isFinal='true' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Stops a sequence command using an event instance that has been created from this sequence command.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var success:Boolean = stopSequencerWithEvent(myEvent);</listing>
		 ]]></example>
<param><![CDATA[event Event instance.
		 ]]></param>
<return><![CDATA[A Boolean (true if a sequence command has been stopped).
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='stopSequencer' fullname='com.soma.core:Soma/stopSequencer' isStatic='false' isFinal='true' isOverride='false'  param_names='sequencer' param_types='com.soma.core.interfaces:ISequenceCommand' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Stops a sequence command using the sequence command instance itself.
		 ]]></description>
<example><![CDATA[<listing version="3.0">var success:Boolean = stopSequencer(mySequenceCommand);</listing>
		 ]]></example>
<param><![CDATA[sequencer The sequence command instance.
		 ]]></param>
<return><![CDATA[A Boolean (true if the sequence command has been stopped).
		 ]]></return>
<see><![CDATA[com.soma.core.controller.SomaController
		 ]]></see>
</method>
<method name='controller' fullname='com.soma.core:Soma/controller/get' isStatic='false' isFinal='true' isOverride='false'  result_type='com.soma.core.controller:SomaController'>
<description><![CDATA[
		 Gets the commands manager instance.
		 ]]></description>
</method>
<method name='injectorClass' fullname='com.soma.core:Soma/injectorClass/get' isStatic='false' isFinal='false' isOverride='false'  result_type='Class'>
<description><![CDATA[
		 Retrieves the injector Class registered to the framework.
		 ]]></description>
<return><![CDATA[A Class.
		 ]]></return>
</method>
<method name='injector' fullname='com.soma.core:Soma/injector/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.soma.core.interfaces:ISomaInjector'>
<description><![CDATA[
		 Retrieves the injector instance that has been created by the framework from the injector Class registered.
		 ]]></description>
<return><![CDATA[a ISomaInjector instance (default is SomaInjector).
		 ]]></return>
</method>
<method name='mediators' fullname='com.soma.core:Soma/mediators/get' isStatic='false' isFinal='true' isOverride='false'  result_type='com.soma.core.mediator:SomaMediators'>
<description><![CDATA[
		 Gets the mediator manager instance that has been created by the framework from the injector Class registered.
		 ]]></description>
</method>
<method name='models' fullname='com.soma.core:Soma/models/get' isStatic='false' isFinal='true' isOverride='false'  result_type='com.soma.core.model:SomaModels'>
<description><![CDATA[
		 Gets the model manager instance.
		 ]]></description>
</method>
<method name='reflector' fullname='com.soma.core:Soma/reflector/get' isStatic='false' isFinal='false' isOverride='false'  result_type='com.soma.core.interfaces:ISomaReflector'>
<description><![CDATA[
		 Retrieves the refletor instance.
		 ]]></description>
<return><![CDATA[a ISomaReflector instance (default is SomaReflector).
		 ]]></return>
</method>
<method name='stage' fullname='com.soma.core:Soma/stage/get' isStatic='false' isFinal='true' isOverride='false'  result_type='flash.display:Stage'>
<description><![CDATA[
		 Get the stage that has been registered to the framework.
		 ]]></description>
<return><![CDATA[The stage instance.
		 ]]></return>
</method>
<method name='views' fullname='com.soma.core:Soma/views/get' isStatic='false' isFinal='true' isOverride='false'  result_type='com.soma.core.view:SomaViews'>
<description><![CDATA[
		 Gets the view manager class.
		 ]]></description>
</method>
<method name='wires' fullname='com.soma.core:Soma/wires/get' isStatic='false' isFinal='true' isOverride='false'  result_type='com.soma.core.wire:SomaWires'>
<description><![CDATA[
		 Gets the wires manager instance.
		 ]]></description>
</method>
<field name='_controller' fullname='com.soma.core:Soma/protected:_controller' type='com.soma.core.controller:SomaController' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_injectorClass' fullname='com.soma.core:Soma/protected:_injectorClass' type='Class' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_injector' fullname='com.soma.core:Soma/protected:_injector' type='com.soma.core.interfaces:ISomaInjector' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_mediators' fullname='com.soma.core:Soma/protected:_mediators' type='com.soma.core.mediator:SomaMediators' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_models' fullname='com.soma.core:Soma/protected:_models' type='com.soma.core.model:SomaModels' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_reflector' fullname='com.soma.core:Soma/protected:_reflector' type='com.soma.core.interfaces:ISomaReflector' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_stage' fullname='com.soma.core:Soma/protected:_stage' type='flash.display:Stage' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_views' fullname='com.soma.core:Soma/protected:_views' type='com.soma.core.view:SomaViews' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
<field name='_wires' fullname='com.soma.core:Soma/protected:_wires' type='com.soma.core.wire:SomaWires' isStatic='false' isConst='false' >
<description><![CDATA[ ]]></description>
<private><![CDATA[]]></private>
</field>
</asdoc>
