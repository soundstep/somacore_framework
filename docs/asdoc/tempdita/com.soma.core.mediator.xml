<?xml version="1.0" encoding="UTF-8"?><apiPackage id="com.soma.core.mediator"><apiName>com.soma.core.mediator</apiName><apiDetail/><apiClassifier id="com.soma.core.mediator:Mediator"><apiName>Mediator</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 A Mediator is a class that extends a wire and has a relation one-to-one with a view.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:IMediator</apiBaseInterface><apiBaseClassifier>com.soma.core.wire:Wire</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 <p>A Mediator is a class that extends a wire and has a relation one-to-one with a view. A mediator can be created with the injection enabled or disabled.</p>
	 <p>The first step is to map a view class to a mediator class, and everytime a view is added to a display list, a mediator for this view is automatically instantiated by the framework.</p>
	 <p>The mediator instance will automatically be destroyed by the framework when the view it represents will be removed from the display list.</p>
	 </apiDesc><example>Map a view class to a mediator class
	 <codeblock rev="3.0">
package {
	import com.soma.core.interfaces.IMediator;
	import com.soma.core.mediator.Mediator;
	public class MyViewMediator extends Mediator implements IMediator {
		
		[Inject]
		public var myView:MyView;
		
		override public function initialize():void {
			// called when the mediator has been created and registered to the framework
			trace(myView == viewComponent);
		}
		
		override public function dispose():void {
			// called when the mediator has been destroyed by the framework
		}
		
	}
}
	 </codeblock>
	 Map a mediator class to a view class.
	 <codeblock rev="3.0">
mediators.mapView(MyView, MyViewMediator);
	 </codeblock>
	 Remove mapping.
	 <codeblock rev="3.0">
mediators.removeMapping(MyView);
	 </codeblock>
	 Retrieve a mediator.
	 <codeblock rev="3.0">
var mediator:MyViewMediator = mediators.getMediatorByView(view) as MyViewMediator;
	 </codeblock>
	 Trigger the creation of a mediator by adding a view to the display list.
	 <codeblock rev="3.0">
mediators.mapView(MyView, MyViewMediator);
var view:MyView = new MyView();
myDisplayObjectContainer.addChild(view);
// mediator instance created
var mediator:MyViewMediator = mediators.getMediatorByView(view) as MyViewMediator;
trace(mediators.hasMediator(view));
	 </codeblock>
	 </example></apiClassifierDetail><related-links><link href="com.soma.core.mediator.xml#SomaMediators"><linktext>com.soma.core.mediator.SomaMediators</linktext></link><link href="com.soma.core.interfaces.xml#IMediator"><linktext>com.soma.core.interfaces.IMediator</linktext></link><link href="com.soma.core.wire.xml#Wire"><linktext>com.soma.core.wire.Wire</linktext></link><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links><apiConstructor id="com.soma.core.mediator:Mediator:Mediator"><apiName>Mediator</apiName><shortdesc>
		 Create an instance of a Mediator class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Create an instance of a Mediator class. The Mediator class should be extended and is usually automatically created (and removed) by the framework.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.soma.core.mediator:Mediator:creationComplete"><apiName>creationComplete</apiName><shortdesc>
		 Method that can you can override, called when if the view is part of the Flex Framework (not used for a pure AS3 view).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Method that can you can override, called when if the view is part of the Flex Framework (not used for a pure AS3 view).
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.soma.core.mediator:Mediator:protected:_viewComponent"><apiName>_viewComponent</apiName><shortdesc>
		 View that has been mapped to the mediator instance.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
		 View that has been mapped to the mediator instance.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.mediator:Mediator:viewComponent:get"><apiName>viewComponent</apiName><shortdesc>
		 View that has been mapped to the mediator instance.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
		 View that has been mapped to the mediator instance.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.soma.core.mediator:SomaMediators"><apiName>SomaMediators</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 The SomaMediators class handles the mediators of the application.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 The SomaMediators class handles the mediators of the application. See the Mediator class documentation for implementation. 
	 </apiDesc></apiClassifierDetail><related-links><link href="com.soma.core.mediator.xml#Mediator"><linktext>com.soma.core.mediator.Mediator</linktext></link></related-links><apiConstructor id="com.soma.core.mediator:SomaMediators:SomaMediators"><apiName>SomaMediators</apiName><shortdesc>
		 Create an instance of the SomaWires class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISoma</apiOperationClassifier><apiDesc>Framework instance.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Create an instance of the SomaWires class. Should not be directly instantiated, the framework will instantiate the class.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.soma.core.mediator:SomaMediators:dispose"><apiName>dispose</apiName><shortdesc>
		 Destroys all the mediators and properties.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Destroys all the mediators and properties. The class will call the dispose method of each mediator instance.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.mediator:SomaMediators:getMediatorByView"><apiName>getMediatorByView</apiName><shortdesc>
		 Retrieves a mediator instance using its view.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A mediator instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IMediator</apiOperationClassifier></apiReturn><apiParam><apiItemName>view</apiItemName><apiType value="Object"/><apiDesc>View that the mediator represents.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves a mediator instance using its view.
		 </apiDesc><example><codeblock rev="3.0">var mediator:MyViewMediator = mediators.getMediatorByView(myView) as MyViewMediator;</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.mediator:SomaMediators:hasMediator"><apiName>hasMediator</apiName><shortdesc>
		 Indicates whether a mediator has been created by the framework for a specific view.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>view</apiItemName><apiType value="Object"/><apiDesc>View that the mediator represents.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates whether a mediator has been created by the framework for a specific view.
		 </apiDesc><example><codeblock rev="3.0">mediators.hasMediator(myView);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.mediator:SomaMediators:isMapped"><apiName>isMapped</apiName><shortdesc>
		 Indicates whether a view Class has a mapping rule.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>viewClass</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates whether a view Class has a mapping rule.
		 </apiDesc><example><codeblock rev="3.0">mediators.isMapped(MyView);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.mediator:SomaMediators:mapView"><apiName>mapView</apiName><shortdesc>
		 Map a mediator Class to a view Class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="void"/></apiReturn><apiParam><apiItemName>viewClass</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>mediatorClass</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Map a mediator Class to a view Class.
		 </apiDesc><example><codeblock rev="3.0">mediators.mapView(MyView, MyViewMediator);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.mediator:SomaMediators:removeMapping"><apiName>removeMapping</apiName><shortdesc>
		 Remove a mapping rule for a specific Class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="void"/></apiReturn><apiParam><apiItemName>viewClass</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Remove a mapping rule for a specific Class.
		 </apiDesc><example><codeblock rev="3.0">mediators.removeMapping(MyView);</codeblock>
		 </example></apiOperationDetail></apiOperation></apiClassifier></apiPackage>