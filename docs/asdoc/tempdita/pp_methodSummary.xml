<?xml version="1.0" encoding="UTF-8"?><allClasses><apiPackage id="com.soma.core.controller"><apiName>com.soma.core.controller</apiName><apiClassifier id="com.soma.core.controller:Command"><apiName>Command</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><example>Register a command.
	 <codeblock rev="3.0">
addCommand(MyEvent.DOSOMETHING, CommandExample);
dispatchEvent(new MyEvent(MyEvent.DOSOMETHING));
	 </codeblock>
	 Create a normal command.
	 <codeblock rev="3.0">
package  {
	import flash.events.Event;
	import com.soma.core.interfaces.ICommand;
	import com.soma.core.controller.Command;
	
	public class CommandExample extends Command implements ICommand {
		public function execute(event:Event):void {
			
		}
		
	}
}
	 </codeblock>
	 Create an asynchronous command.
	 <codeblock rev="3.0">
package  {
	import flash.events.Event;
	import com.soma.core.interfaces.ICommandASync;
	import com.soma.core.controller.Command;
	
	public class CommandASyncExample extends Command implements ICommandASync {
		public function CommandASyncExample() {
			
		}
		
		public function execute(event:Event):void {
			
		}
		
		public function fault(info:Object):void {
			
		}
		
		public function result(data:Object):void {
			
		}
		
	}
}
	 </codeblock>
	 </example></apiClassifierDetail><apiOperation id="com.soma.core.controller:Command:addCommand"><apiName>addCommand</apiName><shortdesc>
		 Registers a command to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam><apiParam><apiItemName>command</apiItemName><apiType value="Class"/><apiDesc>Class that will be executed when a command has been dispatched.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a command to the framework.
		 </apiDesc><example><codeblock rev="3.0">addCommand(MyEvent.DOSOMETHING, MyCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:addEventListener"><apiName>addEventListener</apiName><shortdesc>
		 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener function that processes the event.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the listener works in the capture phase or the target and bubbling phases.
		 </apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>The priority level of the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the reference to the listener is strong or weak.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:Command:addModel"><apiName>addModel</apiName><shortdesc>
		 Registers a model to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>The model instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam><apiParam><apiItemName>model</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>Instance of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a model to the framework.
		 </apiDesc><example><codeblock rev="3.0">addModel(MyModel.NAME, new MyModel());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:addView"><apiName>addView</apiName><shortdesc>
		 Registers a view to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Object"/><apiDesc>The view instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam><apiParam><apiItemName>view</apiItemName><apiType value="Object"/><apiDesc>Instance of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a view to the framework.
		 </apiDesc><example><codeblock rev="3.0">addView(MySprite.NAME, new MySprite());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:addWire"><apiName>addWire</apiName><shortdesc>
		 Registers a wire to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>The wire instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam><apiParam><apiItemName>wire</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>Instance of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a wire to the framework.
		 </apiDesc><example><codeblock rev="3.0">addWire(MyWire.NAME, new MyWire());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
		 Dispatches an event into the event flow.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A value of true unless preventDefault() is called on the event, in which case it returns false.
		 </apiDesc></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>The event object dispatched into the event flow.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Dispatches an event into the event flow. The event target is the EventDispatcher object upon which dispatchEvent() is called.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:Command:getCommand"><apiName>getCommand</apiName><shortdesc>
		 Retrieves the command class that has been registered with a command name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Class"/><apiDesc>A class.
		 </apiDesc></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the command class that has been registered with a command name.
		 </apiDesc><example><codeblock rev="3.0">var commandClass:ICommand = getCommand(MyEvent.DOSOMETHING) as ICommand;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getCommands"><apiName>getCommands</apiName><shortdesc>
		 Retrieves all the command names (event type) that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Array"/><apiDesc>An Array of String (command name).
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the command names (event type) that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var commands:Array = getCommands();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getLastSequencer"><apiName>getLastSequencer</apiName><shortdesc>
		 Retrieves the last sequence command that has been instantiated in the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>An ISequenceCommand instance.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the last sequence command that has been instantiated in the framework.
		 </apiDesc><example><codeblock rev="3.0">var lastSequencer:ISequenceCommand = getLastSequencer();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getModel"><apiName>getModel</apiName><shortdesc>
		 Retrieves the model instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>A IModel instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the model instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myModel:MyModel = getModel(MyModel.NAME) as MyModel;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getModels"><apiName>getModels</apiName><shortdesc>
		 Retrieves all the model instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="flash.utils:Dictionary"/><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the model instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var models:Dictionary = getModels();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getRunningSequencers"><apiName>getRunningSequencers</apiName><shortdesc>
		 Retrieves all the sequence command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Array"/><apiDesc>An Array of ISequenceCommand instances.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the sequence command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">var sequencers:Array = getRunningSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getSequencer"><apiName>getSequencer</apiName><shortdesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>A sequencer (ISequenceCommand).
		 </apiDesc></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var sequencer:ISequenceCommand = getSequencer(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getView"><apiName>getView</apiName><shortdesc>
		 Retrieves the view instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Object"/><apiDesc>An Object instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the view instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var mySprite:MySprite = getView(MySprite.NAME) as MySprite;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getViews"><apiName>getViews</apiName><shortdesc>
		 Retrieves all the view instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="flash.utils:Dictionary"/><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the view instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var sprites:Dictionary = getViews();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getWire"><apiName>getWire</apiName><shortdesc>
		 Retrieves the wire instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>A wire instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the wire instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myWire:MyWire = getWire(MyWire.NAME) as MyWire;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getWires"><apiName>getWires</apiName><shortdesc>
		 Retrieves all the wire instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="flash.utils:Dictionary"/><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the wire instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var wires:Dictionary = getWires();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:hasCommand"><apiName>hasCommand</apiName><shortdesc>
		 Indicates wether a command has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a command has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
		 Checks whether the EventDispatcher object has any listeners registered for a specific type of event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A value of true if a listener of the specified type is registered; false otherwise.
		 </apiDesc></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Checks whether the EventDispatcher object has any listeners registered for a specific type of event.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:Command:hasModel"><apiName>hasModel</apiName><shortdesc>
		 Indicates wether a model has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a model has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:hasView"><apiName>hasView</apiName><shortdesc>
		 Indicates wether a view has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a view has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:hasWire"><apiName>hasWire</apiName><shortdesc>
		 Indicates wether a wire has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a wire has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:protected:initialize"><apiName>initialize</apiName><shortdesc> 
		 Method that you can optionally overwrite and that is called after the command has been registered with the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can optionally overwrite and that is called after the command has been registered with the framework.
		 </apiDesc></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:isPartOfASequence"><apiName>isPartOfASequence</apiName><shortdesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.
		 </apiDesc><example><codeblock rev="3.0">var inSequence:Boolean = isPartOfASequence(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:removeCommand"><apiName>removeCommand</apiName><shortdesc>
		 Removes a command from the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a command from the framework.
		 </apiDesc><example><codeblock rev="3.0">removeCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
		 Removes a listener from the EventDispatcher object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event. 
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener object to remove. 
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies whether the listener was registered for the capture phase or the target and bubbling phases.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a listener from the EventDispatcher object. If there is no matching listener registered with the EventDispatcher object, a call to this method has no effect.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:Command:removeModel"><apiName>removeModel</apiName><shortdesc>
		 Removes a model from the framework and call the dispose method of this model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a model from the framework and call the dispose method of this model.
		 </apiDesc><example><codeblock rev="3.0">removeModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:removeView"><apiName>removeView</apiName><shortdesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.
		 </apiDesc><example><codeblock rev="3.0">removeView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:removeWire"><apiName>removeWire</apiName><shortdesc>
		 Removes a wire from the framework and call the dispose method of this wire.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a wire from the framework and call the dispose method of this wire.
		 </apiDesc><example><codeblock rev="3.0">removeWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:stopAllSequencers"><apiName>stopAllSequencers</apiName><shortdesc>
		 Stops all the sequence command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Stops all the sequence command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">stopAllSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:stopSequencerWithEvent"><apiName>stopSequencerWithEvent</apiName><shortdesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean (true if a sequence command has been stopped).
		 </apiDesc></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencerWithEvent(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:stopSequencer"><apiName>stopSequencer</apiName><shortdesc>
		 Stops a sequence command using the sequence command instance itself.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean (true if the sequence command has been stopped).
		 </apiDesc></apiReturn><apiParam><apiItemName>sequencer</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>The sequence command instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using the sequence command instance itself.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencer(mySequenceCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:willTrigger"><apiName>willTrigger</apiName><shortdesc>
		 Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A value of true if a listener of the specified type will be triggered; false otherwise. 
		 </apiDesc></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="com.soma.core.controller:Command:Command"><apiName>Command</apiName><shortdesc>
		 Create an instance of the Command class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Create an instance of the Command class. Should not be directly instantiated, the framework will instantiate the class.
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="com.soma.core.controller:SequenceCommand"><apiName>SequenceCommand</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:ISequenceCommand</apiBaseInterface><apiBaseClassifier>com.soma.core.controller:Command</apiBaseClassifier></apiClassifierDef><example>Register commands and a sequence command.
	 <codeblock rev="3.0">
addCommand(MyEvent.DO_SOMETHING_ASYNCHRONOUS, CommandASyncExample);
addCommand(MyEvent.DO_SOMETHING_ELSE_ASYNCHRONOUS, CommandASyncExample);
addCommand(MyEvent.EXECUTE_SEQUENCE_COMMAND, SequenceCommandExample);
dispatchEvent(new MyEvent(MyEvent.EXECUTE_SEQUENCE_COMMAND));
	 </codeblock>
	 Each asynchronous command added to a sequence much use the executeNextCommand method. Here is an example.
	 <codeblock rev="3.0">
package {
	import flash.utils.clearTimeout;
	import flash.utils.setTimeout;
	import flash.events.Event;
	import com.soma.core.interfaces.ICommandASync;
	import com.soma.core.controller.Command;
	
	public class CommandASyncExample extends Command implements ICommandASync {
		private var _event:Event;
		private var _timer:int;
		public function CommandASyncExample() {
			
		}
		
		public function execute(event:Event):void {
			_event = event;
			_timer = setTimeout(result, 1000, {});
		}
		
		public function fault(info:Object):void {
			
		}
		
		public function result(data:Object):void {
			if (isPartOfASequence(_event)) {
				getSequencer(_event).executeNextCommand();
			}
			_event = null;
			clearTimeout(_timer);
		}
		
	}
}
	 </codeblock>
	 Create a sequence command.
	 <codeblock rev="3.0">
package  {
	import com.soma.core.interfaces.ISequenceCommand;
	import com.soma.core.controller.SequenceCommand;
	
	public class SequenceCommandExample extends SequenceCommand implements ISequenceCommand {
		public function SequenceCommandExample() {
			
		}
		
		override protected function initializeSubCommands():void {
			addSubCommand(new MyEvent(MyEvent.DO_SOMETHING_ASYNCHRONOUS));
			addSubCommand(new MyEvent(MyEvent.DO_SOMETHING_ELSE_ASYNCHRONOUS));
		}
		
	}
}
	 </codeblock>
	 </example></apiClassifierDetail><apiOperation id="com.soma.core.controller:SequenceCommand:protected:addSubCommand"><apiName>addSubCommand</apiName><shortdesc>
		 Add a command to the list of commands to execute one after the other.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance (must be registered as a command previously).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Add a command to the list of commands to execute one after the other.
		 </apiDesc><example><codeblock rev="3.0">addSubCommand(new MyEvent(MyEvent.DO_SOMETHING_ASYNC));</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:SequenceCommand:executeNextCommand"><apiName>executeNextCommand</apiName><shortdesc>
		 Method used to execute the next command in the list of subcommands.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Method used to execute the next command in the list of subcommands.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SequenceCommand:protected:initializeSubCommands"><apiName>initializeSubCommands</apiName><shortdesc> 
		 Method that you can overwrite to add commands to the sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can overwrite to add commands to the sequence command.
		 </apiDesc><example><codeblock rev="3.0">addSubCommand(new MyEvent(MyEvent.DO_SOMETHING_ASYNC));</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:SequenceCommand:stop"><apiName>stop</apiName><shortdesc>
		 Stops the current sequence.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Stops the current sequence.
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="com.soma.core.controller:SequenceCommand:SequenceCommand"><apiName>SequenceCommand</apiName><shortdesc>
		 Create an instance of the SequenceCommand class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Create an instance of the SequenceCommand class. Should not be directly instantiated, the framework will instantiate the class.
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="com.soma.core.controller:SomaController"><apiName>SomaController</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><example><codeblock rev="3.0">
addCommand(MyEvent.DOSOMETHING, CommandExample);
removeCommand(MyEvent.DOSOMETHING);
dispatchEvent(new MyEvent(MyEvent.DOSOMETHING));
	 </codeblock>
	 </example></apiClassifierDetail><apiOperation id="com.soma.core.controller:SomaController:addCommand"><apiName>addCommand</apiName><shortdesc>
		 Registers a command to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam><apiParam><apiItemName>command</apiItemName><apiType value="Class"/><apiDesc>Class that will be executed when a command has been dispatched.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a command to the framework.
		 </apiDesc><example><codeblock rev="3.0">addCommand(MyEvent.DOSOMETHING, MyCommand);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:dispose"><apiName>dispose</apiName><shortdesc>
		 Destroys the SomaController elements (all commands, sequencers and properties).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Destroys the SomaController elements (all commands, sequencers and properties).
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:getCommand"><apiName>getCommand</apiName><shortdesc>
		 Retrieves the command class that has been registered with a command name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Class"/><apiDesc>A class.
		 </apiDesc></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the command class that has been registered with a command name.
		 </apiDesc><example><codeblock rev="3.0">var commandClass:ICommand = getCommand(MyEvent.DOSOMETHING) as ICommand;</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:getCommands"><apiName>getCommands</apiName><shortdesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>A sequencer (ISequenceCommand).
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var sequencer:ISequenceCommand = getSequencer(myEvent);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:getLastSequencer"><apiName>getLastSequencer</apiName><shortdesc>
		 Retrieves the last sequence command that has been instantiated in the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>An ISequenceCommand instance.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the last sequence command that has been instantiated in the framework.
		 </apiDesc><example><codeblock rev="3.0">var lastSequencer:ISequenceCommand = getLastSequencer();</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:getRunningSequencers"><apiName>getRunningSequencers</apiName><shortdesc>
		 Retrieves all the sequence command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>An Array of ISequenceCommand instances.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the sequence command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">var sequencers:Array = getRunningSequencers();</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:getSequencer"><apiName>getSequencer</apiName><shortdesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>A Boolean (true if a sequence command has been stopped).
		 </apiDesc></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencerWithEvent(myEvent);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:hasCommand"><apiName>hasCommand</apiName><shortdesc>
		 Indicates wether a command has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a command has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:isPartOfASequence"><apiName>isPartOfASequence</apiName><shortdesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.
		 </apiDesc><example><codeblock rev="3.0">var inSequence:Boolean = isPartOfASequence(myEvent);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:removeCommand"><apiName>removeCommand</apiName><shortdesc>
		 Removes a command from the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a command from the framework.
		 </apiDesc><example><codeblock rev="3.0">removeCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:stopAllSequencers"><apiName>stopAllSequencers</apiName><shortdesc>
		 Stops all the sequence command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Stops all the sequence command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">stopAllSequencers();</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:stopSequencerWithEvent"><apiName>stopSequencerWithEvent</apiName><shortdesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean (true if a sequence command has been stopped).
		 </apiDesc></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencerWithEvent(myEvent);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:stopSequencer"><apiName>stopSequencer</apiName><shortdesc>
		 Stops a sequence command using the sequence command instance itself.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean (true if the sequence command has been stopped).
		 </apiDesc></apiReturn><apiParam><apiItemName>sequencer</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>The sequence command instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using the sequence command instance itself.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencer(mySequenceCommand);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiConstructor id="com.soma.core.controller:SomaController:SomaController"><apiName>SomaController</apiName><shortdesc>
		 Create an instance of the SomaController class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISoma</apiOperationClassifier><apiDesc>Framework instance.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Create an instance of the SomaController class. Should not be directly instantiated, the framework will instantiate the class.
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="com.soma.core.controller:ParallelCommand"><apiName>ParallelCommand</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:IParallelCommand</apiBaseInterface><apiBaseClassifier>com.soma.core.controller:Command</apiBaseClassifier></apiClassifierDef><example>Register commands and a parallel command.
	 <codeblock rev="3.0">
addCommand(MyEvent.DO_SOMETHING, CommandExample);
addCommand(MyEvent.DO_SOMETHING_ELSE, CommandExample);
addCommand(MyEvent.EXECUTE_PARALLEL_COMMAND, ParallelCommandExample);
dispatchEvent(new MyEvent(MyEvent.EXECUTE_PARALLEL_COMMAND));
	 </codeblock>
	 <codeblock rev="3.0">
package  {
	import com.soma.core.interfaces.IParallelCommand;
	import com.soma.core.controller.ParallelCommand;
	
	public class ParallelCommandExample extends ParallelCommand implements IParallelCommand {
		public function ParallelCommandExample() {
			
		}
		
		override protected function initializeSubCommands():void {
			addSubCommand(new MyEvent(MyEvent.DO_SOMETHING));
			addSubCommand(new MyEvent(MyEvent.DO_SOMETHING_ELSE));
		}
		
	}
}
	 </codeblock>
	 </example></apiClassifierDetail><apiOperation id="com.soma.core.controller:ParallelCommand:protected:addSubCommand"><apiName>addSubCommand</apiName><shortdesc>
		 Add a command to the list of commands to execute in parallel.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance (must be registered as a command previously).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Add a command to the list of commands to execute in parallel.
		 </apiDesc><example><codeblock rev="3.0">addSubCommand(new MyEvent(MyEvent.DO_SOMETHING));</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:ParallelCommand:protected:initializeSubCommands"><apiName>initializeSubCommands</apiName><shortdesc> 
		 Method that you can overwrite to add commands to the parallele command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can overwrite to add commands to the parallele command.
		 </apiDesc><example><codeblock rev="3.0">addSubCommand(new MyEvent(MyEvent.DO_SOMETHING));</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiConstructor id="com.soma.core.controller:ParallelCommand:ParallelCommand"><apiName>ParallelCommand</apiName><shortdesc>
		 Create an instance of the ParallelCommand class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Create an instance of the ParallelCommand class. Should not be directly instantiated, the framework will instantiate the class.
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage><apiPackage id="com.soma.core.di"><apiName>com.soma.core.di</apiName><apiClassifier id="com.soma.core.di:SomaInjector"><apiName>SomaInjector</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:ISomaInjector</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><example><codeblock rev="3.0">
var application:ISoma = new Soma(stage, SomaInjector);
	 </codeblock>
	 <codeblock rev="3.0">
var application:ISoma = new Soma();
application.setup(stage, SomaInjector);
	 </codeblock>
	 <codeblock rev="3.0">
package  {
	import com.soma.core.interfaces.ISoma;
	import com.soma.core.di.SomaInjector;
	import flash.display.Sprite;
	
	public class Main extends Sprite {
		
		private var _app:ISoma;
		
		public function Main() {
			_app = new SomaApplication(stage, SomaInjector);
		}
		
	}
}
	 </codeblock>
	 <codeblock rev="3.0">
package  {
	import com.soma.core.Soma;
	import com.soma.core.interfaces.ISoma;
	import flash.display.Stage;
	
	public class SomaApplication extends Soma implements ISoma {
		public function SomaApplication(stage:Stage, injectorClass:Class) {
			super(stage, injectorClass);
		}
		
	}
}
	 </codeblock>
	 <codeblock rev="3.0">
package {
	public class Injectee {
		[Inject]
		public var myClass:MyClass;
		[PostConstruct]
		public funtion test():void {
			trace(myClass);
		}
	}
}
	 </codeblock>
	 <codeblock rev="3.0">
injector.mapSingleton(MyClass);
injector.createInstance(Injectee);
	 </codeblock>
	 </example></apiClassifierDetail><apiOperation id="com.soma.core.di:SomaInjector:createChildInjector"><apiName>createChildInjector</apiName><shortdesc>
		 Creates a child injector.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:ISomaInjector</apiOperationClassifier><apiDesc>A ISomaInjector instance.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates a child injector.
		 The child injector inherits the rules of its parents.
		 </apiDesc><example><codeblock rev="3.0">
var child:ISomaInjector = injector.createChildInjector();
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.di:SomaInjector:createInstance"><apiName>createInstance</apiName><shortdesc>
		 Instantiates a new instance from a given class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>An instance of the Class target.
		 </apiDesc></apiReturn><apiParam><apiItemName>classTarget</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Instantiates a new instance from a given class.
		 This method will always creates a new instance, regardless of any singleton mapping.
		 </apiDesc><example><codeblock rev="3.0">
injector.map(MyClass, MyClass);
var class1:MyClass = injector.createInstance(MyClass) as MyClass;
var class2:MyClass = injector.createInstance(MyClass) as MyClass;
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.di:SomaInjector:dispose"><apiName>dispose</apiName><shortdesc>
		 Destroys the injector elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Destroys the injector elements.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.di:SomaInjector:getInstance"><apiName>getInstance</apiName><shortdesc>
		 Retrieves or instantiates an instance of the given Class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>An instance of the Class target.
		 </apiDesc></apiReturn><apiParam><apiItemName>classTarget</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData/><apiDesc>Injection name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves or instantiates an instance of the given Class.
		 This method needs a mapping rule, the instance can be a singleton or a new one.
		 </apiDesc><example><codeblock rev="3.0">
injector.map(MyClass, MyClass);
var class1:MyClass = injector.getInstance(MyClass) as MyClass;
var class2:MyClass = injector.getInstance(MyClass) as MyClass;
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.di:SomaInjector:getParentInjector"><apiName>getParentInjector</apiName><shortdesc>
		 Retrieves the injector parent if any.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:ISomaInjector</apiOperationClassifier><apiDesc>A ISomaInjector instance.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the injector parent if any.
		 </apiDesc><example><codeblock rev="3.0">
var parent:ISomaInjector = injector.getParentInjector();
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.di:SomaInjector:hasMapping"><apiName>hasMapping</apiName><shortdesc>
		 Indicates wether a mapping rule exists for the given Class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>classTarget</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData/><apiDesc>Injection name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a mapping rule exists for the given Class.
		 </apiDesc><example><codeblock rev="3.0">
injector.map(MyClass, MyClass)
var value:Boolean = injector.hasMapping(MyClass); // return true
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.di:SomaInjector:injectInto"><apiName>injectInto</apiName><shortdesc>
		 Performs injection into the given instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>An instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Performs injection into the given instance.
		 </apiDesc><example><codeblock rev="3.0">
package {
	public class Injectee {
		[Inject]
		public var myClass:MyClass;
	}
}
		 </codeblock>
		 <codeblock rev="3.0">
injector.map(MyClass, MyClass);
var myClass:MyClass = injector.createInstance(MyClass) as MyClass;
injector.injectInto(myClass);
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.di:SomaInjector:mapSingletonOf"><apiName>mapSingletonOf</apiName><shortdesc>
		 Rule that defines the "whenAskFor" (usually an interface) to be injected with the same instance "useSingletonOf".</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>whenAskFor</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>useSingletonOf</apiItemName><apiType value="Class"/><apiDesc>A class.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData/><apiDesc>Injection name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Rule that defines the "whenAskFor" (usually an interface) to be injected with the same instance "useSingletonOf".
		 </apiDesc><example><codeblock rev="3.0">
injector.mapSingletonOf(IMyClass, MyClass);
var myClass:MyClass = injector.getInstance(MyClass) as MyClass;
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.di:SomaInjector:mapSingleton"><apiName>mapSingleton</apiName><shortdesc>
		 Rule that defines the "classTarget" to be injected with always the same instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>classTarget</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData/><apiDesc>Injection name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Rule that defines the "classTarget" to be injected with always the same instance.
		 </apiDesc><example><codeblock rev="3.0">
injector.mapSingleton(MyClass, MyClass);
var myClass:MyClass = injector.getInstance(MyClass) as MyClass;
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.di:SomaInjector:mapToInstance"><apiName>mapToInstance</apiName><shortdesc>
		 Rule that defines the "whenAskFor" to be injected the given instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>whenAskFor</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>An instance.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData/><apiDesc>Injection name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Rule that defines the "whenAskFor" to be injected the given instance.
		 </apiDesc><example><codeblock rev="3.0">
var myClass:MyClass = new MyClass();
injector.mapToInstance(MyClass, myClass)
var myClassSameInstance:MyClass = injector.getInstance(MyClass) as MyClass;
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.di:SomaInjector:map"><apiName>map</apiName><shortdesc>
		 Rule that defines the "whenAskFor" to be injected with an instance of the "createClass" Class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>whenAskFor</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>createClass</apiItemName><apiType value="Class"/><apiDesc>A class.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData/><apiDesc>Injection name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Rule that defines the "whenAskFor" to be injected with an instance of the "createClass" Class.
		 </apiDesc><example><codeblock rev="3.0">
injector.map(MyClass, MyOtherClass)
var myOtherClass:MyOtherClass = injector.getInstance(MyClass) as MyOtherClass;
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.di:SomaInjector:removeMapping"><apiName>removeMapping</apiName><shortdesc>
		 Removes a mapping rule exists for the given Class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>classTarget</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData/><apiDesc>Injection name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a mapping rule exists for the given Class.
		 </apiDesc><example><codeblock rev="3.0">
injector.map(MyClass, MyClass)
var value:Boolean = injector.hasMapping(MyClass); // return true
injector.removeMapping(MyClass);
value = injector.hasMapping(MyClass); // return false
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiConstructor id="com.soma.core.di:SomaInjector:SomaInjector"><apiName>SomaInjector</apiName><shortdesc>
		 Create an instance of the SomaInjector class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Create an instance of the SomaInjector class.
		 Automatically created by the framework when the injection is enabled and accessible using the injector property.
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="com.soma.core.di:SomaReflector"><apiName>SomaReflector</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:ISomaReflector</apiBaseInterface><apiBaseClassifier>org.swiftsuspenders:Reflector</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="com.soma.core.di:SomaReflector:dispose"><apiName>dispose</apiName><shortdesc>
		 Destroys the reflector elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Destroys the reflector elements.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier></apiPackage><apiPackage id="com.soma.core.interfaces"><apiName>com.soma.core.interfaces</apiName><apiClassifier id="com.soma.core.interfaces:ISomaPluginVO"><apiName>ISomaPluginVO</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="com.soma.core.interfaces:ISoma"><apiName>ISoma</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:addCommand"><apiName>addCommand</apiName><shortdesc>
		 Registers a command to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam><apiParam><apiItemName>command</apiItemName><apiType value="Class"/><apiDesc>Class that will be executed when a command has been dispatched.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a command to the framework.
		 </apiDesc><example><codeblock rev="3.0">addCommand(MyEvent.DOSOMETHING, MyCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:addEventListener"><apiName>addEventListener</apiName><shortdesc>
		 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener function that processes the event.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the listener works in the capture phase or the target and bubbling phases.
		 </apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>The priority level of the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the reference to the listener is strong or weak.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:addModel"><apiName>addModel</apiName><shortdesc>
		 Registers a model to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>The model instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam><apiParam><apiItemName>model</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>Instance of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a model to the framework.
		 </apiDesc><example><codeblock rev="3.0">addModel(MyModel.NAME, new MyModel());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:addView"><apiName>addView</apiName><shortdesc>
		 Registers a view to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>The view instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam><apiParam><apiItemName>view</apiItemName><apiType value="Object"/><apiDesc>Instance of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a view to the framework.
		 </apiDesc><example><codeblock rev="3.0">addView(MySprite.NAME, new MySprite());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:addWire"><apiName>addWire</apiName><shortdesc>
		 Registers a wire to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>The wire instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam><apiParam><apiItemName>wire</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>Instance of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a wire to the framework.
		 </apiDesc><example><codeblock rev="3.0">addWire(MyWire.NAME, new MyWire());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:createPluginFromClassName"><apiName>createPluginFromClassName</apiName><shortdesc>
		 Creates a plugin instance using the class name and the getDefinitionByName method.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:ISomaPlugin</apiOperationClassifier><apiDesc>An instance of the plugin.
		 </apiDesc></apiReturn><apiParam><apiItemName>pluginClassName</apiItemName><apiType value="String"/><apiDesc>Class name of the plugin that will be instantiated.
		 </apiDesc></apiParam><apiParam><apiItemName>pluginVO</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISomaPluginVO</apiOperationClassifier><apiDesc>Value Object class of the plugin.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a plugin instance using the class name and the getDefinitionByName method.
		 </apiDesc><example><codeblock rev="3.0">
var pluginVO:SomaDebuggerVO = new SomaDebuggerVO(this, SomaDebugger.NAME_DEFAULT, getCommands(), true, false);
var debugger:SomaDebugger = createPluginFromClassName("com.soma.core.debugger.SomaDebugger", pluginVO) as SomaDebugger;
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:createPlugin"><apiName>createPlugin</apiName><shortdesc>
		 Creates a plugin instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:ISomaPlugin</apiOperationClassifier><apiDesc>An instance of the plugin.
		 </apiDesc></apiReturn><apiParam><apiItemName>plugin</apiItemName><apiType value="Class"/><apiDesc>Class of the plugin that will be instantiated.
		 </apiDesc></apiParam><apiParam><apiItemName>pluginVO</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISomaPluginVO</apiOperationClassifier><apiDesc>Value Object class of the plugin.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a plugin instance.
		 </apiDesc><example><codeblock rev="3.0">
var pluginVO:SomaDebuggerVO = new SomaDebuggerVO(this, SomaDebugger.NAME_DEFAULT, getCommands(), true, false);
var debugger:SomaDebugger = createPlugin(SomaDebugger, pluginVO) as SomaDebugger;
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
		 Dispatches an event into the event flow.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>A value of true unless preventDefault() is called on the event, in which case it returns false.
		 </apiDesc></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>The event object dispatched into the event flow.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Dispatches an event into the event flow. The event target is the EventDispatcher object upon which dispatchEvent() is called.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:dispose"><apiName>dispose</apiName><shortdesc>
		 Destroys the SomaCore core classes and elements registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Destroys the SomaCore core classes and elements registered to the framework.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getCommand"><apiName>getCommand</apiName><shortdesc>
		 Retrieves the command class that has been registered with a command name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Class"/><apiDesc>A class.
		 </apiDesc></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the command class that has been registered with a command name.
		 </apiDesc><example><codeblock rev="3.0">var commandClass:ICommand = getCommand(MyEvent.DOSOMETHING) as ICommand;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getCommands"><apiName>getCommands</apiName><shortdesc>
		 Retrieves all the command names (event type) that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>An Array of String (command name).
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the command names (event type) that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var commands:Array = getCommands();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getLastSequencer"><apiName>getLastSequencer</apiName><shortdesc>
		 Retrieves the last sequence command that has been instantiated in the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>An ISequenceCommand instance.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the last sequence command that has been instantiated in the framework.
		 </apiDesc><example><codeblock rev="3.0">var lastSequencer:ISequenceCommand = getLastSequencer();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getModel"><apiName>getModel</apiName><shortdesc>
		 Retrieves the model instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>A IModel instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the model instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myModel:MyModel = getModel(MyModel.NAME) as MyModel;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getModels"><apiName>getModels</apiName><shortdesc>
		 Retrieves all the model instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.utils:Dictionary"/><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the model instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var models:Dictionary = getModels();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getRunningSequencers"><apiName>getRunningSequencers</apiName><shortdesc>
		 Retrieves all the sequence command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>An Array of ISequenceCommand instances.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the sequence command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">var sequencers:Array = getRunningSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getSequencer"><apiName>getSequencer</apiName><shortdesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>A sequencer (ISequenceCommand).
		 </apiDesc></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var sequencer:ISequenceCommand = getSequencer(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getView"><apiName>getView</apiName><shortdesc>
		 Retrieves the view instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>An Object instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the view instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var mySprite:MySprite = getView(MySprite.NAME) as MySprite;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getViews"><apiName>getViews</apiName><shortdesc>
		 Retrieves all the view instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.utils:Dictionary"/><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the view instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var sprites:Dictionary = getViews();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getWire"><apiName>getWire</apiName><shortdesc>
		 Retrieves the wire instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>A wire instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the wire instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myWire:MyWire = getWire(MyWire.NAME) as MyWire;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getWires"><apiName>getWires</apiName><shortdesc>
		 Retrieves all the wire instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.utils:Dictionary"/><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the wire instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var wires:Dictionary = getWires();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:hasCommand"><apiName>hasCommand</apiName><shortdesc>
		 Indicates wether a command has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a command has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
		 Checks whether the EventDispatcher object has any listeners registered for a specific type of event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>A value of true if a listener of the specified type is registered; false otherwise.
		 </apiDesc></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Checks whether the EventDispatcher object has any listeners registered for a specific type of event.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:hasModel"><apiName>hasModel</apiName><shortdesc>
		 Indicates wether a model has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a model has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:hasView"><apiName>hasView</apiName><shortdesc>
		 Indicates wether a view has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a view has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:hasWire"><apiName>hasWire</apiName><shortdesc>
		 Indicates wether a wire has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a wire has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:isPartOfASequence"><apiName>isPartOfASequence</apiName><shortdesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.
		 </apiDesc><example><codeblock rev="3.0">var inSequence:Boolean = isPartOfASequence(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:removeCommand"><apiName>removeCommand</apiName><shortdesc>
		 Removes a command from the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a command from the framework.
		 </apiDesc><example><codeblock rev="3.0">removeCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
		 Removes a listener from the EventDispatcher object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event. 
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener object to remove. 
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies whether the listener was registered for the capture phase or the target and bubbling phases.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a listener from the EventDispatcher object. If there is no matching listener registered with the EventDispatcher object, a call to this method has no effect.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:removeModel"><apiName>removeModel</apiName><shortdesc>
		 Removes a model from the framework and call the dispose method of this model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a model from the framework and call the dispose method of this model.
		 </apiDesc><example><codeblock rev="3.0">removeModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:removeView"><apiName>removeView</apiName><shortdesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.
		 </apiDesc><example><codeblock rev="3.0">removeView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:removeWire"><apiName>removeWire</apiName><shortdesc>
		 Removes a wire from the framework and call the dispose method of this wire.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a wire from the framework and call the dispose method of this wire.
		 </apiDesc><example><codeblock rev="3.0">removeWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:setup"><apiName>setup</apiName><shortdesc>
		 Register elements that the frameworks needs to be ready, such as the stage and the optional injector class (default is SomaInjector).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>stage</apiItemName><apiType value="flash.display:Stage"/><apiData>null</apiData><apiDesc>The stage is used as a global EventDispatcher (as well as the Soma class), and is required to instantiate the framework.
		 </apiDesc></apiParam><apiParam><apiItemName>injectorClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Class that must extend ISomaInjector.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Register elements that the frameworks needs to be ready, such as the stage and the optional injector class (default is SomaInjector).
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:stopAllSequencers"><apiName>stopAllSequencers</apiName><shortdesc>
		 Stops all the sequence command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Stops all the sequence command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">stopAllSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:stopSequencerWithEvent"><apiName>stopSequencerWithEvent</apiName><shortdesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean (true if a sequence command has been stopped).
		 </apiDesc></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencerWithEvent(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:stopSequencer"><apiName>stopSequencer</apiName><shortdesc>
		 Stops a sequence command using the sequence command instance itself.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean (true if the sequence command has been stopped).
		 </apiDesc></apiReturn><apiParam><apiItemName>sequencer</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>The sequence command instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using the sequence command instance itself.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencer(mySequenceCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:willTrigger"><apiName>willTrigger</apiName><shortdesc>
		 Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>A value of true if a listener of the specified type will be triggered; false otherwise. 
		 </apiDesc></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.soma.core.interfaces:IModel"><apiName>IModel</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="com.soma.core.interfaces:IModel:com.soma.core.interfaces:IModel:dispose"><apiName>dispose</apiName><shortdesc>
		 Method that you can overwrite, called by the framework when the model is removed.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Method that you can overwrite, called by the framework when the model is removed.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:IModel:com.soma.core.interfaces:IModel:getName"><apiName>getName</apiName><shortdesc>
		 Retrieves the name of the model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>A String.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the name of the model.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:IModel:com.soma.core.interfaces:IModel:initialize"><apiName>initialize</apiName><shortdesc>
		 Method that you can overwrite, called by the framework when the model is initialized.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Method that you can overwrite, called by the framework when the model is initialized.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:IModel:com.soma.core.interfaces:IModel:setName"><apiName>setName</apiName><shortdesc>
		 Sets the name of the model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>A String.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets the name of the model.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.soma.core.interfaces:ISomaInjector"><apiName>ISomaInjector</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:createChildInjector"><apiName>createChildInjector</apiName><shortdesc>
		 Creates a child injector.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:ISomaInjector</apiOperationClassifier><apiDesc>A ISomaInjector instance.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates a child injector.
		 The child injector inherits the rules of its parents.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:createInstance"><apiName>createInstance</apiName><shortdesc>
		 Instantiates a new instance from a given class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>An instance of the Class target.
		 </apiDesc></apiReturn><apiParam><apiItemName>classTarget</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Instantiates a new instance from a given class.
		 This method will always creates a new instance, regardless of any singleton mapping.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:dispose"><apiName>dispose</apiName><shortdesc>
		 Destroys the injector elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Destroys the injector elements.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:getInstance"><apiName>getInstance</apiName><shortdesc>
		 Retrieves or instantiates an instance of the given Class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>An instance of the Class target.
		 </apiDesc></apiReturn><apiParam><apiItemName>classTarget</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData/><apiDesc>Injection name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves or instantiates an instance of the given Class.
		 This method needs a mapping rule, the instance can be a singleton or a new one.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:getParentInjector"><apiName>getParentInjector</apiName><shortdesc>
		 Retrieves the injector parent if any.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:ISomaInjector</apiOperationClassifier><apiDesc>A ISomaInjector instance.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the injector parent if any.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:hasMapping"><apiName>hasMapping</apiName><shortdesc>
		 Indicates wether a mapping rule exists for the given Class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>classTarget</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData/><apiDesc>Injection name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a mapping rule exists for the given Class.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:injectInto"><apiName>injectInto</apiName><shortdesc>
		 Performs injection into the given instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>An instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Performs injection into the given instance.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:mapSingletonOf"><apiName>mapSingletonOf</apiName><shortdesc>
		 Rule that defines the "whenAskFor" (usually an interface) to be injected with the same instance "useSingletonOf".</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>whenAskFor</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>useSingletonOf</apiItemName><apiType value="Class"/><apiDesc>A class.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData/><apiDesc>Injection name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Rule that defines the "whenAskFor" (usually an interface) to be injected with the same instance "useSingletonOf".
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:mapSingleton"><apiName>mapSingleton</apiName><shortdesc>
		 Rule that defines the "classTarget" to be injected with always the same instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>classTarget</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData/><apiDesc>Injection name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Rule that defines the "classTarget" to be injected with always the same instance.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:mapToInstance"><apiName>mapToInstance</apiName><shortdesc>
		 Rule that defines the "whenAskFor" to be injected the given instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>whenAskFor</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>An instance.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData/><apiDesc>Injection name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Rule that defines the "whenAskFor" to be injected the given instance.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:map"><apiName>map</apiName><shortdesc>
		 Rule that defines the "whenAskFor" to be injected with an instance of the "createClass" Class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>whenAskFor</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>createClass</apiItemName><apiType value="Class"/><apiDesc>A class.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData/><apiDesc>Injection name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Rule that defines the "whenAskFor" to be injected with an instance of the "createClass" Class.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:removeMapping"><apiName>removeMapping</apiName><shortdesc>
		 Removes a mapping rule exists for the given Class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>classTarget</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData/><apiDesc>Injection name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a mapping rule exists for the given Class.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.soma.core.interfaces:IResponder"><apiName>IResponder</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="com.soma.core.interfaces:IResponder:com.soma.core.interfaces:IResponder:fault"><apiName>fault</apiName><shortdesc>
		 Method that receives a fault object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>info</apiItemName><apiType value="Object"/><apiDesc>The fault Object.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Method that receives a fault object.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:IResponder:com.soma.core.interfaces:IResponder:result"><apiName>result</apiName><shortdesc>
		 Method that receives a success object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>THe success Object.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Method that receives a success object.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.soma.core.interfaces:IWire"><apiName>IWire</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="com.soma.core.interfaces:IWire:com.soma.core.interfaces:IWire:dispose"><apiName>dispose</apiName><shortdesc>
		 Method that you can overwrite, called by the framework when the model is removed.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Method that you can overwrite, called by the framework when the model is removed.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:IWire:com.soma.core.interfaces:IWire:getName"><apiName>getName</apiName><shortdesc>
		 Retrieves the name of the wire.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>A String.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the name of the wire.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:IWire:com.soma.core.interfaces:IWire:initialize"><apiName>initialize</apiName><shortdesc>
		 Method that you can overwrite, called by the framework when the model is initialized.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Method that you can overwrite, called by the framework when the model is initialized.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:IWire:com.soma.core.interfaces:IWire:setName"><apiName>setName</apiName><shortdesc>
		 Sets the name of the wire.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>A String.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets the name of the wire.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.soma.core.interfaces:ISomaReflector"><apiName>ISomaReflector</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="com.soma.core.interfaces:ISomaReflector:com.soma.core.interfaces:ISomaReflector:classExtendsOrImplements"><apiName>classExtendsOrImplements</apiName><shortdesc>
		 Indicates wether a Class or Class name extends or implements a given Class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>classOrClassName</apiItemName><apiType value="Object"/><apiDesc>A Class or a Class name.
		 </apiDesc></apiParam><apiParam><apiItemName>superclass</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>application</apiItemName><apiType value="flash.system:ApplicationDomain"/><apiData>null</apiData><apiDesc>An ApplicationDomain.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a Class or Class name extends or implements a given Class.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaReflector:com.soma.core.interfaces:ISomaReflector:dispose"><apiName>dispose</apiName><shortdesc>
		 Destroys the reflector elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Destroys the reflector elements.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaReflector:com.soma.core.interfaces:ISomaReflector:getClass"><apiName>getClass</apiName><shortdesc>
		 Retrieves a Class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>Class, Class name or instance. 
		 </apiDesc></apiParam><apiParam><apiItemName>applicationDomain</apiItemName><apiType value="flash.system:ApplicationDomain"/><apiData>null</apiData><apiDesc>An ApplicationDomain.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves a Class.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaReflector:com.soma.core.interfaces:ISomaReflector:getFQCN"><apiName>getFQCN</apiName><shortdesc>
		 Retrieves a fully qualified Class name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>A String.
		 </apiDesc></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>Class, Class name or instance. 
		 </apiDesc></apiParam><apiParam><apiItemName>replaceColons</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves a fully qualified Class name.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.soma.core.interfaces:ISequenceCommand"><apiName>ISequenceCommand</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:ICommand</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="com.soma.core.interfaces:ISequenceCommand:com.soma.core.interfaces:ISequenceCommand:executeNextCommand"><apiName>executeNextCommand</apiName><shortdesc>
		 Method used to execute the next command in the list of subcommands.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Method used to execute the next command in the list of subcommands.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISequenceCommand:com.soma.core.interfaces:ISequenceCommand:stop"><apiName>stop</apiName><shortdesc>
		 Stops the current sequence.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Stops the current sequence.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.soma.core.interfaces:IMediator"><apiName>IMediator</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:IWire</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="com.soma.core.interfaces:ICommand"><apiName>ICommand</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="com.soma.core.interfaces:ICommand:com.soma.core.interfaces:ICommand:execute"><apiName>execute</apiName><shortdesc>
		 Method called by the framework, this is the execution of the command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance dispatched to execute the command.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Method called by the framework, this is the execution of the command.
		 You can access from all the framework elements in this method (wires, commands, models, views, instance of the framework and stage).
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.soma.core.interfaces:ICommandASync"><apiName>ICommandASync</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:ICommand</apiBaseInterface><apiBaseInterface>com.soma.core.interfaces:IResponder</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><example><codeblock rev="3.0">
package {
	import flash.utils.clearTimeout;
	import flash.utils.setTimeout;
	import flash.events.Event;
	import com.soma.core.interfaces.ICommandASync;
	import com.soma.core.controller.Command;
	
	public class CommandASyncExample extends Command implements ICommandASync {
		private var _event:Event;
		private var _timer:int;
		public function CommandASyncExample() {
			
		}
		
		public function execute(event:Event):void {
			_event = event;
			_timer = setTimeout(result, 1000, {});
		}
		
		public function fault(info:Object):void {
			
		}
		
		public function result(data:Object):void {
			if (isPartOfASequence(_event)) {
				getSequencer(_event).executeNextCommand();
			}
			_event = null;
			clearTimeout(_timer);
		}
		
	}
}
	 </codeblock>
	 </example></apiClassifierDetail></apiClassifier><apiClassifier id="com.soma.core.interfaces:IParallelCommand"><apiName>IParallelCommand</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:ICommand</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="com.soma.core.interfaces:ISomaPlugin"><apiName>ISomaPlugin</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="com.soma.core.interfaces:ISomaPlugin:com.soma.core.interfaces:ISomaPlugin:dispose"><apiName>dispose</apiName><shortdesc>
		 Destroys the elements created by the plugin.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Destroys the elements created by the plugin.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaPlugin:com.soma.core.interfaces:ISomaPlugin:initialize"><apiName>initialize</apiName><shortdesc>
		 Initializes the plugin.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>pluginVO</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISomaPluginVO</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes the plugin.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier></apiPackage><apiPackage id="com.soma.core.mediator"><apiName>com.soma.core.mediator</apiName><apiClassifier id="com.soma.core.mediator:Mediator"><apiName>Mediator</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:IMediator</apiBaseInterface><apiBaseClassifier>com.soma.core.wire:Wire</apiBaseClassifier></apiClassifierDef><example>Map a view class to a mediator class
	 <codeblock rev="3.0">
package {
	import com.soma.core.interfaces.IMediator;
	import com.soma.core.mediator.Mediator;
	public class MyViewMediator extends Mediator implements IMediator {
		
		[Inject]
		public var myView:MyView;
		
		override public function initialize():void {
			// called when the mediator has been created and registered to the framework
			trace(myView == viewComponent);
		}
		
		override public function dispose():void {
			// called when the mediator has been destroyed by the framework
		}
		
	}
}
	 </codeblock>
	 Map a mediator class to a view class.
	 <codeblock rev="3.0">
mediators.mapView(MyView, MyViewMediator);
	 </codeblock>
	 Remove mapping.
	 <codeblock rev="3.0">
mediators.removeMapping(MyView);
	 </codeblock>
	 Retrieve a mediator.
	 <codeblock rev="3.0">
var mediator:MyViewMediator = mediators.getMediatorByView(view) as MyViewMediator;
	 </codeblock>
	 Trigger the creation of a mediator by adding a view to the display list.
	 <codeblock rev="3.0">
mediators.mapView(MyView, MyViewMediator);
var view:MyView = new MyView();
myDisplayObjectContainer.addChild(view);
// mediator instance created
var mediator:MyViewMediator = mediators.getMediatorByView(view) as MyViewMediator;
trace(mediators.hasMediator(view));
	 </codeblock>
	 </example></apiClassifierDetail><apiOperation id="com.soma.core.mediator:Mediator:creationComplete"><apiName>creationComplete</apiName><shortdesc>
		 Method that can you can override, called when if the view is part of the Flex Framework (not used for a pure AS3 view).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Method that can you can override, called when if the view is part of the Flex Framework (not used for a pure AS3 view).
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="com.soma.core.mediator:Mediator:Mediator"><apiName>Mediator</apiName><shortdesc>
		 Create an instance of a Mediator class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Create an instance of a Mediator class. The Mediator class should be extended and is usually automatically created (and removed) by the framework.
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="com.soma.core.mediator:SomaMediators"><apiName>SomaMediators</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="com.soma.core.mediator:SomaMediators:dispose"><apiName>dispose</apiName><shortdesc>
		 Destroys all the mediators and properties.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Destroys all the mediators and properties. The class will call the dispose method of each mediator instance.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.mediator:SomaMediators:getMediatorByView"><apiName>getMediatorByView</apiName><shortdesc>
		 Retrieves a mediator instance using its view.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IMediator</apiOperationClassifier><apiDesc>A mediator instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>view</apiItemName><apiType value="Object"/><apiDesc>View that the mediator represents.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves a mediator instance using its view.
		 </apiDesc><example><codeblock rev="3.0">var mediator:MyViewMediator = mediators.getMediatorByView(myView) as MyViewMediator;</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.mediator:SomaMediators:hasMediator"><apiName>hasMediator</apiName><shortdesc>
		 Indicates wether a mediator has been created by the framework for a specific view.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>view</apiItemName><apiType value="Object"/><apiDesc>View that the mediator represents.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a mediator has been created by the framework for a specific view.
		 </apiDesc><example><codeblock rev="3.0">mediators.hasMediator(myView);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.mediator:SomaMediators:isMapped"><apiName>isMapped</apiName><shortdesc>
		 Indicates wether a view Class has a mapping rule.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>viewClass</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a view Class has a mapping rule.
		 </apiDesc><example><codeblock rev="3.0">mediators.isMapped(MyView);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.mediator:SomaMediators:mapView"><apiName>mapView</apiName><shortdesc>
		 Map a mediator Class to a view Class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>viewClass</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>mediatorClass</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Map a mediator Class to a view Class.
		 </apiDesc><example><codeblock rev="3.0">mediators.mapView(MyView, MyViewMediator);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.mediator:SomaMediators:removeMapping"><apiName>removeMapping</apiName><shortdesc>
		 Remove a mapping rule for a specific Class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>viewClass</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Remove a mapping rule for a specific Class.
		 </apiDesc><example><codeblock rev="3.0">mediators.removeMapping(MyView);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiConstructor id="com.soma.core.mediator:SomaMediators:SomaMediators"><apiName>SomaMediators</apiName><shortdesc>
		 Create an instance of the SomaWires class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISoma</apiOperationClassifier><apiDesc>Framework instance.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Create an instance of the SomaWires class. Should not be directly instantiated, the framework will instantiate the class.
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage><apiPackage id="com.soma.core.model"><apiName>com.soma.core.model</apiName><apiClassifier id="com.soma.core.model:Model"><apiName>Model</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:IModel</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><example>Create a model.
	 <codeblock rev="3.0">
package  {
	import com.soma.core.interfaces.IModel;
	import com.soma.core.model.Model;
	
	public class ModelExample extends Model implements IModel {
		
		public static const NAME:String = "Model example name";
		
		public function ModelExample() {
			super(NAME);
		}
		
		override protected function initialize():void {
			// called when the model has been registered to the framework
			data = new XML('&lt;myXML/&gt;');
			// you can use the model as a dispatcher (default dispatcher is the framework instance) to dispatch commands, example:
			dispatchEvent(new MyEvent(MyEvent.DATA_READY));
		}
		
		override protected function dispose():void {
			// called when the model has been removed from the framework
			data = null;
		}
		
	}
}
	 </codeblock>
	 Add a model.
	 <codeblock rev="3.0">
addModel(ModelExample.NAME, new ModelExample());
	 </codeblock>
	 Remove a model.
	 <codeblock rev="3.0">
removeModel(ModelExample.NAME);
	 </codeblock>
	 Retrieve a model.
	 <codeblock rev="3.0">
var model:ModelExample = getModel(ModelExample.NAME) as ModelExample;
	 </codeblock>
	 Create a shortcut to retrieve a model is a good practice (not necessary with injection enabled).
	 <codeblock rev="3.0">
private function get modelExample():ModelExample {
	return getModel(ModelExample.NAME) as ModelExample;
}
private function doSomething():void {
	trace(modelExample.data);
}
	 </codeblock>
	 </example></apiClassifierDetail><apiOperation id="com.soma.core.model:Model:addEventListener"><apiName>addEventListener</apiName><shortdesc>
		 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener function that processes the event.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the listener works in the capture phase or the target and bubbling phases.
		 </apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>The priority level of the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the reference to the listener is strong or weak.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
		 Dispatches an event into the event flow.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A value of true unless preventDefault() is called on the event, in which case it returns false.
		 </apiDesc></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>The event object dispatched into the event flow.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Dispatches an event into the event flow. The event target is the EventDispatcher object upon which dispatchEvent() is called.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:dispose"><apiName>dispose</apiName><shortdesc>
		 Method that can you can override, called when the model has been removed from the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Method that can you can override, called when the model has been removed from the framework.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:getName"><apiName>getName</apiName><shortdesc>
		 Retrieves the name of the model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>A String.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the name of the model.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
		 Checks whether the EventDispatcher object has any listeners registered for a specific type of event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A value of true if a listener of the specified type is registered; false otherwise.
		 </apiDesc></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Checks whether the EventDispatcher object has any listeners registered for a specific type of event.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:initialize"><apiName>initialize</apiName><shortdesc>
		 Method that can you can override, called when the model has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Method that can you can override, called when the model has been registered to the framework.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:postConstruct"><apiName>postConstruct</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
		 Removes a listener from the EventDispatcher object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event. 
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener object to remove. 
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies whether the listener was registered for the capture phase or the target and bubbling phases.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a listener from the EventDispatcher object. If there is no matching listener registered with the EventDispatcher object, a call to this method has no effect.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:setName"><apiName>setName</apiName><shortdesc>
		 Sets the name of the model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/><apiDesc>A String.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets the name of the model.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:willTrigger"><apiName>willTrigger</apiName><shortdesc>
		 Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A value of true if a listener of the specified type will be triggered; false otherwise. 
		 </apiDesc></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="com.soma.core.model:Model:Model"><apiName>Model</apiName><shortdesc>
		 Create an instance of a Model class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Name of the model.
		 </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Data of the model.
		 </apiDesc></apiParam><apiParam><apiItemName>dispatcher</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiData>null</apiData><apiDesc>EventDispatcher instance that can be used to dispatch commands.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Create an instance of a Model class. The Model class should be extended.
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="com.soma.core.model:SomaModels"><apiName>SomaModels</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="com.soma.core.model:SomaModels:addModel"><apiName>addModel</apiName><shortdesc>
		 Registers a model to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>The model instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam><apiParam><apiItemName>model</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>Instance of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a model to the framework.
		 </apiDesc><example><codeblock rev="3.0">addModel(MyModel.NAME, new MyModel());</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:SomaModels:dispose"><apiName>dispose</apiName><shortdesc>
		 Destroys all the models and properties.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Destroys all the models and properties. The class will call the dispose method of each model instance.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:SomaModels:getModel"><apiName>getModel</apiName><shortdesc>
		 Retrieves the model instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>A IModel instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the model instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myModel:MyModel = getModel(MyModel.NAME) as MyModel;</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:SomaModels:getModels"><apiName>getModels</apiName><shortdesc>
		 Retrieves all the model instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.utils:Dictionary"/><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the model instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var models:Dictionary = getModels();</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:SomaModels:hasModel"><apiName>hasModel</apiName><shortdesc>
		 Indicates wether a model has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a model has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:SomaModels:removeModel"><apiName>removeModel</apiName><shortdesc>
		 Removes a model from the framework and call the dispose method of this model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a model from the framework and call the dispose method of this model.
		 </apiDesc><example><codeblock rev="3.0">removeModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiConstructor id="com.soma.core.model:SomaModels:SomaModels"><apiName>SomaModels</apiName><shortdesc>
		 Create an instance of the SomaModels class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISoma</apiOperationClassifier><apiDesc>Framework instance.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Create an instance of the SomaModels class. Should not be directly instantiated, the framework will instantiate the class.
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage><apiPackage id="com.soma.core.view"><apiName>com.soma.core.view</apiName><apiClassifier id="com.soma.core.view:SomaViews"><apiName>SomaViews</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><example>Add a view.
	 <codeblock rev="3.0">
addView(MySprite.NAME, new MySprite());
	 </codeblock>
	 Remove a view.
	 <codeblock rev="3.0">
removeView(MySprite.NAME);
	 </codeblock>
	 Retrieve a view.
	 <codeblock rev="3.0">
var sprite:MySprite = getView(MySprite.NAME) as MySprite;
	 </codeblock>
	 Create a shortcut to retrieve a view is a good practice (not necessary with injection enabled).
	 <codeblock rev="3.0">
private function get mySprite():MySprite {
	return getView(MySprite.NAME) as MySprite;
}
private function doSomething():void {
	trace(mySprite);
}
	 </codeblock>
	 </example></apiClassifierDetail><apiOperation id="com.soma.core.view:SomaViews:addView"><apiName>addView</apiName><shortdesc>
		 Registers a view to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>The view instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam><apiParam><apiItemName>view</apiItemName><apiType value="Object"/><apiDesc>Instance of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a view to the framework.
		 </apiDesc><example><codeblock rev="3.0">addView(MySprite.NAME, new MySprite());</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.view:SomaViews:dispose"><apiName>dispose</apiName><shortdesc>
		 Destroys all the views and properties.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Destroys all the views and properties. The class will call the dispose method of each view instance.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.view:SomaViews:getView"><apiName>getView</apiName><shortdesc>
		 Retrieves the view instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>An Object instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the view instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var mySprite:MySprite = getView(MySprite.NAME) as MySprite;</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.view:SomaViews:getViews"><apiName>getViews</apiName><shortdesc>
		 Retrieves all the view instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.utils:Dictionary"/><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the view instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var sprites:Dictionary = getViews();</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.view:SomaViews:hasView"><apiName>hasView</apiName><shortdesc>
		 Indicates wether a view has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a view has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.view:SomaViews:removeView"><apiName>removeView</apiName><shortdesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.
		 </apiDesc><example><codeblock rev="3.0">removeView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiConstructor id="com.soma.core.view:SomaViews:SomaViews"><apiName>SomaViews</apiName><shortdesc>
		 Create an instance of the SomaViews class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Create an instance of the SomaViews class. Should not be directly instantiated, the framework will instantiate the class.
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage><apiPackage id="com.soma.core.wire"><apiName>com.soma.core.wire</apiName><apiClassifier id="com.soma.core.wire:Wire"><apiName>Wire</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:IWire</apiBaseInterface><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><example>Create a wire
	 <codeblock rev="3.0">
package  {
	import com.soma.core.wire.Wire;
	import com.soma.core.interfaces.IWire;
	
	public class WireExample extends Wire implements IWire {
		
		public static const NAME:String = "Wire example name";
		
		public function WireExample() {
			super(NAME);
		}
		
		override protected function initialize():void {
			// called when the wire has been registered to the framework
		}
		
		override protected function dispose():void {
			// called when the wire has been removed from the framework
		}
		
	}
}
	 </codeblock>
	 Add a wire.
	 <codeblock rev="3.0">
addWire(WireExample.NAME, new WireExample());
	 </codeblock>
	 Remove a wire.
	 <codeblock rev="3.0">
removeWire(WireExample.NAME);
	 </codeblock>
	 Retrieve a wire.
	 <codeblock rev="3.0">
var wire:WireExample = getWire(WireExample.NAME) as WireExample;
	 </codeblock>
	 Create a shortcut to retrieve a wire is a good practice (not necessary with injection enabled).
	 <codeblock rev="3.0">
private function get wireExample():WireExample {
	return getWire(WireExample.NAME) as WireExample;
}
private function doSomething():void {
	trace(wireExample.myWireProperty);
}
	 </codeblock>
	 Listening to a command in a wire.
	 <codeblock rev="3.0">
override protected function initialize():void {
	// called when the wire has been registered to the framework
	 addEventListener(MyEvent.DO_SOMETHING, handler);
}
	 </codeblock>
	 Stopping the execution of a command in a wire.
	 You need to set the cancelable property of the event to true when you dispatch it.
	 Any command can be stopped using the flash event built-in method: preventDefault.
	 <codeblock rev="3.0">
override protected function initialize():void {
	// called when the wire has been registered to the framework
	 addEventListener(MyEvent.DO_SOMETHING, myEventHandler);
}
private function myEventHandler(event:MyEvent):void {
	e.preventDefault();
}
	 </codeblock>
	 </example></apiClassifierDetail><apiOperation id="com.soma.core.wire:Wire:addCommand"><apiName>addCommand</apiName><shortdesc>
		 Registers a command to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam><apiParam><apiItemName>command</apiItemName><apiType value="Class"/><apiDesc>Class that will be executed when a command has been dispatched.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a command to the framework.
		 </apiDesc><example><codeblock rev="3.0">addCommand(MyEvent.DOSOMETHING, MyCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:addEventListener"><apiName>addEventListener</apiName><shortdesc>
		 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener function that processes the event.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the listener works in the capture phase or the target and bubbling phases.
		 </apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>The priority level of the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the reference to the listener is strong or weak.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:addModel"><apiName>addModel</apiName><shortdesc>
		 Registers a model to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>The model instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam><apiParam><apiItemName>model</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>Instance of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a model to the framework.
		 </apiDesc><example><codeblock rev="3.0">addModel(MyModel.NAME, new MyModel());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:addView"><apiName>addView</apiName><shortdesc>
		 Registers a view to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Object"/><apiDesc>The view instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam><apiParam><apiItemName>view</apiItemName><apiType value="Object"/><apiDesc>Instance of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a view to the framework.
		 </apiDesc><example><codeblock rev="3.0">addView(MySprite.NAME, new MySprite());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:addWire"><apiName>addWire</apiName><shortdesc>
		 Registers a wire to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>The wire instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam><apiParam><apiItemName>wire</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>Instance of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a wire to the framework.
		 </apiDesc><example><codeblock rev="3.0">addWire(MyWire.NAME, new MyWire());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
		 Dispatches an event into the event flow.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A value of true unless preventDefault() is called on the event, in which case it returns false.
		 </apiDesc></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>The event object dispatched into the event flow.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Dispatches an event into the event flow. The event target is the EventDispatcher object upon which dispatchEvent() is called.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:dispose"><apiName>dispose</apiName><shortdesc>
		 Method that can you can override, called when the wire has been removed from the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Method that can you can override, called when the wire has been removed from the framework.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:getCommand"><apiName>getCommand</apiName><shortdesc>
		 Retrieves the command class that has been registered with a command name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Class"/><apiDesc>A class.
		 </apiDesc></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the command class that has been registered with a command name.
		 </apiDesc><example><codeblock rev="3.0">var commandClass:ICommand = getCommand(MyEvent.DOSOMETHING) as ICommand;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getCommands"><apiName>getCommands</apiName><shortdesc>
		 Retrieves all the command names (event type) that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Array"/><apiDesc>An Array of String (command name).
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the command names (event type) that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var commands:Array = getCommands();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getLastSequencer"><apiName>getLastSequencer</apiName><shortdesc>
		 Retrieves the last sequence command that has been instantiated in the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>An ISequenceCommand instance.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the last sequence command that has been instantiated in the framework.
		 </apiDesc><example><codeblock rev="3.0">var lastSequencer:ISequenceCommand = getLastSequencer();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getModel"><apiName>getModel</apiName><shortdesc>
		 Retrieves the model instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>A IModel instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the model instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myModel:MyModel = getModel(MyModel.NAME) as MyModel;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getModels"><apiName>getModels</apiName><shortdesc>
		 Retrieves all the model instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="flash.utils:Dictionary"/><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the model instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var models:Dictionary = getModels();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getName"><apiName>getName</apiName><shortdesc>
		 Retrieves the name of the wire.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>A String.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the name of the wire.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:getRunningSequencers"><apiName>getRunningSequencers</apiName><shortdesc>
		 Retrieves all the sequence command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Array"/><apiDesc>An Array of ISequenceCommand instances.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the sequence command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">var sequencers:Array = getRunningSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getSequencer"><apiName>getSequencer</apiName><shortdesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>A sequencer (ISequenceCommand).
		 </apiDesc></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var sequencer:ISequenceCommand = getSequencer(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getView"><apiName>getView</apiName><shortdesc>
		 Retrieves the view instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Object"/><apiDesc>An Object instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the view instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var mySprite:MySprite = getView(MySprite.NAME) as MySprite;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getViews"><apiName>getViews</apiName><shortdesc>
		 Retrieves all the view instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="flash.utils:Dictionary"/><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the view instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var sprites:Dictionary = getViews();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getWire"><apiName>getWire</apiName><shortdesc>
		 Retrieves the wire instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>A wire instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the wire instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myWire:MyWire = getWire(MyWire.NAME) as MyWire;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getWires"><apiName>getWires</apiName><shortdesc>
		 Retrieves all the wire instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="flash.utils:Dictionary"/><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the wire instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var wires:Dictionary = getWires();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:hasCommand"><apiName>hasCommand</apiName><shortdesc>
		 Indicates wether a command has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a command has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
		 Checks whether the EventDispatcher object has any listeners registered for a specific type of event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A value of true if a listener of the specified type is registered; false otherwise.
		 </apiDesc></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Checks whether the EventDispatcher object has any listeners registered for a specific type of event.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:hasModel"><apiName>hasModel</apiName><shortdesc>
		 Indicates wether a model has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a model has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:hasView"><apiName>hasView</apiName><shortdesc>
		 Indicates wether a view has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a view has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:hasWire"><apiName>hasWire</apiName><shortdesc>
		 Indicates wether a wire has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a wire has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:initialize"><apiName>initialize</apiName><shortdesc>
		 Method that can you can override, called when the wire has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Method that can you can override, called when the wire has been registered to the framework.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:isPartOfASequence"><apiName>isPartOfASequence</apiName><shortdesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.
		 </apiDesc><example><codeblock rev="3.0">var inSequence:Boolean = isPartOfASequence(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:postConstruct"><apiName>postConstruct</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:removeCommand"><apiName>removeCommand</apiName><shortdesc>
		 Removes a command from the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a command from the framework.
		 </apiDesc><example><codeblock rev="3.0">removeCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
		 Removes a listener from the EventDispatcher object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event. 
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener object to remove. 
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies whether the listener was registered for the capture phase or the target and bubbling phases.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a listener from the EventDispatcher object. If there is no matching listener registered with the EventDispatcher object, a call to this method has no effect.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:removeModel"><apiName>removeModel</apiName><shortdesc>
		 Removes a model from the framework and call the dispose method of this model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a model from the framework and call the dispose method of this model.
		 </apiDesc><example><codeblock rev="3.0">removeModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:removeView"><apiName>removeView</apiName><shortdesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.
		 </apiDesc><example><codeblock rev="3.0">removeView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:removeWire"><apiName>removeWire</apiName><shortdesc>
		 Removes a wire from the framework and call the dispose method of this wire.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a wire from the framework and call the dispose method of this wire.
		 </apiDesc><example><codeblock rev="3.0">removeWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:setName"><apiName>setName</apiName><shortdesc>
		 Sets the name of the wire.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>A String.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets the name of the wire.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:stopAllSequencers"><apiName>stopAllSequencers</apiName><shortdesc>
		 Stops all the sequence command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Stops all the sequence command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">stopAllSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:stopSequencerWithEvent"><apiName>stopSequencerWithEvent</apiName><shortdesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean (true if a sequence command has been stopped).
		 </apiDesc></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencerWithEvent(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:stopSequencer"><apiName>stopSequencer</apiName><shortdesc>
		 Stops a sequence command using the sequence command instance itself.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean (true if the sequence command has been stopped).
		 </apiDesc></apiReturn><apiParam><apiItemName>sequencer</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>The sequence command instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using the sequence command instance itself.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencer(mySequenceCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:willTrigger"><apiName>willTrigger</apiName><shortdesc>
		 Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A value of true if a listener of the specified type will be triggered; false otherwise. 
		 </apiDesc></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="com.soma.core.wire:Wire:Wire"><apiName>Wire</apiName><shortdesc>
		 Create an instance of a Wire class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Create an instance of a Wire class. The Wire class should be extended.
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="com.soma.core.wire:SomaWires"><apiName>SomaWires</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="com.soma.core.wire:SomaWires:addWire"><apiName>addWire</apiName><shortdesc>
		 Registers a wire to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>The wire instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam><apiParam><apiItemName>wire</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>Instance of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a wire to the framework.
		 </apiDesc><example><codeblock rev="3.0">addWire(MyWire.NAME, new MyWire());</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:SomaWires:dispose"><apiName>dispose</apiName><shortdesc>
		 Destroys all the models and properties.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Destroys all the models and properties. The class will call the dispose method of each model instance.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:SomaWires:getWire"><apiName>getWire</apiName><shortdesc>
		 Retrieves the wire instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>A wire instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the wire instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myWire:MyWire = getWire(MyWire.NAME) as MyWire;</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:SomaWires:getWires"><apiName>getWires</apiName><shortdesc>
		 Retrieves all the wire instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.utils:Dictionary"/><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the wire instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var wires:Dictionary = getWires();</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:SomaWires:hasWire"><apiName>hasWire</apiName><shortdesc>
		 Indicates wether a wire has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a wire has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:SomaWires:removeWire"><apiName>removeWire</apiName><shortdesc>
		 Removes a wire from the framework and call the dispose method of this wire.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a wire from the framework and call the dispose method of this wire.
		 </apiDesc><example><codeblock rev="3.0">removeWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiConstructor id="com.soma.core.wire:SomaWires:SomaWires"><apiName>SomaWires</apiName><shortdesc>
		 Create an instance of the SomaWires class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISoma</apiOperationClassifier><apiDesc>Framework instance.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Create an instance of the SomaWires class. Should not be directly instantiated, the framework will instantiate the class.
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage><apiPackage id="com.soma.core"><apiName>com.soma.core</apiName><apiClassifier id="com.soma.core:Soma"><apiName>Soma</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:ISoma</apiBaseInterface><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><example>To get started, create a instance of a class that extends the Soma class and implements the ISoma interface.
	 <codeblock rev="3.0">
package  {
	import com.soma.core.interfaces.ISoma;
	import com.soma.core.di.SomaInjector;
	import flash.display.Sprite;
	
	public class Main extends Sprite {
		
		private var _app:ISoma;
		
		public function Main() {
			// injection disabled
			_app = new SomaApplication(stage);
			// injection enabled
			_app = new SomaApplication(stage, SomaInjector);
		}
		
	}
}
	 </codeblock>
	 <codeblock rev="3.0">
package  {
	import com.soma.core.Soma;
	import com.soma.core.interfaces.ISoma;
	import flash.display.Stage;
	
	public class SomaApplication extends Soma implements ISoma {
		public function SomaApplication(stage:Stage, injectorClass:Class) {
			super(stage, injector);
		}
		
		override protected function initialize():void {
			
		}
		override protected function registerCommands():void {
			
		}
		override protected function registerModels():void {
			
		}
		override protected function registerPlugins():void {
			
		}
		override protected function registerViews():void {
			
		}
		override protected function registerWires():void {
			
		}
		
		override protected function start():void {
			
		}
	}
}
	 </codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="com.soma.core:Soma:addCommand"><apiName>addCommand</apiName><shortdesc>
		 Registers a command to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam><apiParam><apiItemName>command</apiItemName><apiType value="Class"/><apiDesc>Class that will be executed when a command has been dispatched.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a command to the framework.
		 </apiDesc><example><codeblock rev="3.0">addCommand(MyEvent.DOSOMETHING, MyCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:addModel"><apiName>addModel</apiName><shortdesc>
		 Registers a model to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>The model instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam><apiParam><apiItemName>model</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>Instance of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a model to the framework.
		 </apiDesc><example><codeblock rev="3.0">addModel(MyModel.NAME, new MyModel());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:addView"><apiName>addView</apiName><shortdesc>
		 Registers a view to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Object"/><apiDesc>The view instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam><apiParam><apiItemName>view</apiItemName><apiType value="Object"/><apiDesc>Instance of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a view to the framework.
		 </apiDesc><example><codeblock rev="3.0">addView(MySprite.NAME, new MySprite());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:addWire"><apiName>addWire</apiName><shortdesc>
		 Registers a wire to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>The wire instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam><apiParam><apiItemName>wire</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>Instance of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a wire to the framework.
		 </apiDesc><example><codeblock rev="3.0">addWire(MyWire.NAME, new MyWire());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:createPluginFromClassName"><apiName>createPluginFromClassName</apiName><shortdesc>
		 Creates a plugin instance using the class name and the getDefinitionByName method.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:ISomaPlugin</apiOperationClassifier><apiDesc>An instance of the plugin.
		 </apiDesc></apiReturn><apiParam><apiItemName>pluginClassName</apiItemName><apiType value="String"/><apiDesc>Class name of the plugin that will be instantiated.
		 </apiDesc></apiParam><apiParam><apiItemName>pluginVO</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISomaPluginVO</apiOperationClassifier><apiDesc>Value Object class of the plugin.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a plugin instance using the class name and the getDefinitionByName method.
		 </apiDesc><example><codeblock rev="3.0">
var pluginVO:SomaDebuggerVO = new SomaDebuggerVO(this, SomaDebugger.NAME_DEFAULT, getCommands(), true, false);
var debugger:SomaDebugger = createPluginFromClassName("com.soma.core.debugger.SomaDebugger", pluginVO) as SomaDebugger;
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:createPlugin"><apiName>createPlugin</apiName><shortdesc>
		 Creates a plugin instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:ISomaPlugin</apiOperationClassifier><apiDesc>An instance of the plugin.
		 </apiDesc></apiReturn><apiParam><apiItemName>plugin</apiItemName><apiType value="Class"/><apiDesc>Class of the plugin that will be instantiated.
		 </apiDesc></apiParam><apiParam><apiItemName>pluginVO</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISomaPluginVO</apiOperationClassifier><apiDesc>Value Object class of the plugin.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a plugin instance.
		 </apiDesc><example><codeblock rev="3.0">
var pluginVO:SomaDebuggerVO = new SomaDebuggerVO(this, SomaDebugger.NAME_DEFAULT, getCommands(), true, false);
var debugger:SomaDebugger = createPlugin(SomaDebugger, pluginVO) as SomaDebugger;
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:dispose"><apiName>dispose</apiName><shortdesc>
		 Destroys the SomaCore core classes and elements registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Destroys the SomaCore core classes and elements registered to the framework.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:getCommand"><apiName>getCommand</apiName><shortdesc>
		 Retrieves the command class that has been registered with a command name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Class"/><apiDesc>A class.
		 </apiDesc></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the command class that has been registered with a command name.
		 </apiDesc><example><codeblock rev="3.0">var commandClass:ICommand = getCommand(MyEvent.DOSOMETHING) as ICommand;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:getCommands"><apiName>getCommands</apiName><shortdesc>
		 Retrieves all the command names (event type) that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Array"/><apiDesc>An Array of String (command name).
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the command names (event type) that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var commands:Array = getCommands();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:getLastSequencer"><apiName>getLastSequencer</apiName><shortdesc>
		 Retrieves the last sequence command that has been instantiated in the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>An ISequenceCommand instance.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the last sequence command that has been instantiated in the framework.
		 </apiDesc><example><codeblock rev="3.0">var lastSequencer:ISequenceCommand = getLastSequencer();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:getModel"><apiName>getModel</apiName><shortdesc>
		 Retrieves the model instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>A IModel instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the model instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myModel:MyModel = getModel(MyModel.NAME) as MyModel;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:getModels"><apiName>getModels</apiName><shortdesc>
		 Retrieves all the model instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="flash.utils:Dictionary"/><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the model instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var models:Dictionary = getModels();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:getRunningSequencers"><apiName>getRunningSequencers</apiName><shortdesc>
		 Retrieves all the sequence command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Array"/><apiDesc>An Array of ISequenceCommand instances.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the sequence command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">var sequencers:Array = getRunningSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:getSequencer"><apiName>getSequencer</apiName><shortdesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>A sequencer (ISequenceCommand).
		 </apiDesc></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var sequencer:ISequenceCommand = getSequencer(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:getView"><apiName>getView</apiName><shortdesc>
		 Retrieves the view instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Object"/><apiDesc>An Object instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the view instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var mySprite:MySprite = getView(MySprite.NAME) as MySprite;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:getViews"><apiName>getViews</apiName><shortdesc>
		 Retrieves all the view instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="flash.utils:Dictionary"/><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the view instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var sprites:Dictionary = getViews();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:getWire"><apiName>getWire</apiName><shortdesc>
		 Retrieves the wire instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>A wire instance.
		 </apiDesc></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the wire instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myWire:MyWire = getWire(MyWire.NAME) as MyWire;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:getWires"><apiName>getWires</apiName><shortdesc>
		 Retrieves all the wire instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="flash.utils:Dictionary"/><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the wire instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var wires:Dictionary = getWires();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:hasCommand"><apiName>hasCommand</apiName><shortdesc>
		 Indicates wether a command has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a command has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:hasModel"><apiName>hasModel</apiName><shortdesc>
		 Indicates wether a model has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a model has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:hasView"><apiName>hasView</apiName><shortdesc>
		 Indicates wether a view has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a view has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:hasWire"><apiName>hasWire</apiName><shortdesc>
		 Indicates wether a wire has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a wire has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:protected:initialize"><apiName>initialize</apiName><shortdesc> 
		 Method that you can optionally overwrite to initialize elements before anything else.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can optionally overwrite to initialize elements before anything else.
		 </apiDesc><example><codeblock rev="3.0">addModel(MyModel.NAME, new MyModel());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:isPartOfASequence"><apiName>isPartOfASequence</apiName><shortdesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean.
		 </apiDesc></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.
		 </apiDesc><example><codeblock rev="3.0">var inSequence:Boolean = isPartOfASequence(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:protected:registerCommands"><apiName>registerCommands</apiName><shortdesc> 
		 Method that you can optionally overwrite to register commands (mapping events to command classes) to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can optionally overwrite to register commands (mapping events to command classes) to the framework.
		 </apiDesc><example><codeblock rev="3.0">addCommand(MyEvent.DOSOMETING, MyCommandClass);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:protected:registerModels"><apiName>registerModels</apiName><shortdesc> 
		 Method that you can optionally overwrite to register models to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can optionally overwrite to register models to the framework.
		 </apiDesc><example><codeblock rev="3.0">addModel(MyModel.NAME, new MyModel());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:protected:registerPlugins"><apiName>registerPlugins</apiName><shortdesc> 
		 Method that you can optionally overwrite to register plugins to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can optionally overwrite to register plugins to the framework.
		 </apiDesc><example><codeblock rev="3.0">
var pluginVO:SomaDebuggerVO = new SomaDebuggerVO(this, SomaDebugger.NAME_DEFAULT, getCommands(), true, false);
var debugger:SomaDebugger = createPlugin(SomaDebugger, pluginVO) as SomaDebugger;
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:protected:registerViews"><apiName>registerViews</apiName><shortdesc> 
		 Method that you can optionally overwrite to register views to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can optionally overwrite to register views to the framework.
		 </apiDesc><example><codeblock rev="3.0">addView(MySprite.NAME, new MySprite());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:protected:registerWires"><apiName>registerWires</apiName><shortdesc> 
		 Method that you can optionally overwrite to register wires to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can optionally overwrite to register wires to the framework.
		 </apiDesc><example><codeblock rev="3.0">addWire(MyWire.NAME, new MyWire());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:removeCommand"><apiName>removeCommand</apiName><shortdesc>
		 Removes a command from the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a command from the framework.
		 </apiDesc><example><codeblock rev="3.0">removeCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:removeModel"><apiName>removeModel</apiName><shortdesc>
		 Removes a model from the framework and call the dispose method of this model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a model from the framework and call the dispose method of this model.
		 </apiDesc><example><codeblock rev="3.0">removeModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:removeView"><apiName>removeView</apiName><shortdesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.
		 </apiDesc><example><codeblock rev="3.0">removeView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:removeWire"><apiName>removeWire</apiName><shortdesc>
		 Removes a wire from the framework and call the dispose method of this wire.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a wire from the framework and call the dispose method of this wire.
		 </apiDesc><example><codeblock rev="3.0">removeWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:setup"><apiName>setup</apiName><shortdesc>
		 Register elements that the frameworks needs to be ready, such as the stage and the optional injector class (default is SomaInjector).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>stage</apiItemName><apiType value="flash.display:Stage"/><apiData>null</apiData><apiDesc>The stage is used as a global EventDispatcher (as well as the Soma class), and is required to instantiate the framework.
		 </apiDesc></apiParam><apiParam><apiItemName>injectorClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Class that must extend ISomaInjector.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Register elements that the frameworks needs to be ready, such as the stage and the optional injector class (default is SomaInjector).
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core:Soma:protected:start"><apiName>start</apiName><shortdesc> 
		 Method that you can optionally overwrite to start your own after that the framework has registered all the elements (models, views, commands, wires, plugins).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can optionally overwrite to start your own after that the framework has registered all the elements (models, views, commands, wires, plugins).
		 </apiDesc><example><codeblock rev="3.0">addWire(MyWire.NAME, new MyWire());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:stopAllSequencers"><apiName>stopAllSequencers</apiName><shortdesc>
		 Stops all the sequence command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Stops all the sequence command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">stopAllSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:stopSequencerWithEvent"><apiName>stopSequencerWithEvent</apiName><shortdesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean (true if a sequence command has been stopped).
		 </apiDesc></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencerWithEvent(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core:Soma:stopSequencer"><apiName>stopSequencer</apiName><shortdesc>
		 Stops a sequence command using the sequence command instance itself.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="Boolean"/><apiDesc>A Boolean (true if the sequence command has been stopped).
		 </apiDesc></apiReturn><apiParam><apiItemName>sequencer</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>The sequence command instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using the sequence command instance itself.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencer(mySequenceCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiConstructor id="com.soma.core:Soma:Soma"><apiName>Soma</apiName><shortdesc>
		 Create an instance of the SomaCore class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>stage</apiItemName><apiType value="flash.display:Stage"/><apiData>null</apiData><apiDesc>The stage is used as a global EventDispatcher (as well as the Soma class), and is required to instantiate the framework.
		 </apiDesc></apiParam><apiParam><apiItemName>injectorClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Class that must extend ISomaInjector.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Create an instance of the SomaCore class.
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage></allClasses>