<?xml version="1.0" encoding="UTF-8"?><apiPackage id="com.soma.core.controller"><apiName>com.soma.core.controller</apiName><apiDetail/><apiClassifier id="com.soma.core.controller:Command"><apiName>Command</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 Command class that will be instantiated when a registered event is dispatched, the framework will automatically call the execute method.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 Command class that will be instantiated when a registered event is dispatched, the framework will automatically call the execute method.
	 </apiDesc><example>Register a command.
	 <codeblock rev="3.0">
addCommand(MyEvent.DOSOMETHING, CommandExample);
dispatchEvent(new MyEvent(MyEvent.DOSOMETHING));
	 </codeblock>
	 Create a normal command.
	 <codeblock rev="3.0">
package  {
	import flash.events.Event;
	import com.soma.core.interfaces.ICommand;
	import com.soma.core.controller.Command;
	
	public class CommandExample extends Command implements ICommand {
		public function execute(event:Event):void {
			
		}
		
	}
}
	 </codeblock>
	 Create an asynchronous command.
	 <codeblock rev="3.0">
package  {
	import flash.events.Event;
	import com.soma.core.interfaces.ICommandASync;
	import com.soma.core.controller.Command;
	
	public class CommandASyncExample extends Command implements ICommandASync {
		public function CommandASyncExample() {
			
		}
		
		public function execute(event:Event):void {
			
		}
		
		public function fault(info:Object):void {
			
		}
		
		public function result(data:Object):void {
			
		}
		
	}
}
	 </codeblock>
	 </example></apiClassifierDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link><link href="com.soma.core.controller.xml#ParallelCommand"><linktext>com.soma.core.controller.ParallelCommand</linktext></link><link href="com.soma.core.controller.xml#SequenceCommand"><linktext>com.soma.core.controller.SequenceCommand</linktext></link><link href="com.soma.core.interfaces.xml#ICommand"><linktext>com.soma.core.interfaces.ICommand</linktext></link><link href="com.soma.core.interfaces.xml#ICommandASync"><linktext>com.soma.core.interfaces.ICommandASync</linktext></link></related-links><apiConstructor id="com.soma.core.controller:Command:Command"><apiName>Command</apiName><shortdesc>
		 Create an instance of the Command class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Create an instance of the Command class. Should not be directly instantiated, the framework will instantiate the class.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.soma.core.controller:Command:addCommand"><apiName>addCommand</apiName><shortdesc>
		 Registers a command to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam><apiParam><apiItemName>command</apiItemName><apiType value="Class"/><apiDesc>Class that will be executed when a command has been dispatched.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a command to the framework.
		 </apiDesc><example><codeblock rev="3.0">addCommand(MyEvent.DOSOMETHING, MyCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:addEventListener"><apiName>addEventListener</apiName><shortdesc>
		 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener function that processes the event.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the listener works in the capture phase or the target and bubbling phases.
		 </apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>The priority level of the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the reference to the listener is strong or weak.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:Command:addModel"><apiName>addModel</apiName><shortdesc>
		 Registers a model to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>The model instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam><apiParam><apiItemName>model</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>Instance of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a model to the framework.
		 </apiDesc><example><codeblock rev="3.0">addModel(MyModel.NAME, new MyModel());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:addView"><apiName>addView</apiName><shortdesc>
		 Registers a view to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>The view instance.
		 </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam><apiParam><apiItemName>view</apiItemName><apiType value="Object"/><apiDesc>Instance of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a view to the framework.
		 </apiDesc><example><codeblock rev="3.0">addView(MySprite.NAME, new MySprite());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:addWire"><apiName>addWire</apiName><shortdesc>
		 Registers a wire to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>The wire instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam><apiParam><apiItemName>wire</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>Instance of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a wire to the framework.
		 </apiDesc><example><codeblock rev="3.0">addWire(MyWire.NAME, new MyWire());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
		 Dispatches an event into the event flow.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A value of true unless preventDefault() is called on the event, in which case it returns false.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>The event object dispatched into the event flow.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Dispatches an event into the event flow. The event target is the EventDispatcher object upon which dispatchEvent() is called.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:Command:getCommand"><apiName>getCommand</apiName><shortdesc>
		 Retrieves the command class that has been registered with a command name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A class.
		 </apiDesc><apiType value="Class"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the command class that has been registered with a command name.
		 </apiDesc><example><codeblock rev="3.0">var commandClass:ICommand = getCommand(MyEvent.DOSOMETHING) as ICommand;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getCommands"><apiName>getCommands</apiName><shortdesc>
		 Retrieves all the command names (event type) that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An Array of String (command name).
		 </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the command names (event type) that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var commands:Array = getCommands();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getLastSequencer"><apiName>getLastSequencer</apiName><shortdesc>
		 Retrieves the last sequence command that has been instantiated in the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An ISequenceCommand instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the last sequence command that has been instantiated in the framework.
		 </apiDesc><example><codeblock rev="3.0">var lastSequencer:ISequenceCommand = getLastSequencer();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getModel"><apiName>getModel</apiName><shortdesc>
		 Retrieves the model instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A IModel instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the model instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myModel:MyModel = getModel(MyModel.NAME) as MyModel;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getModels"><apiName>getModels</apiName><shortdesc>
		 Retrieves all the model instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the model instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var models:Dictionary = getModels();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getRunningSequencers"><apiName>getRunningSequencers</apiName><shortdesc>
		 Retrieves all the sequence command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An Array of ISequenceCommand instances.
		 </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the sequence command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">var sequencers:Array = getRunningSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getSequencer"><apiName>getSequencer</apiName><shortdesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A sequencer (ISequenceCommand).
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var sequencer:ISequenceCommand = getSequencer(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getView"><apiName>getView</apiName><shortdesc>
		 Retrieves the view instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An Object instance.
		 </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the view instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var mySprite:MySprite = getView(MySprite.NAME) as MySprite;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getViews"><apiName>getViews</apiName><shortdesc>
		 Retrieves all the view instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the view instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var sprites:Dictionary = getViews();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getWire"><apiName>getWire</apiName><shortdesc>
		 Retrieves the wire instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A wire instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the wire instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myWire:MyWire = getWire(MyWire.NAME) as MyWire;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:getWires"><apiName>getWires</apiName><shortdesc>
		 Retrieves all the wire instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the wire instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var wires:Dictionary = getWires();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:hasCommand"><apiName>hasCommand</apiName><shortdesc>
		 Indicates wether a command has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a command has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
		 Checks whether the EventDispatcher object has any listeners registered for a specific type of event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A value of true if a listener of the specified type is registered; false otherwise.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Checks whether the EventDispatcher object has any listeners registered for a specific type of event.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:Command:hasModel"><apiName>hasModel</apiName><shortdesc>
		 Indicates wether a model has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a model has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:hasView"><apiName>hasView</apiName><shortdesc>
		 Indicates wether a view has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a view has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:hasWire"><apiName>hasWire</apiName><shortdesc>
		 Indicates wether a wire has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a wire has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:protected:initialize"><apiName>initialize</apiName><shortdesc> 
		 Method that you can optionally overwrite and that is called after the command has been registered with the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can optionally overwrite and that is called after the command has been registered with the framework.
		 </apiDesc></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:isPartOfASequence"><apiName>isPartOfASequence</apiName><shortdesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.
		 </apiDesc><example><codeblock rev="3.0">var inSequence:Boolean = isPartOfASequence(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:removeCommand"><apiName>removeCommand</apiName><shortdesc>
		 Removes a command from the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a command from the framework.
		 </apiDesc><example><codeblock rev="3.0">removeCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
		 Removes a listener from the EventDispatcher object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event. 
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener object to remove. 
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies whether the listener was registered for the capture phase or the target and bubbling phases.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a listener from the EventDispatcher object. If there is no matching listener registered with the EventDispatcher object, a call to this method has no effect.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:Command:removeModel"><apiName>removeModel</apiName><shortdesc>
		 Removes a model from the framework and call the dispose method of this model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a model from the framework and call the dispose method of this model.
		 </apiDesc><example><codeblock rev="3.0">removeModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:removeView"><apiName>removeView</apiName><shortdesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.
		 </apiDesc><example><codeblock rev="3.0">removeView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:removeWire"><apiName>removeWire</apiName><shortdesc>
		 Removes a wire from the framework and call the dispose method of this wire.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a wire from the framework and call the dispose method of this wire.
		 </apiDesc><example><codeblock rev="3.0">removeWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:stopAllSequencers"><apiName>stopAllSequencers</apiName><shortdesc>
		 Stops all the sequence command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Stops all the sequence command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">stopAllSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:stopSequencerWithEvent"><apiName>stopSequencerWithEvent</apiName><shortdesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean (true if a sequence command has been stopped).
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencerWithEvent(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:stopSequencer"><apiName>stopSequencer</apiName><shortdesc>
		 Stops a sequence command using the sequence command instance itself.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean (true if the sequence command has been stopped).
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>sequencer</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>The sequence command instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using the sequence command instance itself.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencer(mySequenceCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:Command:willTrigger"><apiName>willTrigger</apiName><shortdesc>
		 Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A value of true if a listener of the specified type will be triggered; false otherwise. 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.soma.core.controller:Command:injector:get"><apiName>injector</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.interfaces:ISomaInjector</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="com.soma.core.controller:Command:instance:get"><apiName>instance</apiName><shortdesc>
		 Retrieves the instance of the framework.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.interfaces:ISoma</apiValueClassifier></apiValueDef><apiDesc>
		 Retrieves the instance of the framework.
		 </apiDesc><example><codeblock rev="3.0">var myExtendedSomaClass:SomaApplication = SomaApplication(instance);</codeblock>
		 </example></apiValueDetail></apiValue><apiValue id="com.soma.core.controller:Command:mediators:get"><apiName>mediators</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.mediator:SomaMediators</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="com.soma.core.controller:Command:stage:get"><apiName>stage</apiName><shortdesc>
		 Get the stage that has been registered to the framework.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Stage"/></apiValueDef><apiDesc>
		 Get the stage that has been registered to the framework.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.soma.core.controller:SequenceCommand"><apiName>SequenceCommand</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 The SequenceCommand class is used to execute a list of commands one after the other.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:ISequenceCommand</apiBaseInterface><apiBaseClassifier>com.soma.core.controller:Command</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 The SequenceCommand class is used to execute a list of commands one after the other. The command added can be asynchronous or synchronous.
	 </apiDesc><example>Register commands and a sequence command.
	 <codeblock rev="3.0">
addCommand(MyEvent.DO_SOMETHING_ASYNCHRONOUS, CommandASyncExample);
addCommand(MyEvent.DO_SOMETHING_ELSE_ASYNCHRONOUS, CommandASyncExample);
addCommand(MyEvent.EXECUTE_SEQUENCE_COMMAND, SequenceCommandExample);
dispatchEvent(new MyEvent(MyEvent.EXECUTE_SEQUENCE_COMMAND));
	 </codeblock>
	 Each asynchronous command added to a sequence much use the executeNextCommand method. Here is an example.
	 <codeblock rev="3.0">
package {
	import flash.utils.clearTimeout;
	import flash.utils.setTimeout;
	import flash.events.Event;
	import com.soma.core.interfaces.ICommandASync;
	import com.soma.core.controller.Command;
	
	public class CommandASyncExample extends Command implements ICommandASync {
		private var _event:Event;
		private var _timer:int;
		public function CommandASyncExample() {
			
		}
		
		public function execute(event:Event):void {
			_event = event;
			_timer = setTimeout(result, 1000, {});
		}
		
		public function fault(info:Object):void {
			
		}
		
		public function result(data:Object):void {
			if (isPartOfASequence(_event)) {
				getSequencer(_event).executeNextCommand();
			}
			_event = null;
			clearTimeout(_timer);
		}
		
	}
}
	 </codeblock>
	 Create a sequence command.
	 <codeblock rev="3.0">
package  {
	import com.soma.core.interfaces.ISequenceCommand;
	import com.soma.core.controller.SequenceCommand;
	
	public class SequenceCommandExample extends SequenceCommand implements ISequenceCommand {
		public function SequenceCommandExample() {
			
		}
		
		override protected function initializeSubCommands():void {
			addSubCommand(new MyEvent(MyEvent.DO_SOMETHING_ASYNCHRONOUS));
			addSubCommand(new MyEvent(MyEvent.DO_SOMETHING_ELSE_ASYNCHRONOUS));
		}
		
	}
}
	 </codeblock>
	 </example></apiClassifierDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link><link href="com.soma.core.controller.xml#Command"><linktext>com.soma.core.controller.Command</linktext></link><link href="com.soma.core.controller.xml#SequenceCommand"><linktext>com.soma.core.controller.SequenceCommand</linktext></link><link href="com.soma.core.interfaces.xml#IParallelCommand"><linktext>com.soma.core.interfaces.IParallelCommand</linktext></link><link href="com.soma.core.interfaces.xml#ICommandASync"><linktext>com.soma.core.interfaces.ICommandASync</linktext></link></related-links><apiConstructor id="com.soma.core.controller:SequenceCommand:SequenceCommand"><apiName>SequenceCommand</apiName><shortdesc>
		 Create an instance of the SequenceCommand class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Create an instance of the SequenceCommand class. Should not be directly instantiated, the framework will instantiate the class.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.soma.core.controller:SequenceCommand:protected:addSubCommand"><apiName>addSubCommand</apiName><shortdesc>
		 Add a command to the list of commands to execute one after the other.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance (must be registered as a command previously).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Add a command to the list of commands to execute one after the other.
		 </apiDesc><example><codeblock rev="3.0">addSubCommand(new MyEvent(MyEvent.DO_SOMETHING_ASYNC));</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:SequenceCommand:executeNextCommand"><apiName>executeNextCommand</apiName><shortdesc>
		 Method used to execute the next command in the list of subcommands.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Method used to execute the next command in the list of subcommands.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SequenceCommand:protected:initializeSubCommands"><apiName>initializeSubCommands</apiName><shortdesc> 
		 Method that you can overwrite to add commands to the sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can overwrite to add commands to the sequence command.
		 </apiDesc><example><codeblock rev="3.0">addSubCommand(new MyEvent(MyEvent.DO_SOMETHING_ASYNC));</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:SequenceCommand:stop"><apiName>stop</apiName><shortdesc>
		 Stops the current sequence.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Stops the current sequence.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.soma.core.controller:SequenceCommand:commands:get"><apiName>commands</apiName><shortdesc>
		 Retrieves the list of commands added as subcommands.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		 Retrieves the list of commands added as subcommands.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.controller:SequenceCommand:currentCommand:get"><apiName>currentCommand</apiName><shortdesc>
		 Retrieves the command that is currently executed (running).</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.events:Event"/></apiValueDef><apiDesc>
		 Retrieves the command that is currently executed (running).
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.controller:SequenceCommand:length:get"><apiName>length</apiName><shortdesc>
		 Retrieves the number of commands added as subcommands.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Retrieves the number of commands added as subcommands.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.soma.core.controller:SomaController"><apiName>SomaController</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 The SomaController handles the commands added to the framework and the events dispatched from eiher a display list or a framework element (instance of the framework, commands or wires).
	 All the events dispatched with a property bubbles set to false will be ignored, that's why the event mapped to a command class must have this property set to true.
	 You can add commands, remove commands and dispatch commands from: the framework instance, the stage, any DisplayObject (as long as it is added to the stage), a wire, a command or a model using its dispatcher property.
	 You can create 4 types of commands: synchronous (Command), asynchronous (Command that implements ICommandASync), parallel (ParallelCommand) and sequence (SequenceCommand).</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 <p>The SomaController handles the commands added to the framework and the events dispatched from eiher a display list or a framework element (instance of the framework, commands or wires).</p>
	 <p>All the events dispatched with a property bubbles set to false will be ignored, that's why the event mapped to a command class must have this property set to true.</p>
	 <p>You can add commands, remove commands and dispatch commands from: the framework instance, the stage, any DisplayObject (as long as it is added to the stage), a wire, a command or a model using its dispatcher property.</p>
	 <p>You can create 4 types of commands: synchronous (Command), asynchronous (Command that implements ICommandASync), parallel (ParallelCommand) and sequence (SequenceCommand). See each class for a detailed explanation and examples.</p>
	 <p>You can use the properties of a custom event to send parameters and receive them in the command.</p>
	 </apiDesc><example><codeblock rev="3.0">
addCommand(MyEvent.DOSOMETHING, CommandExample);
removeCommand(MyEvent.DOSOMETHING);
dispatchEvent(new MyEvent(MyEvent.DOSOMETHING));
	 </codeblock>
	 </example></apiClassifierDetail><related-links><link href="com.soma.core.controller.xml#Command"><linktext>com.soma.core.controller.Command</linktext></link><link href="com.soma.core.controller.xml#ParallelCommand"><linktext>com.soma.core.controller.ParallelCommand</linktext></link><link href="com.soma.core.controller.xml#SequenceCommand"><linktext>com.soma.core.controller.SequenceCommand</linktext></link><link href="com.soma.core.interfaces.xml#ICommand"><linktext>com.soma.core.interfaces.ICommand</linktext></link><link href="com.soma.core.interfaces.xml#ICommandASync"><linktext>com.soma.core.interfaces.ICommandASync</linktext></link><link href="com.soma.core.interfaces.xml#IParallelCommand"><linktext>com.soma.core.interfaces.IParallelCommand</linktext></link><link href="com.soma.core.interfaces.xml#ISequenceCommand"><linktext>com.soma.core.interfaces.ISequenceCommand</linktext></link></related-links><apiConstructor id="com.soma.core.controller:SomaController:SomaController"><apiName>SomaController</apiName><shortdesc>
		 Create an instance of the SomaController class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISoma</apiOperationClassifier></apiParam></apiConstructorDef><apiDesc>
		 Create an instance of the SomaController class. Should not be directly instantiated, the framework will instantiate the class.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.soma.core.controller:SomaController:addCommand"><apiName>addCommand</apiName><shortdesc>
		 Registers a command to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam><apiParam><apiItemName>command</apiItemName><apiType value="Class"/><apiDesc>Class that will be executed when a command has been dispatched.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a command to the framework.
		 </apiDesc><example><codeblock rev="3.0">addCommand(MyEvent.DOSOMETHING, MyCommand);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:dispose"><apiName>dispose</apiName><shortdesc>
		 Destroys the SomaController elements (all commands, sequencers and properties).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Destroys the SomaController elements (all commands, sequencers and properties).
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:getCommand"><apiName>getCommand</apiName><shortdesc>
		 Retrieves the command class that has been registered with a command name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A class.
		 </apiDesc><apiType value="Class"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the command class that has been registered with a command name.
		 </apiDesc><example><codeblock rev="3.0">var commandClass:ICommand = getCommand(MyEvent.DOSOMETHING) as ICommand;</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:getCommands"><apiName>getCommands</apiName><shortdesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A sequencer (ISequenceCommand).
		 </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var sequencer:ISequenceCommand = getSequencer(myEvent);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:getLastSequencer"><apiName>getLastSequencer</apiName><shortdesc>
		 Retrieves the last sequence command that has been instantiated in the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An ISequenceCommand instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the last sequence command that has been instantiated in the framework.
		 </apiDesc><example><codeblock rev="3.0">var lastSequencer:ISequenceCommand = getLastSequencer();</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:getRunningSequencers"><apiName>getRunningSequencers</apiName><shortdesc>
		 Retrieves all the sequence command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An Array of ISequenceCommand instances.
		 </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the sequence command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">var sequencers:Array = getRunningSequencers();</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:getSequencer"><apiName>getSequencer</apiName><shortdesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean (true if a sequence command has been stopped).
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencerWithEvent(myEvent);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:hasCommand"><apiName>hasCommand</apiName><shortdesc>
		 Indicates wether a command has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a command has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:isPartOfASequence"><apiName>isPartOfASequence</apiName><shortdesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.
		 </apiDesc><example><codeblock rev="3.0">var inSequence:Boolean = isPartOfASequence(myEvent);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:removeCommand"><apiName>removeCommand</apiName><shortdesc>
		 Removes a command from the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a command from the framework.
		 </apiDesc><example><codeblock rev="3.0">removeCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:stopAllSequencers"><apiName>stopAllSequencers</apiName><shortdesc>
		 Stops all the sequence command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Stops all the sequence command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">stopAllSequencers();</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:stopSequencerWithEvent"><apiName>stopSequencerWithEvent</apiName><shortdesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean (true if a sequence command has been stopped).
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencerWithEvent(myEvent);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.controller:SomaController:stopSequencer"><apiName>stopSequencer</apiName><shortdesc>
		 Stops a sequence command using the sequence command instance itself.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean (true if the sequence command has been stopped).
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>sequencer</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>The sequence command instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using the sequence command instance itself.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencer(mySequenceCommand);</codeblock>
		 </example></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.soma.core.controller:ParallelCommand"><apiName>ParallelCommand</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 The ParallelCommand class is used to execute a list of commands at the same time.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:IParallelCommand</apiBaseInterface><apiBaseClassifier>com.soma.core.controller:Command</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 The ParallelCommand class is used to execute a list of commands at the same time.
	 </apiDesc><example>Register commands and a parallel command.
	 <codeblock rev="3.0">
addCommand(MyEvent.DO_SOMETHING, CommandExample);
addCommand(MyEvent.DO_SOMETHING_ELSE, CommandExample);
addCommand(MyEvent.EXECUTE_PARALLEL_COMMAND, ParallelCommandExample);
dispatchEvent(new MyEvent(MyEvent.EXECUTE_PARALLEL_COMMAND));
	 </codeblock>
	 <codeblock rev="3.0">
package  {
	import com.soma.core.interfaces.IParallelCommand;
	import com.soma.core.controller.ParallelCommand;
	
	public class ParallelCommandExample extends ParallelCommand implements IParallelCommand {
		public function ParallelCommandExample() {
			
		}
		
		override protected function initializeSubCommands():void {
			addSubCommand(new MyEvent(MyEvent.DO_SOMETHING));
			addSubCommand(new MyEvent(MyEvent.DO_SOMETHING_ELSE));
		}
		
	}
}
	 </codeblock>
	 </example></apiClassifierDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link><link href="com.soma.core.controller.xml#Command"><linktext>com.soma.core.controller.Command</linktext></link><link href="com.soma.core.controller.xml#SequenceCommand"><linktext>com.soma.core.controller.SequenceCommand</linktext></link><link href="com.soma.core.interfaces.xml#IParallelCommand"><linktext>com.soma.core.interfaces.IParallelCommand</linktext></link></related-links><apiConstructor id="com.soma.core.controller:ParallelCommand:ParallelCommand"><apiName>ParallelCommand</apiName><shortdesc>
		 Create an instance of the ParallelCommand class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Create an instance of the ParallelCommand class. Should not be directly instantiated, the framework will instantiate the class.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.soma.core.controller:ParallelCommand:protected:addSubCommand"><apiName>addSubCommand</apiName><shortdesc>
		 Add a command to the list of commands to execute in parallel.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance (must be registered as a command previously).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Add a command to the list of commands to execute in parallel.
		 </apiDesc><example><codeblock rev="3.0">addSubCommand(new MyEvent(MyEvent.DO_SOMETHING));</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.controller:ParallelCommand:protected:initializeSubCommands"><apiName>initializeSubCommands</apiName><shortdesc> 
		 Method that you can overwrite to add commands to the parallele command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Method that you can overwrite to add commands to the parallele command.
		 </apiDesc><example><codeblock rev="3.0">addSubCommand(new MyEvent(MyEvent.DO_SOMETHING));</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiValue id="com.soma.core.controller:ParallelCommand:commands:get"><apiName>commands</apiName><shortdesc>
		 Retrieves the list of commands added as subcommands.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		 Retrieves the list of commands added as subcommands.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.controller:ParallelCommand:length:get"><apiName>length</apiName><shortdesc>
		 Retrieves the number of commands added as subcommands.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Retrieves the number of commands added as subcommands.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>