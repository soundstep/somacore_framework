<?xml version="1.0" encoding="UTF-8"?><apiPackage id="com.soma.core.model"><apiName>com.soma.core.model</apiName><apiDetail/><apiClassifier id="com.soma.core.model:Model"><apiName>Model</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 The model is the class used to manage you application's data model.
	 The data can be XML, local data, data retrieved from a server or anything.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:IModel</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 <p>The model is the class used to manage you application's data model.</p>
	 <p>The data can be XML, local data, data retrieved from a server or anything. Ideally, the data should be set to the data property of the model instance, but you are free to create specific getters.</p>
	 </apiDesc><example>Create a model.
	 <codeblock rev="3.0">
package  {
	import com.soma.core.interfaces.IModel;
	import com.soma.core.model.Model;
	
	public class ModelExample extends Model implements IModel {
		
		public static const NAME:String = "Model example name";
		
		public function ModelExample() {
			super(NAME);
		}
		
		override protected function initialize():void {
			// called when the model has been registered to the framework
			data = new XML('&lt;myXML/&gt;');
			// you can use the model as a dispatcher (default dispatcher is the framework instance) to dispatch commands, example:
			dispatchEvent(new MyEvent(MyEvent.DATA_READY));
		}
		
		override protected function dispose():void {
			// called when the model has been removed from the framework
			data = null;
		}
		
	}
}
	 </codeblock>
	 Add a model.
	 <codeblock rev="3.0">
addModel(ModelExample.NAME, new ModelExample());
	 </codeblock>
	 Remove a model.
	 <codeblock rev="3.0">
removeModel(ModelExample.NAME);
	 </codeblock>
	 Retrieve a model.
	 <codeblock rev="3.0">
var model:ModelExample = getModel(ModelExample.NAME) as ModelExample;
	 </codeblock>
	 Create a shortcut to retrieve a model is a good practice (not necessary with injection enabled).
	 <codeblock rev="3.0">
private function get modelExample():ModelExample {
	return getModel(ModelExample.NAME) as ModelExample;
}
private function doSomething():void {
	trace(modelExample.data);
}
	 </codeblock>
	 </example></apiClassifierDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links><apiConstructor id="com.soma.core.model:Model:Model"><apiName>Model</apiName><shortdesc>
		 Create an instance of a Model class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Name of the model.
		 </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Data of the model.
		 </apiDesc></apiParam><apiParam><apiItemName>dispatcher</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiData>null</apiData><apiDesc>EventDispatcher instance that can be used to dispatch commands.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Create an instance of a Model class. The Model class should be extended.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.soma.core.model:Model:addEventListener"><apiName>addEventListener</apiName><shortdesc>
		 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener function that processes the event.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the listener works in the capture phase or the target and bubbling phases.
		 </apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>The priority level of the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the reference to the listener is strong or weak.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
		 Dispatches an event into the event flow.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A value of true unless preventDefault() is called on the event, in which case it returns false.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>The event object dispatched into the event flow.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Dispatches an event into the event flow. The event target is the EventDispatcher object upon which dispatchEvent() is called.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:dispose"><apiName>dispose</apiName><shortdesc>
		 Method that can you can override, called when the model has been removed from the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Method that can you can override, called when the model has been removed from the framework.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:getName"><apiName>getName</apiName><shortdesc>
		 Retrieves the name of the model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A String.
		 </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the name of the model.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
		 Checks whether the EventDispatcher object has any listeners registered for a specific type of event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A value of true if a listener of the specified type is registered; false otherwise.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Checks whether the EventDispatcher object has any listeners registered for a specific type of event.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:initialize"><apiName>initialize</apiName><shortdesc>
		 Method that can you can override, called when the model has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Method that can you can override, called when the model has been registered to the framework.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:postConstruct"><apiName>postConstruct</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
		 Removes a listener from the EventDispatcher object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event. 
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener object to remove. 
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies whether the listener was registered for the capture phase or the target and bubbling phases.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a listener from the EventDispatcher object. If there is no matching listener registered with the EventDispatcher object, a call to this method has no effect.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:setName"><apiName>setName</apiName><shortdesc>
		 Sets the name of the model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/><apiDesc>A String.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets the name of the model.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:Model:willTrigger"><apiName>willTrigger</apiName><shortdesc>
		 Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A value of true if a listener of the specified type will be triggered; false otherwise. 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.soma.core.model:Model:protected:_data"><apiName>_data</apiName><shortdesc>
		 Variable that can be used to hold you data.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Object"/><apiDefaultValue>null;
		 </apiDefaultValue></apiValueDef><apiDesc>
		 Variable that can be used to hold you data.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.model:Model:protected:_dispatcher"><apiName>_dispatcher</apiName><shortdesc>
		 Instance of a EventDispatcher that can be used to dispatch commands.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.events:IEventDispatcher"/><apiDefaultValue>Framework instance (Soma instance).
		 </apiDefaultValue></apiValueDef><apiDesc>
		 Instance of a EventDispatcher that can be used to dispatch commands.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.model:Model:protected:_name"><apiName>_name</apiName><shortdesc>
		 Name of the model.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
		 Name of the model.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.model:Model:data:get"><apiName>data</apiName><shortdesc>
		 Data of the model.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
		 Data of the model.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.model:Model:dispatcher:get"><apiName>dispatcher</apiName><shortdesc>
		 EventDispatcher instance of the model.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:IEventDispatcher"/><apiDefaultValue>The framework instance.
		 </apiDefaultValue></apiValueDef><apiDesc>
		 EventDispatcher instance of the model.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.soma.core.model:SomaModels"><apiName>SomaModels</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 The SomaModels class handles the models of the application.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 The SomaModels class handles the models of the application. See the Model class documentation for implementation.
	 </apiDesc></apiClassifierDetail><related-links><link href="com.soma.core.model.xml#Model"><linktext>com.soma.core.model.Model</linktext></link></related-links><apiConstructor id="com.soma.core.model:SomaModels:SomaModels"><apiName>SomaModels</apiName><shortdesc>
		 Create an instance of the SomaModels class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISoma</apiOperationClassifier><apiDesc>Framework instance.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Create an instance of the SomaModels class. Should not be directly instantiated, the framework will instantiate the class.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.soma.core.model:SomaModels:addModel"><apiName>addModel</apiName><shortdesc>
		 Registers a model to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The model instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam><apiParam><apiItemName>model</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>Instance of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a model to the framework.
		 </apiDesc><example><codeblock rev="3.0">addModel(MyModel.NAME, new MyModel());</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:SomaModels:dispose"><apiName>dispose</apiName><shortdesc>
		 Destroys all the models and properties.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Destroys all the models and properties. The class will call the dispose method of each model instance.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:SomaModels:getModel"><apiName>getModel</apiName><shortdesc>
		 Retrieves the model instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A IModel instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the model instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myModel:MyModel = getModel(MyModel.NAME) as MyModel;</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:SomaModels:getModels"><apiName>getModels</apiName><shortdesc>
		 Retrieves all the model instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the model instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var models:Dictionary = getModels();</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:SomaModels:hasModel"><apiName>hasModel</apiName><shortdesc>
		 Indicates wether a model has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a model has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.model:SomaModels:removeModel"><apiName>removeModel</apiName><shortdesc>
		 Removes a model from the framework and call the dispose method of this model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a model from the framework and call the dispose method of this model.
		 </apiDesc><example><codeblock rev="3.0">removeModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiValue id="com.soma.core.model:SomaModels:protected:models"><apiName>models</apiName><shortdesc>
		 List of the models registered to the framework.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
		 List of the models registered to the framework.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>