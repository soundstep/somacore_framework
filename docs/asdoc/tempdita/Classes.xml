<?xml version="1.0" encoding="UTF-8"?>
<allClasses>
   <apiPackage id="com.soma.core.controller">
      <apiName>com.soma.core.controller</apiName>
      <apiDetail/>
      <apiClassifier id="com.soma.core.controller:Command">
         <apiName>Command</apiName>
         <shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 Command class that will be instantiated when a registered event is dispatched, the framework will automatically call the execute method.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	              <p>
                  <b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref>
               </p>
	              <p>
                  <b>Resources:</b> 
                  <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref>
               </p>
	              <p>
                  <b>Class version:</b> v2.0.0</p>
	              <p>
                  <b>Actionscript version:</b> 3.0</p>
	              <p>
                  <b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref>
               </p>
	 Command class that will be instantiated when a registered event is dispatched, the framework will automatically call the execute method.
	 </apiDesc>
            <example>Register a command.
	 <codeblock rev="3.0">
addCommand(MyEvent.DOSOMETHING, CommandExample);
dispatchEvent(new MyEvent(MyEvent.DOSOMETHING));
	 </codeblock>
	 Create a normal command.
	 <codeblock rev="3.0">
package  {
	import flash.events.Event;
	import com.soma.core.interfaces.ICommand;
	import com.soma.core.controller.Command;
	
	public class CommandExample extends Command implements ICommand {
		public function execute(event:Event):void {
			
		}
		
	}
}
	 </codeblock>
	 Create an asynchronous command.
	 <codeblock rev="3.0">
package  {
	import flash.events.Event;
	import com.soma.core.interfaces.ICommandASync;
	import com.soma.core.controller.Command;
	
	public class CommandASyncExample extends Command implements ICommandASync {
		public function CommandASyncExample() {
			
		}
		
		public function execute(event:Event):void {
			
		}
		
		public function fault(info:Object):void {
			
		}
		
		public function result(data:Object):void {
			
		}
		
	}
}
	 </codeblock>
	           </example>
         </apiClassifierDetail>
         <related-links>
            <link href="com.soma.core.controller.xml#SomaController">
               <linktext>com.soma.core.controller.SomaController</linktext>
            </link>
            <link href="com.soma.core.controller.xml#ParallelCommand">
               <linktext>com.soma.core.controller.ParallelCommand</linktext>
            </link>
            <link href="com.soma.core.controller.xml#SequenceCommand">
               <linktext>com.soma.core.controller.SequenceCommand</linktext>
            </link>
            <link href="com.soma.core.interfaces.xml#ICommand">
               <linktext>com.soma.core.interfaces.ICommand</linktext>
            </link>
            <link href="com.soma.core.interfaces.xml#ICommandASync">
               <linktext>com.soma.core.interfaces.ICommandASync</linktext>
            </link>
         </related-links>
         <Keywords>
            <meta name="keywords"
                  content="Command,com.soma.core.controller.Command,commands,commands,currentCommand,injector,instance,length,length,mediators,stage,addCommand,addCommand,addEventListener,addModel,addSubCommand,addSubCommand,addView,addWire,dispatchEvent,dispose,executeNextCommand,getCommand,getCommand,getCommands,getCommands,getLastSequencer,getLastSequencer,getModel,getModels,getRunningSequencers,getRunningSequencers,getSequencer,getSequencer,getView,getViews,getWire,getWires,hasCommand,hasCommand,hasEventListener,hasModel,hasView,hasWire,initialize,initializeSubCommands,initializeSubCommands,isPartOfASequence,isPartOfASequence,removeCommand,removeCommand,removeEventListener,removeModel,removeView,removeWire,stop,stopAllSequencers,stopAllSequencers,stopSequencer,stopSequencer,stopSequencerWithEvent,stopSequencerWithEvent,willTrigger"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="com.soma.core.controller:SequenceCommand">
         <apiName>SequenceCommand</apiName>
         <shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 The SequenceCommand class is used to execute a list of commands one after the other.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.soma.core.interfaces:ISequenceCommand</apiBaseInterface>
               <apiBaseClassifier>com.soma.core.controller:Command</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	              <p>
                  <b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref>
               </p>
	              <p>
                  <b>Resources:</b> 
                  <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref>
               </p>
	              <p>
                  <b>Class version:</b> v2.0.0</p>
	              <p>
                  <b>Actionscript version:</b> 3.0</p>
	              <p>
                  <b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref>
               </p>
	 The SequenceCommand class is used to execute a list of commands one after the other. The command added can be asynchronous or synchronous.
	 </apiDesc>
            <example>Register commands and a sequence command.
	 <codeblock rev="3.0">
addCommand(MyEvent.DO_SOMETHING_ASYNCHRONOUS, CommandASyncExample);
addCommand(MyEvent.DO_SOMETHING_ELSE_ASYNCHRONOUS, CommandASyncExample);
addCommand(MyEvent.EXECUTE_SEQUENCE_COMMAND, SequenceCommandExample);
dispatchEvent(new MyEvent(MyEvent.EXECUTE_SEQUENCE_COMMAND));
	 </codeblock>
	 Each asynchronous command added to a sequence much use the executeNextCommand method. Here is an example.
	 <codeblock rev="3.0">
package {
	import flash.utils.clearTimeout;
	import flash.utils.setTimeout;
	import flash.events.Event;
	import com.soma.core.interfaces.ICommandASync;
	import com.soma.core.controller.Command;
	
	public class CommandASyncExample extends Command implements ICommandASync {
		private var _event:Event;
		private var _timer:int;
		public function CommandASyncExample() {
			
		}
		
		public function execute(event:Event):void {
			_event = event;
			_timer = setTimeout(result, 1000, {});
		}
		
		public function fault(info:Object):void {
			
		}
		
		public function result(data:Object):void {
			if (isPartOfASequence(_event)) {
				getSequencer(_event).executeNextCommand();
			}
			_event = null;
			clearTimeout(_timer);
		}
		
	}
}
	 </codeblock>
	 Create a sequence command.
	 <codeblock rev="3.0">
package  {
	import com.soma.core.interfaces.ISequenceCommand;
	import com.soma.core.controller.SequenceCommand;
	
	public class SequenceCommandExample extends SequenceCommand implements ISequenceCommand {
		public function SequenceCommandExample() {
			
		}
		
		override protected function initializeSubCommands():void {
			addSubCommand(new MyEvent(MyEvent.DO_SOMETHING_ASYNCHRONOUS));
			addSubCommand(new MyEvent(MyEvent.DO_SOMETHING_ELSE_ASYNCHRONOUS));
		}
		
	}
}
	 </codeblock>
	           </example>
         </apiClassifierDetail>
         <related-links>
            <link href="com.soma.core.controller.xml#SomaController">
               <linktext>com.soma.core.controller.SomaController</linktext>
            </link>
            <link href="com.soma.core.controller.xml#Command">
               <linktext>com.soma.core.controller.Command</linktext>
            </link>
            <link href="com.soma.core.controller.xml#SequenceCommand">
               <linktext>com.soma.core.controller.SequenceCommand</linktext>
            </link>
            <link href="com.soma.core.interfaces.xml#IParallelCommand">
               <linktext>com.soma.core.interfaces.IParallelCommand</linktext>
            </link>
            <link href="com.soma.core.interfaces.xml#ICommandASync">
               <linktext>com.soma.core.interfaces.ICommandASync</linktext>
            </link>
         </related-links>
         <Keywords>
            <meta name="keywords"
                  content="SequenceCommand,com.soma.core.controller.SequenceCommand,commands,commands,currentCommand,injector,instance,length,length,mediators,stage,addCommand,addCommand,addEventListener,addModel,addSubCommand,addSubCommand,addView,addWire,dispatchEvent,dispose,executeNextCommand,getCommand,getCommand,getCommands,getCommands,getLastSequencer,getLastSequencer,getModel,getModels,getRunningSequencers,getRunningSequencers,getSequencer,getSequencer,getView,getViews,getWire,getWires,hasCommand,hasCommand,hasEventListener,hasModel,hasView,hasWire,initialize,initializeSubCommands,initializeSubCommands,isPartOfASequence,isPartOfASequence,removeCommand,removeCommand,removeEventListener,removeModel,removeView,removeWire,stop,stopAllSequencers,stopAllSequencers,stopSequencer,stopSequencer,stopSequencerWithEvent,stopSequencerWithEvent,willTrigger"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="com.soma.core.controller:SomaController">
         <apiName>SomaController</apiName>
         <shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 The SomaController handles the commands added to the framework and the events dispatched from eiher a display list or a framework element (instance of the framework, commands or wires).
	 All the events dispatched with a property bubbles set to false will be ignored, that's why the event mapped to a command class must have this property set to true.
	 You can add commands, remove commands and dispatch commands from: the framework instance, the stage, any DisplayObject (as long as it is added to the stage), a wire, a command or a model using its dispatcher property.
	 You can create 4 types of commands: synchronous (Command), asynchronous (Command that implements ICommandASync), parallel (ParallelCommand) and sequence (SequenceCommand).</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	              <p>
                  <b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref>
               </p>
	              <p>
                  <b>Resources:</b> 
                  <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref>
               </p>
	              <p>
                  <b>Class version:</b> v2.0.0</p>
	              <p>
                  <b>Actionscript version:</b> 3.0</p>
	              <p>
                  <b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref>
               </p>
	              <p>The SomaController handles the commands added to the framework and the events dispatched from eiher a display list or a framework element (instance of the framework, commands or wires).</p>
	              <p>All the events dispatched with a property bubbles set to false will be ignored, that's why the event mapped to a command class must have this property set to true.</p>
	              <p>You can add commands, remove commands and dispatch commands from: the framework instance, the stage, any DisplayObject (as long as it is added to the stage), a wire, a command or a model using its dispatcher property.</p>
	              <p>You can create 4 types of commands: synchronous (Command), asynchronous (Command that implements ICommandASync), parallel (ParallelCommand) and sequence (SequenceCommand). See each class for a detailed explanation and examples.</p>
	              <p>You can use the properties of a custom event to send parameters and receive them in the command.</p>
	           </apiDesc>
            <example>
               <codeblock rev="3.0">
addCommand(MyEvent.DOSOMETHING, CommandExample);
removeCommand(MyEvent.DOSOMETHING);
dispatchEvent(new MyEvent(MyEvent.DOSOMETHING));
	 </codeblock>
	           </example>
         </apiClassifierDetail>
         <related-links>
            <link href="com.soma.core.controller.xml#Command">
               <linktext>com.soma.core.controller.Command</linktext>
            </link>
            <link href="com.soma.core.controller.xml#ParallelCommand">
               <linktext>com.soma.core.controller.ParallelCommand</linktext>
            </link>
            <link href="com.soma.core.controller.xml#SequenceCommand">
               <linktext>com.soma.core.controller.SequenceCommand</linktext>
            </link>
            <link href="com.soma.core.interfaces.xml#ICommand">
               <linktext>com.soma.core.interfaces.ICommand</linktext>
            </link>
            <link href="com.soma.core.interfaces.xml#ICommandASync">
               <linktext>com.soma.core.interfaces.ICommandASync</linktext>
            </link>
            <link href="com.soma.core.interfaces.xml#IParallelCommand">
               <linktext>com.soma.core.interfaces.IParallelCommand</linktext>
            </link>
            <link href="com.soma.core.interfaces.xml#ISequenceCommand">
               <linktext>com.soma.core.interfaces.ISequenceCommand</linktext>
            </link>
         </related-links>
         <Keywords>
            <meta name="keywords"
                  content="SomaController,com.soma.core.controller.SomaController,addCommand,addCommand,addEventListener,addModel,addSubCommand,addSubCommand,addView,addWire,dispatchEvent,dispose,executeNextCommand,getCommand,getCommand,getCommands,getCommands,getLastSequencer,getLastSequencer,getModel,getModels,getRunningSequencers,getRunningSequencers,getSequencer,getSequencer,getView,getViews,getWire,getWires,hasCommand,hasCommand,hasEventListener,hasModel,hasView,hasWire,initialize,initializeSubCommands,initializeSubCommands,isPartOfASequence,isPartOfASequence,removeCommand,removeCommand,removeEventListener,removeModel,removeView,removeWire,stop,stopAllSequencers,stopAllSequencers,stopSequencer,stopSequencer,stopSequencerWithEvent,stopSequencerWithEvent,willTrigger"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="com.soma.core.controller:ParallelCommand">
         <apiName>ParallelCommand</apiName>
         <shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 The ParallelCommand class is used to execute a list of commands at the same time.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.soma.core.interfaces:IParallelCommand</apiBaseInterface>
               <apiBaseClassifier>com.soma.core.controller:Command</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	              <p>
                  <b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref>
               </p>
	              <p>
                  <b>Resources:</b> 
                  <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref>
               </p>
	              <p>
                  <b>Class version:</b> v2.0.0</p>
	              <p>
                  <b>Actionscript version:</b> 3.0</p>
	              <p>
                  <b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref>
               </p>
	 The ParallelCommand class is used to execute a list of commands at the same time.
	 </apiDesc>
            <example>Register commands and a parallel command.
	 <codeblock rev="3.0">
addCommand(MyEvent.DO_SOMETHING, CommandExample);
addCommand(MyEvent.DO_SOMETHING_ELSE, CommandExample);
addCommand(MyEvent.EXECUTE_PARALLEL_COMMAND, ParallelCommandExample);
dispatchEvent(new MyEvent(MyEvent.EXECUTE_PARALLEL_COMMAND));
	 </codeblock>
	              <codeblock rev="3.0">
package  {
	import com.soma.core.interfaces.IParallelCommand;
	import com.soma.core.controller.ParallelCommand;
	
	public class ParallelCommandExample extends ParallelCommand implements IParallelCommand {
		public function ParallelCommandExample() {
			
		}
		
		override protected function initializeSubCommands():void {
			addSubCommand(new MyEvent(MyEvent.DO_SOMETHING));
			addSubCommand(new MyEvent(MyEvent.DO_SOMETHING_ELSE));
		}
		
	}
}
	 </codeblock>
	           </example>
         </apiClassifierDetail>
         <related-links>
            <link href="com.soma.core.controller.xml#SomaController">
               <linktext>com.soma.core.controller.SomaController</linktext>
            </link>
            <link href="com.soma.core.controller.xml#Command">
               <linktext>com.soma.core.controller.Command</linktext>
            </link>
            <link href="com.soma.core.controller.xml#SequenceCommand">
               <linktext>com.soma.core.controller.SequenceCommand</linktext>
            </link>
            <link href="com.soma.core.interfaces.xml#IParallelCommand">
               <linktext>com.soma.core.interfaces.IParallelCommand</linktext>
            </link>
         </related-links>
         <Keywords>
            <meta name="keywords"
                  content="ParallelCommand,com.soma.core.controller.ParallelCommand,commands,commands,currentCommand,injector,instance,length,length,mediators,stage,addCommand,addCommand,addEventListener,addModel,addSubCommand,addSubCommand,addView,addWire,dispatchEvent,dispose,executeNextCommand,getCommand,getCommand,getCommands,getCommands,getLastSequencer,getLastSequencer,getModel,getModels,getRunningSequencers,getRunningSequencers,getSequencer,getSequencer,getView,getViews,getWire,getWires,hasCommand,hasCommand,hasEventListener,hasModel,hasView,hasWire,initialize,initializeSubCommands,initializeSubCommands,isPartOfASequence,isPartOfASequence,removeCommand,removeCommand,removeEventListener,removeModel,removeView,removeWire,stop,stopAllSequencers,stopAllSequencers,stopSequencer,stopSequencer,stopSequencerWithEvent,stopSequencerWithEvent,willTrigger"/>
         </Keywords>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="com.soma.core.di">
      <apiName>com.soma.core.di</apiName>
      <apiDetail/>
      <apiClassifier id="com.soma.core.di:SomaInjector">
         <apiName>SomaInjector</apiName>
         <shortdesc>
	 </shortdesc>
         <prolog>
            <author>Romuald Quantin
	 </author>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.soma.core.interfaces:ISomaInjector</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="SomaInjector,com.soma.core.di.SomaInjector,createChildInjector,createInstance,dispose,dispose,getApplicationDomain,getInstance,getParentInjector,hasMapping,initialize,injectInto,mapSingletonOf,mapSingleton,mapToInstance,map,removeMapping,setApplicationDomain"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="com.soma.core.di:SomaReflector">
         <apiName>SomaReflector</apiName>
         <shortdesc>
	 </shortdesc>
         <prolog>
            <author>romuald
	 </author>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.soma.core.interfaces:ISomaReflector</apiBaseInterface>
               <apiBaseClassifier>org.swiftsuspenders:Reflector</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="SomaReflector,com.soma.core.di.SomaReflector,createChildInjector,createInstance,dispose,dispose,getApplicationDomain,getInstance,getParentInjector,hasMapping,initialize,injectInto,mapSingletonOf,mapSingleton,mapToInstance,map,removeMapping,setApplicationDomain"/>
         </Keywords>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="com.soma.core.interfaces">
      <apiName>com.soma.core.interfaces</apiName>
      <apiDetail/>
      <apiClassifier id="com.soma.core.interfaces:ISomaPluginVO">
         <apiName>ISomaPluginVO</apiName>
         <shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 Interface used by a class that will hold the plugin options (ex: SomaDebuggerVO).</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	              <p>
                  <b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref>
               </p>
	              <p>
                  <b>Resources:</b> 
                  <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref>
               </p>
	              <p>
                  <b>Class version:</b> v2.0.0</p>
	              <p>
                  <b>Actionscript version:</b> 3.0</p>
	              <p>
                  <b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref>
               </p>
	 Interface used by a class that will hold the plugin options (ex: SomaDebuggerVO).
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords" content="ISomaPluginVO,com.soma.core.interfaces.ISomaPluginVO"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="com.soma.core.interfaces:ISoma">
         <apiName>ISoma</apiName>
         <shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 Interface used by the class that will extend the Soma class.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	              <p>
                  <b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref>
               </p>
	              <p>
                  <b>Resources:</b> 
                  <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref>
               </p>
	              <p>
                  <b>Class version:</b> v2.0.0</p>
	              <p>
                  <b>Actionscript version:</b> 3.0</p>
	              <p>
                  <b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref>
               </p>
	 Interface used by the class that will extend the Soma class.
	 </apiDesc>
         </apiClassifierDetail>
         <related-links>
            <link href="com.soma.core.xml#Soma">
               <linktext>com.soma.core.Soma</linktext>
            </link>
         </related-links>
         <Keywords>
            <meta name="keywords"
                  content="ISoma,com.soma.core.interfaces.ISoma,commands,commands,controller,currentCommand,data,dispatcher,injector,instance,length,length,mediators,models,reflector,stage,viewComponent,views,wires,addCommand,addEventListener,addModel,addView,addWire,classExtendsOrImplements,createChildInjector,createInstance,createPlugin,createPluginFromClassName,dispatchEvent,dispose,dispose,dispose,dispose,dispose,dispose,execute,executeNextCommand,fault,getApplicationDomain,getClass,getCommand,getCommands,getFQCN,getInstance,getLastSequencer,getModel,getModels,getName,getName,getParentInjector,getRunningSequencers,getSequencer,getView,getViews,getWire,getWires,hasCommand,hasEventListener,hasMapping,hasModel,hasView,hasWire,initialize,initialize,initialize,injectInto,isPartOfASequence,mapSingletonOf,mapSingleton,mapToInstance,map,removeCommand,removeEventListener,removeMapping,removeModel,removeView,removeWire,result,setApplicationDomain,setName,setName,setup,stop,stopAllSequencers,stopSequencer,stopSequencerWithEvent,willTrigger"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="com.soma.core.interfaces:IModel">
         <apiName>IModel</apiName>
         <shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	              <p>
                  <b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref>
               </p>
	              <p>
                  <b>Resources:</b> 
                  <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref>
               </p>
	              <p>
                  <b>Class version:</b> v2.0.0</p>
	              <p>
                  <b>Actionscript version:</b> 3.0</p>
	              <p>
                  <b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref>
               </p>
	           </apiDesc>
         </apiClassifierDetail>
         <related-links>
            <link href="com.soma.core.model.xml#Model">
               <linktext>com.soma.core.model.Model</linktext>
            </link>
         </related-links>
         <Keywords>
            <meta name="keywords"
                  content="IModel,com.soma.core.interfaces.IModel,commands,commands,controller,currentCommand,data,dispatcher,injector,instance,length,length,mediators,models,reflector,stage,viewComponent,views,wires,addCommand,addEventListener,addModel,addView,addWire,classExtendsOrImplements,createChildInjector,createInstance,createPlugin,createPluginFromClassName,dispatchEvent,dispose,dispose,dispose,dispose,dispose,dispose,execute,executeNextCommand,fault,getApplicationDomain,getClass,getCommand,getCommands,getFQCN,getInstance,getLastSequencer,getModel,getModels,getName,getName,getParentInjector,getRunningSequencers,getSequencer,getView,getViews,getWire,getWires,hasCommand,hasEventListener,hasMapping,hasModel,hasView,hasWire,initialize,initialize,initialize,injectInto,isPartOfASequence,mapSingletonOf,mapSingleton,mapToInstance,map,removeCommand,removeEventListener,removeMapping,removeModel,removeView,removeWire,result,setApplicationDomain,setName,setName,setup,stop,stopAllSequencers,stopSequencer,stopSequencerWithEvent,willTrigger"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="com.soma.core.interfaces:ISomaInjector">
         <apiName>ISomaInjector</apiName>
         <shortdesc>
	 </shortdesc>
         <prolog>
            <author>Romuald Quantin
	 </author>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="ISomaInjector,com.soma.core.interfaces.ISomaInjector,addCommand,addEventListener,addModel,addView,addWire,classExtendsOrImplements,createChildInjector,createInstance,createPlugin,createPluginFromClassName,dispatchEvent,dispose,dispose,dispose,dispose,dispose,dispose,execute,executeNextCommand,fault,getApplicationDomain,getClass,getCommand,getCommands,getFQCN,getInstance,getLastSequencer,getModel,getModels,getName,getName,getParentInjector,getRunningSequencers,getSequencer,getView,getViews,getWire,getWires,hasCommand,hasEventListener,hasMapping,hasModel,hasView,hasWire,initialize,initialize,initialize,injectInto,isPartOfASequence,mapSingletonOf,mapSingleton,mapToInstance,map,removeCommand,removeEventListener,removeMapping,removeModel,removeView,removeWire,result,setApplicationDomain,setName,setName,setup,stop,stopAllSequencers,stopSequencer,stopSequencerWithEvent,willTrigger"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="com.soma.core.interfaces:IResponder">
         <apiName>IResponder</apiName>
         <shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 Interface used by a class that receive data from a asynchronous call.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	              <p>
                  <b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref>
               </p>
	              <p>
                  <b>Resources:</b> 
                  <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref>
               </p>
	              <p>
                  <b>Class version:</b> v2.0.0</p>
	              <p>
                  <b>Actionscript version:</b> 3.0</p>
	              <p>
                  <b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref>
               </p>
	 Interface used by a class that receive data from a asynchronous call.
	 </apiDesc>
         </apiClassifierDetail>
         <related-links>
            <link href="com.soma.core.controller.xml#SequenceCommand">
               <linktext>com.soma.core.controller.SequenceCommand</linktext>
            </link>
         </related-links>
         <Keywords>
            <meta name="keywords"
                  content="IResponder,com.soma.core.interfaces.IResponder,addCommand,addEventListener,addModel,addView,addWire,classExtendsOrImplements,createChildInjector,createInstance,createPlugin,createPluginFromClassName,dispatchEvent,dispose,dispose,dispose,dispose,dispose,dispose,execute,executeNextCommand,fault,getApplicationDomain,getClass,getCommand,getCommands,getFQCN,getInstance,getLastSequencer,getModel,getModels,getName,getName,getParentInjector,getRunningSequencers,getSequencer,getView,getViews,getWire,getWires,hasCommand,hasEventListener,hasMapping,hasModel,hasView,hasWire,initialize,initialize,initialize,injectInto,isPartOfASequence,mapSingletonOf,mapSingleton,mapToInstance,map,removeCommand,removeEventListener,removeMapping,removeModel,removeView,removeWire,result,setApplicationDomain,setName,setName,setup,stop,stopAllSequencers,stopSequencer,stopSequencerWithEvent,willTrigger"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="com.soma.core.interfaces:IWire">
         <apiName>IWire</apiName>
         <shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	              <p>
                  <b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref>
               </p>
	              <p>
                  <b>Resources:</b> 
                  <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref>
               </p>
	              <p>
                  <b>Class version:</b> v2.0.0</p>
	              <p>
                  <b>Actionscript version:</b> 3.0</p>
	              <p>
                  <b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref>
               </p>
	           </apiDesc>
         </apiClassifierDetail>
         <related-links>
            <link href="com.soma.core.wire.xml#Wire">
               <linktext>com.soma.core.wire.Wire</linktext>
            </link>
            <link href="com.soma.core.wire.xml#SomaWires">
               <linktext>com.soma.core.wire.SomaWires</linktext>
            </link>
         </related-links>
         <Keywords>
            <meta name="keywords"
                  content="IWire,com.soma.core.interfaces.IWire,commands,commands,controller,currentCommand,data,dispatcher,injector,instance,length,length,mediators,models,reflector,stage,viewComponent,views,wires,addCommand,addEventListener,addModel,addView,addWire,classExtendsOrImplements,createChildInjector,createInstance,createPlugin,createPluginFromClassName,dispatchEvent,dispose,dispose,dispose,dispose,dispose,dispose,execute,executeNextCommand,fault,getApplicationDomain,getClass,getCommand,getCommands,getFQCN,getInstance,getLastSequencer,getModel,getModels,getName,getName,getParentInjector,getRunningSequencers,getSequencer,getView,getViews,getWire,getWires,hasCommand,hasEventListener,hasMapping,hasModel,hasView,hasWire,initialize,initialize,initialize,injectInto,isPartOfASequence,mapSingletonOf,mapSingleton,mapToInstance,map,removeCommand,removeEventListener,removeMapping,removeModel,removeView,removeWire,result,setApplicationDomain,setName,setName,setup,stop,stopAllSequencers,stopSequencer,stopSequencerWithEvent,willTrigger"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="com.soma.core.interfaces:ISomaReflector">
         <apiName>ISomaReflector</apiName>
         <shortdesc>
	 </shortdesc>
         <prolog>
            <author>romuald
	 </author>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="ISomaReflector,com.soma.core.interfaces.ISomaReflector,addCommand,addEventListener,addModel,addView,addWire,classExtendsOrImplements,createChildInjector,createInstance,createPlugin,createPluginFromClassName,dispatchEvent,dispose,dispose,dispose,dispose,dispose,dispose,execute,executeNextCommand,fault,getApplicationDomain,getClass,getCommand,getCommands,getFQCN,getInstance,getLastSequencer,getModel,getModels,getName,getName,getParentInjector,getRunningSequencers,getSequencer,getView,getViews,getWire,getWires,hasCommand,hasEventListener,hasMapping,hasModel,hasView,hasWire,initialize,initialize,initialize,injectInto,isPartOfASequence,mapSingletonOf,mapSingleton,mapToInstance,map,removeCommand,removeEventListener,removeMapping,removeModel,removeView,removeWire,result,setApplicationDomain,setName,setName,setup,stop,stopAllSequencers,stopSequencer,stopSequencerWithEvent,willTrigger"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="com.soma.core.interfaces:ISequenceCommand">
         <apiName>ISequenceCommand</apiName>
         <shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.soma.core.interfaces:ICommand</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	              <p>
                  <b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref>
               </p>
	              <p>
                  <b>Resources:</b> 
                  <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref>
               </p>
	              <p>
                  <b>Class version:</b> v2.0.0</p>
	              <p>
                  <b>Actionscript version:</b> 3.0</p>
	              <p>
                  <b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref>
               </p>
	           </apiDesc>
         </apiClassifierDetail>
         <related-links>
            <link href="com.soma.core.controller.xml#SequenceCommand">
               <linktext>com.soma.core.controller.SequenceCommand</linktext>
            </link>
         </related-links>
         <Keywords>
            <meta name="keywords"
                  content="ISequenceCommand,com.soma.core.interfaces.ISequenceCommand,commands,commands,controller,currentCommand,data,dispatcher,injector,instance,length,length,mediators,models,reflector,stage,viewComponent,views,wires,addCommand,addEventListener,addModel,addView,addWire,classExtendsOrImplements,createChildInjector,createInstance,createPlugin,createPluginFromClassName,dispatchEvent,dispose,dispose,dispose,dispose,dispose,dispose,execute,executeNextCommand,fault,getApplicationDomain,getClass,getCommand,getCommands,getFQCN,getInstance,getLastSequencer,getModel,getModels,getName,getName,getParentInjector,getRunningSequencers,getSequencer,getView,getViews,getWire,getWires,hasCommand,hasEventListener,hasMapping,hasModel,hasView,hasWire,initialize,initialize,initialize,injectInto,isPartOfASequence,mapSingletonOf,mapSingleton,mapToInstance,map,removeCommand,removeEventListener,removeMapping,removeModel,removeView,removeWire,result,setApplicationDomain,setName,setName,setup,stop,stopAllSequencers,stopSequencer,stopSequencerWithEvent,willTrigger"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="com.soma.core.interfaces:IMediator">
         <apiName>IMediator</apiName>
         <shortdesc>
	 </shortdesc>
         <prolog>
            <author>Romuald Quantin
	 </author>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.soma.core.interfaces:IWire</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="IMediator,com.soma.core.interfaces.IMediator,commands,commands,controller,currentCommand,data,dispatcher,injector,instance,length,length,mediators,models,reflector,stage,viewComponent,views,wires"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="com.soma.core.interfaces:ICommand">
         <apiName>ICommand</apiName>
         <shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	              <p>
                  <b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref>
               </p>
	              <p>
                  <b>Resources:</b> 
                  <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref>
               </p>
	              <p>
                  <b>Class version:</b> v2.0.0</p>
	              <p>
                  <b>Actionscript version:</b> 3.0</p>
	              <p>
                  <b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref>
               </p>
	           </apiDesc>
         </apiClassifierDetail>
         <related-links>
            <link href="com.soma.core.controller.xml#Command">
               <linktext>com.soma.core.controller.Command</linktext>
            </link>
         </related-links>
         <Keywords>
            <meta name="keywords"
                  content="ICommand,com.soma.core.interfaces.ICommand,addCommand,addEventListener,addModel,addView,addWire,classExtendsOrImplements,createChildInjector,createInstance,createPlugin,createPluginFromClassName,dispatchEvent,dispose,dispose,dispose,dispose,dispose,dispose,execute,executeNextCommand,fault,getApplicationDomain,getClass,getCommand,getCommands,getFQCN,getInstance,getLastSequencer,getModel,getModels,getName,getName,getParentInjector,getRunningSequencers,getSequencer,getView,getViews,getWire,getWires,hasCommand,hasEventListener,hasMapping,hasModel,hasView,hasWire,initialize,initialize,initialize,injectInto,isPartOfASequence,mapSingletonOf,mapSingleton,mapToInstance,map,removeCommand,removeEventListener,removeMapping,removeModel,removeView,removeWire,result,setApplicationDomain,setName,setName,setup,stop,stopAllSequencers,stopSequencer,stopSequencerWithEvent,willTrigger"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="com.soma.core.interfaces:ICommandASync">
         <apiName>ICommandASync</apiName>
         <shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 Interface used to create asynchronous command.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.soma.core.interfaces:ICommand</apiBaseInterface>
               <apiBaseInterface>com.soma.core.interfaces:IResponder</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	              <p>
                  <b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref>
               </p>
	              <p>
                  <b>Resources:</b> 
                  <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref>
               </p>
	              <p>
                  <b>Class version:</b> v2.0.0</p>
	              <p>
                  <b>Actionscript version:</b> 3.0</p>
	              <p>
                  <b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref>
               </p>
	 Interface used to create asynchronous command.
	 </apiDesc>
            <example>
               <codeblock rev="3.0">
package {
	import flash.utils.clearTimeout;
	import flash.utils.setTimeout;
	import flash.events.Event;
	import com.soma.core.interfaces.ICommandASync;
	import com.soma.core.controller.Command;
	
	public class CommandASyncExample extends Command implements ICommandASync {
		private var _event:Event;
		private var _timer:int;
		public function CommandASyncExample() {
			
		}
		
		public function execute(event:Event):void {
			_event = event;
			_timer = setTimeout(result, 1000, {});
		}
		
		public function fault(info:Object):void {
			
		}
		
		public function result(data:Object):void {
			if (isPartOfASequence(_event)) {
				getSequencer(_event).executeNextCommand();
			}
			_event = null;
			clearTimeout(_timer);
		}
		
	}
}
	 </codeblock>
	           </example>
         </apiClassifierDetail>
         <related-links>
            <link href="com.soma.core.controller.xml#Command">
               <linktext>com.soma.core.controller.Command</linktext>
            </link>
            <link href="com.soma.core.interfaces.xml#ICommand">
               <linktext>com.soma.core.interfaces.ICommand</linktext>
            </link>
            <link href="com.soma.core.interfaces.xml#IResponder">
               <linktext>com.soma.core.interfaces.IResponder</linktext>
            </link>
         </related-links>
         <Keywords>
            <meta name="keywords" content="ICommandASync,com.soma.core.interfaces.ICommandASync"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="com.soma.core.interfaces:IParallelCommand">
         <apiName>IParallelCommand</apiName>
         <shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.soma.core.interfaces:ICommand</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	              <p>
                  <b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref>
               </p>
	              <p>
                  <b>Resources:</b> 
                  <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref>
               </p>
	              <p>
                  <b>Class version:</b> v2.0.0</p>
	              <p>
                  <b>Actionscript version:</b> 3.0</p>
	              <p>
                  <b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref>
               </p>
	           </apiDesc>
         </apiClassifierDetail>
         <related-links>
            <link href="com.soma.core.controller.xml#SomaController">
               <linktext>com.soma.core.controller.SomaController</linktext>
            </link>
            <link href="com.soma.core.controller.xml#Command">
               <linktext>com.soma.core.controller.Command</linktext>
            </link>
            <link href="com.soma.core.interfaces.xml#ICommand">
               <linktext>com.soma.core.interfaces.ICommand</linktext>
            </link>
            <link href="com.soma.core.interfaces.xml#IParallelCommand">
               <linktext>com.soma.core.interfaces.IParallelCommand</linktext>
            </link>
         </related-links>
         <Keywords>
            <meta name="keywords"
                  content="IParallelCommand,com.soma.core.interfaces.IParallelCommand,commands,commands,controller,currentCommand,data,dispatcher,injector,instance,length,length,mediators,models,reflector,stage,viewComponent,views,wires"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="com.soma.core.interfaces:ISomaPlugin">
         <apiName>ISomaPlugin</apiName>
         <shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 Interface used by a class that is meant to be instantiated by the framework (ex:SomaDebugger).</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	              <p>
                  <b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref>
               </p>
	              <p>
                  <b>Resources:</b> 
                  <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref>
               </p>
	              <p>
                  <b>Class version:</b> v2.0.0</p>
	              <p>
                  <b>Actionscript version:</b> 3.0</p>
	              <p>
                  <b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref>
               </p>
	 Interface used by a class that is meant to be instantiated by the framework (ex:SomaDebugger).
	 </apiDesc>
         </apiClassifierDetail>
         <related-links>
            <link href="com.soma.core.xml#Soma">
               <linktext>com.soma.core.Soma</linktext>
            </link>
            <link href="com.soma.core.interfaces.xml#ISomaPluginVO">
               <linktext>com.soma.core.interfaces.ISomaPluginVO</linktext>
            </link>
         </related-links>
         <Keywords>
            <meta name="keywords"
                  content="ISomaPlugin,com.soma.core.interfaces.ISomaPlugin,addCommand,addEventListener,addModel,addView,addWire,classExtendsOrImplements,createChildInjector,createInstance,createPlugin,createPluginFromClassName,dispatchEvent,dispose,dispose,dispose,dispose,dispose,dispose,execute,executeNextCommand,fault,getApplicationDomain,getClass,getCommand,getCommands,getFQCN,getInstance,getLastSequencer,getModel,getModels,getName,getName,getParentInjector,getRunningSequencers,getSequencer,getView,getViews,getWire,getWires,hasCommand,hasEventListener,hasMapping,hasModel,hasView,hasWire,initialize,initialize,initialize,injectInto,isPartOfASequence,mapSingletonOf,mapSingleton,mapToInstance,map,removeCommand,removeEventListener,removeMapping,removeModel,removeView,removeWire,result,setApplicationDomain,setName,setName,setup,stop,stopAllSequencers,stopSequencer,stopSequencerWithEvent,willTrigger"/>
         </Keywords>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="com.soma.core.mediator">
      <apiName>com.soma.core.mediator</apiName>
      <apiDetail/>
      <apiClassifier id="com.soma.core.mediator:Mediator">
         <apiName>Mediator</apiName>
         <shortdesc>
	 </shortdesc>
         <prolog>
            <author>Romuald Quantin
	 </author>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.soma.core.interfaces:IMediator</apiBaseInterface>
               <apiBaseClassifier>com.soma.core.wire:Wire</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="Mediator,com.soma.core.mediator.Mediator,_viewComponent,viewComponent,creationComplete,dispose,getMediatorByView,hasMediator,isMapped,mapView,postConstruct,removeMapping"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="com.soma.core.mediator:SomaMediators">
         <apiName>SomaMediators</apiName>
         <shortdesc>
	 </shortdesc>
         <prolog>
            <author>Romuald Quantin
	 </author>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="SomaMediators,com.soma.core.mediator.SomaMediators,creationComplete,dispose,getMediatorByView,hasMediator,isMapped,mapView,postConstruct,removeMapping"/>
         </Keywords>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="com.soma.core.model">
      <apiName>com.soma.core.model</apiName>
      <apiDetail/>
      <apiClassifier id="com.soma.core.model:Model">
         <apiName>Model</apiName>
         <shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 The model is the class used to manage you application's data model.
	 The data can be XML, local data, data retrieved from a server or anything.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.soma.core.interfaces:IModel</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	              <p>
                  <b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref>
               </p>
	              <p>
                  <b>Resources:</b> 
                  <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref>
               </p>
	              <p>
                  <b>Class version:</b> v2.0.0</p>
	              <p>
                  <b>Actionscript version:</b> 3.0</p>
	              <p>
                  <b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref>
               </p>
	              <p>The model is the class used to manage you application's data model.</p>
	              <p>The data can be XML, local data, data retrieved from a server or anything. Ideally, the data should be set to the data property of the model instance, but you are free to create specific getters.</p>
	           </apiDesc>
            <example>Create a model.
	 <codeblock rev="3.0">
package  {
	import com.soma.core.interfaces.IModel;
	import com.soma.core.model.Model;
	
	public class ModelExample extends Model implements IModel {
		
		public static const NAME:String = "Model example name";
		
		public function ModelExample() {
			super(NAME);
		}
		
		override protected function initialize():void {
			// called when the model has been registered to the framework
			data = new XML('&lt;myXML/&gt;');
			// you can use the model as a dispatcher (default dispatcher is the framework instance) to dispatch commands, example:
			dispatchEvent(new MyEvent(MyEvent.DATA_READY));
		}
		
		override protected function dispose():void {
			// called when the model has been removed from the framework
			data = null;
		}
		
	}
}
	 </codeblock>
	 Add a model.
	 <codeblock rev="3.0">
addModel(ModelExample.NAME, new ModelExample());
	 </codeblock>
	 Remove a model.
	 <codeblock rev="3.0">
removeModel(ModelExample.NAME);
	 </codeblock>
	 Retrieve a model.
	 <codeblock rev="3.0">
var model:ModelExample = getModel(ModelExample.NAME) as ModelExample;
	 </codeblock>
	 Create a shortcut to retrieve a model is a good practice.
	 <codeblock rev="3.0">
private function get modelExample():ModelExample {
	return getModel(ModelExample.NAME) as ModelExample;
}
private function doSomething():void {
	trace(modelExample.data);
}
	 </codeblock>
	           </example>
         </apiClassifierDetail>
         <related-links>
            <link href="com.soma.core.model.xml#SomaModels">
               <linktext>com.soma.core.model.SomaModels</linktext>
            </link>
         </related-links>
         <Keywords>
            <meta name="keywords"
                  content="Model,com.soma.core.model.Model,_data,_dispatcher,_name,data,dispatcher,models,addEventListener,addModel,dispatchEvent,dispose,dispose,getModel,getModels,getName,hasEventListener,hasModel,initialize,postConstruct,removeEventListener,removeModel,setName,willTrigger"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="com.soma.core.model:SomaModels">
         <apiName>SomaModels</apiName>
         <shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 The SomaModels class handles the models of the application.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	              <p>
                  <b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref>
               </p>
	              <p>
                  <b>Resources:</b> 
                  <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref>
               </p>
	              <p>
                  <b>Class version:</b> v2.0.0</p>
	              <p>
                  <b>Actionscript version:</b> 3.0</p>
	              <p>
                  <b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref>
               </p>
	 The SomaModels class handles the models of the application. See the Model class documentation for implementation.
	 </apiDesc>
         </apiClassifierDetail>
         <related-links>
            <link href="com.soma.core.model.xml#Model">
               <linktext>com.soma.core.model.Model</linktext>
            </link>
         </related-links>
         <Keywords>
            <meta name="keywords"
                  content="SomaModels,com.soma.core.model.SomaModels,_data,_dispatcher,_name,data,dispatcher,models,addEventListener,addModel,dispatchEvent,dispose,dispose,getModel,getModels,getName,hasEventListener,hasModel,initialize,postConstruct,removeEventListener,removeModel,setName,willTrigger"/>
         </Keywords>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="com.soma.core.view">
      <apiName>com.soma.core.view</apiName>
      <apiDetail/>
      <apiClassifier id="com.soma.core.view:SomaViews">
         <apiName>SomaViews</apiName>
         <shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 The SomaViews class handles the views of the application (DisplayObject).</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	              <p>
                  <b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref>
               </p>
	              <p>
                  <b>Resources:</b> 
                  <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref>
               </p>
	              <p>
                  <b>Class version:</b> v2.0.0</p>
	              <p>
                  <b>Actionscript version:</b> 3.0</p>
	              <p>
                  <b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref>
               </p>
	 The SomaViews class handles the views of the application (DisplayObject).
	 </apiDesc>
            <example>Add a view.
	 <codeblock rev="3.0">
addView(MySprite.NAME, new MySprite());
	 </codeblock>
	 Remove a view.
	 <codeblock rev="3.0">
removeView(MySprite.NAME);
	 </codeblock>
	 Retrieve a view.
	 <codeblock rev="3.0">
var sprite:MySprite = getView(MySprite.NAME) as MySprite;
	 </codeblock>
	 Create a shortcut to retrieve a view is a good practice.
	 <codeblock rev="3.0">
private function get mySprite():MySprite {
	return getView(MySprite.NAME) as MySprite;
}
private function doSomething():void {
	trace(mySprite);
}
	 </codeblock>
	           </example>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="SomaViews,com.soma.core.view.SomaViews,addView,dispose,getView,getViews,hasView,removeView"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="com.soma.core.view:ThrowErrorClass">
         <apiName>ThrowErrorClass</apiName>
         <shortdesc>
	 </shortdesc>
         <prolog>
            <author>romuald
	 </author>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords" content="ThrowErrorClass,com.soma.core.view.ThrowErrorClass"/>
         </Keywords>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="com.soma.core.wire">
      <apiName>com.soma.core.wire</apiName>
      <apiDetail/>
      <apiClassifier id="com.soma.core.wire:Wire">
         <apiName>Wire</apiName>
         <shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 A Wire is a class that will hold the logic of the Application.
	 Wires can be used in many ways, depending on how you want to manage your views, commands and models.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.soma.core.interfaces:IWire</apiBaseInterface>
               <apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	              <p>
                  <b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref>
               </p>
	              <p>
                  <b>Resources:</b> 
                  <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref>
               </p>
	              <p>
                  <b>Class version:</b> v2.0.0</p>
	              <p>
                  <b>Actionscript version:</b> 3.0</p>
	              <p>
                  <b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref>
               </p>
	              <p>A Wire is a class that will hold the logic of the Application.</p>
	              <p>Wires can be used in many ways, depending on how you want to manage your views, commands and models. A wire can be used as a manager and handle many models, views or other wires.
	 A wire can also be used in a one-to-one way (as a proxy), a single wire that handles a single view, a single wire that handles a single model, and so on.</p>
	              <p>Wires can be flexible or rigid depending on how your build your application.</p>
	              <p>A wire has access to everything in the framework: you can create views, add and dispatch commands, create models, access to the framework instance, access to the stage, and so on.</p>
	              <p>A wire can also be in control of the commands that are dispatched by listening to them and even stop their execution if needed (see the examples in this page).</p> 
	           </apiDesc>
            <example>Create a wire
	 <codeblock rev="3.0">
package  {
	import com.soma.core.wire.Wire;
	import com.soma.core.interfaces.IWire;
	
	public class WireExample extends Wire implements IWire {
		
		public static const NAME:String = "Wire example name";
		
		public function WireExample() {
			super(NAME);
		}
		
		override protected function initialize():void {
			// called when the wire has been registered to the framework
		}
		
		override protected function dispose():void {
			// called when the wire has been removed from the framework
		}
		
	}
}
	 </codeblock>
	 Add a wire.
	 <codeblock rev="3.0">
addWire(WireExample.NAME, new WireExample());
	 </codeblock>
	 Remove a wire.
	 <codeblock rev="3.0">
removeWire(WireExample.NAME);
	 </codeblock>
	 Retrieve a wire.
	 <codeblock rev="3.0">
var wire:WireExample = getWire(WireExample.NAME) as WireExample;
	 </codeblock>
	 Create a shortcut to retrieve a wire is a good practice.
	 <codeblock rev="3.0">
private function get wireExample():WireExample {
	return getWire(WireExample.NAME) as WireExample;
}
private function doSomething():void {
	trace(wireExample.myWireProperty);
}
	 </codeblock>
	 Listening to a command in a wire.
	 <codeblock rev="3.0">
override protected function initialize():void {
	// called when the wire has been registered to the framework
	 addEventListener(MyEvent.DO_SOMETHING, handler);
}
	 </codeblock>
	 Stopping the execution of a command in a wire.
	 You need to set the cancelable property of the event to true when you dispatch it.
	 Any command can be stopped using the flash event built-in method: preventDefault.
	 <codeblock rev="3.0">
override protected function initialize():void {
	// called when the wire has been registered to the framework
	 addEventListener(MyEvent.DO_SOMETHING, myEventHandler);
}
private function myEventHandler(event:MyEvent):void {
	e.preventDefault();
}
	 </codeblock>
	           </example>
         </apiClassifierDetail>
         <related-links>
            <link href="com.soma.core.wire.xml#SomaWires">
               <linktext>com.soma.core.wire.SomaWires</linktext>
            </link>
         </related-links>
         <Keywords>
            <meta name="keywords"
                  content="Wire,com.soma.core.wire.Wire,_name,injector,instance,mediators,stage,wires,addCommand,addEventListener,addModel,addView,addWire,addWire,dispatchEvent,dispose,dispose,getCommand,getCommands,getLastSequencer,getModel,getModels,getName,getRunningSequencers,getSequencer,getView,getViews,getWire,getWire,getWires,getWires,hasCommand,hasEventListener,hasModel,hasView,hasWire,hasWire,initialize,isPartOfASequence,postConstruct,removeCommand,removeEventListener,removeModel,removeView,removeWire,removeWire,setName,stopAllSequencers,stopSequencer,stopSequencerWithEvent,willTrigger"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="com.soma.core.wire:SomaWires">
         <apiName>SomaWires</apiName>
         <shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 The SomaWires class handles the wires of the application.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	              <p>
                  <b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref>
               </p>
	              <p>
                  <b>Resources:</b> 
                  <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref>
               </p>
	              <p>
                  <b>Class version:</b> v2.0.0</p>
	              <p>
                  <b>Actionscript version:</b> 3.0</p>
	              <p>
                  <b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref>
               </p>
	 The SomaWires class handles the wires of the application. See the Wire class documentation for implementation. 
	 </apiDesc>
         </apiClassifierDetail>
         <related-links>
            <link href="com.soma.core.wire.xml#Wire">
               <linktext>com.soma.core.wire.Wire</linktext>
            </link>
         </related-links>
         <Keywords>
            <meta name="keywords"
                  content="SomaWires,com.soma.core.wire.SomaWires,_name,injector,instance,mediators,stage,wires,addCommand,addEventListener,addModel,addView,addWire,addWire,dispatchEvent,dispose,dispose,getCommand,getCommands,getLastSequencer,getModel,getModels,getName,getRunningSequencers,getSequencer,getView,getViews,getWire,getWire,getWires,getWires,hasCommand,hasEventListener,hasModel,hasView,hasWire,hasWire,initialize,isPartOfASequence,postConstruct,removeCommand,removeEventListener,removeModel,removeView,removeWire,removeWire,setName,stopAllSequencers,stopSequencer,stopSequencerWithEvent,willTrigger"/>
         </Keywords>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="com.soma.core">
      <apiName>com.soma.core</apiName>
      <apiDetail/>
      <apiClassifier id="com.soma.core:Soma">
         <apiName>Soma</apiName>
         <shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 SomaCore is a lightweight event-based MVC framework written in AS3 that provides a structure, models, views management and commands.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>com.soma.core.interfaces:ISoma</apiBaseInterface>
               <apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface>
               <apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	              <p>
                  <b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref>
               </p>
	              <p>
                  <b>Resources:</b> 
                  <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref>
               </p>
	              <p>
                  <b>Class version:</b> v2.0.0</p>
	              <p>
                  <b>Actionscript version:</b> 3.0</p>
	              <p>
                  <b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref>
               </p>
	              <p>SomaCore is a lightweight event-based MVC framework written in AS3 that provides a structure, models, views management and commands.
	 Somacore can be used for Flash, Flex and AIR projects. SomaCore does not use any external library and does not use dependency injection. SomaCore is completely event-based and use a concept of wires to code in a efficient decoupled way.
	 You can use SomaCore in anything, except to include/distribute it in another framework, application, template, component or structure that is meant to build, scaffold or generate source files.</p>
	              <p>Few things to know: SomaCore requires the stage to be instantiated. Commands are normal built-in Flash events with the bubbles property set to true. Commands can be used in the views as they are not really framework code.
	 Wires are the glue of the frameworks elements (models, commands, views, wires) and can be used the way you wish, as proxy/mediators or managers.
	 Wires can manage one class or multiple classes.
	 Parallel and sequence commands are built-in.
	 You can create and register customs plugins to the framework (such as the SomaDebugger plugin).
	 You can access to all the framework elements that you have registered (stage, framework instance, wires, models, views and commands) from commands and wires. 
	 </p>
	           </apiDesc>
            <example>To get started, create a instance of a class that extends the Soma class and implements the ISoma interface.
	 <codeblock rev="3.0">
package  {
	import com.soma.core.interfaces.ISoma;
	import flash.display.Sprite;
	
	public class Main extends Sprite {
		
		private var _app:ISoma;
		
		public function Main() {
			_app = new SomaApplication(stage);
		}
		
	}
}
	 </codeblock>
	              <codeblock rev="3.0">
package  {
	import com.soma.core.Soma;
	import com.soma.core.interfaces.ISoma;
	import flash.display.Stage;
	
	public class SomaApplication extends Soma implements ISoma {
		public function SomaApplication(stage:Stage) {
			super(stage);
		}
		
		override protected function registerCommands():void {
			
		}
		override protected function registerModels():void {
			
		}
		override protected function registerPlugins():void {
			
		}
		override protected function registerViews():void {
			
		}
		override protected function registerWires():void {
			
		}
		
	}
}
	 </codeblock>
	 
	           </example>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="Soma,com.soma.core.Soma,_injectorClass,_injector,_mediators,_reflector,controller,injectorClass,injector,mediators,models,reflector,stage,views,wires,addCommand,addModel,addView,addWire,createPlugin,createPluginFromClassName,dispose,getCommand,getCommands,getLastSequencer,getModel,getModels,getRunningSequencers,getSequencer,getView,getViews,getWire,getWires,hasCommand,hasModel,hasView,hasWire,initialize,initializeInjector,isPartOfASequence,registerCommands,registerModels,registerPlugins,registerViews,registerWires,removeCommand,removeModel,removeView,removeWire,setup,start,stopAllSequencers,stopSequencer,stopSequencerWithEvent"/>
         </Keywords>
      </apiClassifier>
   </apiPackage>
</allClasses>