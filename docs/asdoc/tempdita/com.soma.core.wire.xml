<?xml version="1.0" encoding="UTF-8"?><apiPackage id="com.soma.core.wire"><apiName>com.soma.core.wire</apiName><apiDetail/><apiClassifier id="com.soma.core.wire:Wire"><apiName>Wire</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 A Wire is a class that will hold the logic of the Application.
	 Wires can be used in many ways, depending on how you want to manage your views, commands and models.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:IWire</apiBaseInterface><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 <p>A Wire is a class that will hold the logic of the Application.</p>
	 <p>Wires can be used in many ways, depending on how you want to manage your views, commands and models. A wire can be used as a manager and handle many models, views or other wires.
	 A wire can also be used in a one-to-one way (as a proxy), a single wire that handles a single view, a single wire that handles a single model, and so on.</p>
	 <p>Wires can be flexible or rigid depending on how your build your application.</p>
	 <p>A wire has access to everything in the framework: you can create views, add and dispatch commands, create models, access to the framework instance, access to the stage, and so on.</p>
	 <p>A wire can also be in control of the commands that are dispatched by listening to them and even stop their execution if needed (see the examples in this page).</p> 
	 </apiDesc><example>Create a wire
	 <codeblock rev="3.0">
package  {
	import com.soma.core.wire.Wire;
	import com.soma.core.interfaces.IWire;
	
	public class WireExample extends Wire implements IWire {
		
		public static const NAME:String = "Wire example name";
		
		public function WireExample() {
			super(NAME);
		}
		
		override protected function initialize():void {
			// called when the wire has been registered to the framework
		}
		
		override protected function dispose():void {
			// called when the wire has been removed from the framework
		}
		
	}
}
	 </codeblock>
	 Add a wire.
	 <codeblock rev="3.0">
addWire(WireExample.NAME, new WireExample());
	 </codeblock>
	 Remove a wire.
	 <codeblock rev="3.0">
removeWire(WireExample.NAME);
	 </codeblock>
	 Retrieve a wire.
	 <codeblock rev="3.0">
var wire:WireExample = getWire(WireExample.NAME) as WireExample;
	 </codeblock>
	 Create a shortcut to retrieve a wire is a good practice (not necessary with injection enabled).
	 <codeblock rev="3.0">
private function get wireExample():WireExample {
	return getWire(WireExample.NAME) as WireExample;
}
private function doSomething():void {
	trace(wireExample.myWireProperty);
}
	 </codeblock>
	 Listening to a command in a wire.
	 <codeblock rev="3.0">
override protected function initialize():void {
	// called when the wire has been registered to the framework
	 addEventListener(MyEvent.DO_SOMETHING, handler);
}
	 </codeblock>
	 Stopping the execution of a command in a wire.
	 You need to set the cancelable property of the event to true when you dispatch it.
	 Any command can be stopped using the flash event built-in method: preventDefault.
	 <codeblock rev="3.0">
override protected function initialize():void {
	// called when the wire has been registered to the framework
	 addEventListener(MyEvent.DO_SOMETHING, myEventHandler);
}
private function myEventHandler(event:MyEvent):void {
	e.preventDefault();
}
	 </codeblock>
	 </example></apiClassifierDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links><apiConstructor id="com.soma.core.wire:Wire:Wire"><apiName>Wire</apiName><shortdesc>
		 Create an instance of a Wire class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Create an instance of a Wire class. The Wire class should be extended.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.soma.core.wire:Wire:addCommand"><apiName>addCommand</apiName><shortdesc>
		 Registers a command to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam><apiParam><apiItemName>command</apiItemName><apiType value="Class"/><apiDesc>Class that will be executed when a command has been dispatched.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a command to the framework.
		 </apiDesc><example><codeblock rev="3.0">addCommand(MyEvent.DOSOMETHING, MyCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:addEventListener"><apiName>addEventListener</apiName><shortdesc>
		 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener function that processes the event.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the listener works in the capture phase or the target and bubbling phases.
		 </apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>The priority level of the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the reference to the listener is strong or weak.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:addModel"><apiName>addModel</apiName><shortdesc>
		 Registers a model to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>The model instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam><apiParam><apiItemName>model</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>Instance of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a model to the framework.
		 </apiDesc><example><codeblock rev="3.0">addModel(MyModel.NAME, new MyModel());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:addView"><apiName>addView</apiName><shortdesc>
		 Registers a view to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>The view instance.
		 </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam><apiParam><apiItemName>view</apiItemName><apiType value="Object"/><apiDesc>Instance of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a view to the framework.
		 </apiDesc><example><codeblock rev="3.0">addView(MySprite.NAME, new MySprite());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:addWire"><apiName>addWire</apiName><shortdesc>
		 Registers a wire to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>The wire instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam><apiParam><apiItemName>wire</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>Instance of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a wire to the framework.
		 </apiDesc><example><codeblock rev="3.0">addWire(MyWire.NAME, new MyWire());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
		 Dispatches an event into the event flow.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A value of true unless preventDefault() is called on the event, in which case it returns false.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>The event object dispatched into the event flow.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Dispatches an event into the event flow. The event target is the EventDispatcher object upon which dispatchEvent() is called.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:dispose"><apiName>dispose</apiName><shortdesc>
		 Method that can you can override, called when the wire has been removed from the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Method that can you can override, called when the wire has been removed from the framework.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:getCommand"><apiName>getCommand</apiName><shortdesc>
		 Retrieves the command class that has been registered with a command name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A class.
		 </apiDesc><apiType value="Class"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the command class that has been registered with a command name.
		 </apiDesc><example><codeblock rev="3.0">var commandClass:ICommand = getCommand(MyEvent.DOSOMETHING) as ICommand;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getCommands"><apiName>getCommands</apiName><shortdesc>
		 Retrieves all the command names (event type) that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An Array of String (command name).
		 </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the command names (event type) that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var commands:Array = getCommands();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getLastSequencer"><apiName>getLastSequencer</apiName><shortdesc>
		 Retrieves the last sequence command that has been instantiated in the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An ISequenceCommand instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the last sequence command that has been instantiated in the framework.
		 </apiDesc><example><codeblock rev="3.0">var lastSequencer:ISequenceCommand = getLastSequencer();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getModel"><apiName>getModel</apiName><shortdesc>
		 Retrieves the model instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A IModel instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the model instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myModel:MyModel = getModel(MyModel.NAME) as MyModel;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getModels"><apiName>getModels</apiName><shortdesc>
		 Retrieves all the model instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the model instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var models:Dictionary = getModels();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getName"><apiName>getName</apiName><shortdesc>
		 Retrieves the name of the wire.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A String.
		 </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the name of the wire.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:getRunningSequencers"><apiName>getRunningSequencers</apiName><shortdesc>
		 Retrieves all the sequence command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An Array of ISequenceCommand instances.
		 </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the sequence command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">var sequencers:Array = getRunningSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getSequencer"><apiName>getSequencer</apiName><shortdesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A sequencer (ISequenceCommand).
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var sequencer:ISequenceCommand = getSequencer(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getView"><apiName>getView</apiName><shortdesc>
		 Retrieves the view instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>An Object instance.
		 </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the view instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var mySprite:MySprite = getView(MySprite.NAME) as MySprite;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getViews"><apiName>getViews</apiName><shortdesc>
		 Retrieves all the view instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the view instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var sprites:Dictionary = getViews();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getWire"><apiName>getWire</apiName><shortdesc>
		 Retrieves the wire instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A wire instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the wire instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myWire:MyWire = getWire(MyWire.NAME) as MyWire;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:getWires"><apiName>getWires</apiName><shortdesc>
		 Retrieves all the wire instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the wire instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var wires:Dictionary = getWires();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:hasCommand"><apiName>hasCommand</apiName><shortdesc>
		 Indicates wether a command has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a command has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
		 Checks whether the EventDispatcher object has any listeners registered for a specific type of event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A value of true if a listener of the specified type is registered; false otherwise.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Checks whether the EventDispatcher object has any listeners registered for a specific type of event.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:hasModel"><apiName>hasModel</apiName><shortdesc>
		 Indicates wether a model has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a model has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:hasView"><apiName>hasView</apiName><shortdesc>
		 Indicates wether a view has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a view has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:hasWire"><apiName>hasWire</apiName><shortdesc>
		 Indicates wether a wire has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a wire has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:initialize"><apiName>initialize</apiName><shortdesc>
		 Method that can you can override, called when the wire has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Method that can you can override, called when the wire has been registered to the framework.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:isPartOfASequence"><apiName>isPartOfASequence</apiName><shortdesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
		 Indicates wether an event has been instantiated from a ISequenceCommand class.
		 </apiDesc><example><codeblock rev="3.0">var inSequence:Boolean = isPartOfASequence(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:postConstruct"><apiName>postConstruct</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:removeCommand"><apiName>removeCommand</apiName><shortdesc>
		 Removes a command from the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a command from the framework.
		 </apiDesc><example><codeblock rev="3.0">removeCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
		 Removes a listener from the EventDispatcher object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event. 
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener object to remove. 
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies whether the listener was registered for the capture phase or the target and bubbling phases.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a listener from the EventDispatcher object. If there is no matching listener registered with the EventDispatcher object, a call to this method has no effect.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:removeModel"><apiName>removeModel</apiName><shortdesc>
		 Removes a model from the framework and call the dispose method of this model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a model from the framework and call the dispose method of this model.
		 </apiDesc><example><codeblock rev="3.0">removeModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:removeView"><apiName>removeView</apiName><shortdesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.
		 </apiDesc><example><codeblock rev="3.0">removeView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:removeWire"><apiName>removeWire</apiName><shortdesc>
		 Removes a wire from the framework and call the dispose method of this wire.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a wire from the framework and call the dispose method of this wire.
		 </apiDesc><example><codeblock rev="3.0">removeWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:setName"><apiName>setName</apiName><shortdesc>
		 Sets the name of the wire.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>A String.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets the name of the wire.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:Wire:stopAllSequencers"><apiName>stopAllSequencers</apiName><shortdesc>
		 Stops all the sequence command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Stops all the sequence command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">stopAllSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:stopSequencerWithEvent"><apiName>stopSequencerWithEvent</apiName><shortdesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean (true if a sequence command has been stopped).
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencerWithEvent(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:stopSequencer"><apiName>stopSequencer</apiName><shortdesc>
		 Stops a sequence command using the sequence command instance itself.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A Boolean (true if the sequence command has been stopped).
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>sequencer</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>The sequence command instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using the sequence command instance itself.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencer(mySequenceCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.wire:Wire:willTrigger"><apiName>willTrigger</apiName><shortdesc>
		 Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiFinal/><apiReturn><apiDesc>A value of true if a listener of the specified type will be triggered; false otherwise. 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.soma.core.wire:Wire:protected:_name"><apiName>_name</apiName><shortdesc>
		 Name of the wire.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
		 Name of the wire.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.wire:Wire:injector:get"><apiName>injector</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.interfaces:ISomaInjector</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="com.soma.core.wire:Wire:instance:get"><apiName>instance</apiName><shortdesc>
		 Retrieves the instance of the framework.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>com.soma.core.interfaces:ISoma</apiValueClassifier></apiValueDef><apiDesc>
		 Retrieves the instance of the framework.
		 </apiDesc><example><codeblock rev="3.0">var myExtendedSomaClass:SomaApplication = SomaApplication(instance);</codeblock>
		 </example></apiValueDetail></apiValue><apiValue id="com.soma.core.wire:Wire:mediators:get"><apiName>mediators</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.mediator:SomaMediators</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="com.soma.core.wire:Wire:stage:get"><apiName>stage</apiName><shortdesc>
		 Get the stage that has been registered to the framework.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Stage"/></apiValueDef><apiDesc>
		 Get the stage that has been registered to the framework.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.soma.core.wire:SomaWires"><apiName>SomaWires</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Class version: v2.0.0
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 The SomaWires class handles the wires of the application.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Class version:</b> v2.0.0</p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 The SomaWires class handles the wires of the application. See the Wire class documentation for implementation. 
	 </apiDesc></apiClassifierDetail><related-links><link href="com.soma.core.wire.xml#Wire"><linktext>com.soma.core.wire.Wire</linktext></link></related-links><apiConstructor id="com.soma.core.wire:SomaWires:SomaWires"><apiName>SomaWires</apiName><shortdesc>
		 Create an instance of the SomaWires class.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>instance</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISoma</apiOperationClassifier><apiDesc>Framework instance.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Create an instance of the SomaWires class. Should not be directly instantiated, the framework will instantiate the class.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.soma.core.wire:SomaWires:addWire"><apiName>addWire</apiName><shortdesc>
		 Registers a wire to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The wire instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam><apiParam><apiItemName>wire</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>Instance of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a wire to the framework.
		 </apiDesc><example><codeblock rev="3.0">addWire(MyWire.NAME, new MyWire());</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:SomaWires:dispose"><apiName>dispose</apiName><shortdesc>
		 Destroys all the models and properties.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Destroys all the models and properties. The class will call the dispose method of each model instance.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:SomaWires:getWire"><apiName>getWire</apiName><shortdesc>
		 Retrieves the wire instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A wire instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the wire instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myWire:MyWire = getWire(MyWire.NAME) as MyWire;</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:SomaWires:getWires"><apiName>getWires</apiName><shortdesc>
		 Retrieves all the wire instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the wire instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var wires:Dictionary = getWires();</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:SomaWires:hasWire"><apiName>hasWire</apiName><shortdesc>
		 Indicates wether a wire has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates wether a wire has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.wire:SomaWires:removeWire"><apiName>removeWire</apiName><shortdesc>
		 Removes a wire from the framework and call the dispose method of this wire.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a wire from the framework and call the dispose method of this wire.
		 </apiDesc><example><codeblock rev="3.0">removeWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiValue id="com.soma.core.wire:SomaWires:protected:wires"><apiName>wires</apiName><shortdesc>
		 List of the wires registered to the framework.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
		 List of the wires registered to the framework.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>