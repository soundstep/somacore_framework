<?xml version="1.0" encoding="UTF-8"?><apiPackage id="com.soma.core.interfaces"><apiName>com.soma.core.interfaces</apiName><apiDetail/><apiClassifier id="com.soma.core.interfaces:ISomaPluginVO"><apiName>ISomaPluginVO</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 Interface used by a class that will hold the plugin options (ex: SomaDebuggerVO).</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 Interface used by a class that will hold the plugin options (ex: SomaDebuggerVO).
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="com.soma.core.interfaces:ISoma"><apiName>ISoma</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 Interface used by the class that will extend the Soma class.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 Interface used by the class that will extend the Soma class.
	 </apiDesc></apiClassifierDetail><related-links><link href="com.soma.core.xml#Soma"><linktext>com.soma.core.Soma</linktext></link></related-links><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:addCommand"><apiName>addCommand</apiName><shortdesc>
		 Registers a command to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam><apiParam><apiItemName>command</apiItemName><apiType value="Class"/><apiDesc>Class that will be executed when a command has been dispatched.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a command to the framework.
		 </apiDesc><example><codeblock rev="3.0">addCommand(MyEvent.DOSOMETHING, MyCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:addEventListener"><apiName>addEventListener</apiName><shortdesc>
		 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener function that processes the event.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the listener works in the capture phase or the target and bubbling phases.
		 </apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>The priority level of the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the reference to the listener is strong or weak.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:addModel"><apiName>addModel</apiName><shortdesc>
		 Registers a model to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The model instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam><apiParam><apiItemName>model</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier><apiDesc>Instance of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a model to the framework.
		 </apiDesc><example><codeblock rev="3.0">addModel(MyModel.NAME, new MyModel());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:addView"><apiName>addView</apiName><shortdesc>
		 Registers a view to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The view instance.
		 </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam><apiParam><apiItemName>view</apiItemName><apiType value="Object"/><apiDesc>Instance of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a view to the framework.
		 </apiDesc><example><codeblock rev="3.0">addView(MySprite.NAME, new MySprite());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:addWire"><apiName>addWire</apiName><shortdesc>
		 Registers a wire to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The wire instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam><apiParam><apiItemName>wire</apiItemName><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier><apiDesc>Instance of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers a wire to the framework.
		 </apiDesc><example><codeblock rev="3.0">addWire(MyWire.NAME, new MyWire());</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:createPluginFromClassName"><apiName>createPluginFromClassName</apiName><shortdesc>
		 Creates a plugin instance using the class name and the getDefinitionByName method.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An instance of the plugin.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISomaPlugin</apiOperationClassifier></apiReturn><apiParam><apiItemName>pluginClassName</apiItemName><apiType value="String"/><apiDesc>Class name of the plugin that will be instantiated.
		 </apiDesc></apiParam><apiParam><apiItemName>pluginVO</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISomaPluginVO</apiOperationClassifier><apiDesc>Value Object class of the plugin.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a plugin instance using the class name and the getDefinitionByName method.
		 </apiDesc><example><codeblock rev="3.0">
var pluginVO:SomaDebuggerVO = new SomaDebuggerVO(this, SomaDebugger.NAME_DEFAULT, getCommands(), true, false);
var debugger:SomaDebugger = createPluginFromClassName("com.soma.core.debugger.SomaDebugger", pluginVO) as SomaDebugger;
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:createPlugin"><apiName>createPlugin</apiName><shortdesc>
		 Creates a plugin instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An instance of the plugin.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISomaPlugin</apiOperationClassifier></apiReturn><apiParam><apiItemName>plugin</apiItemName><apiType value="Class"/><apiDesc>Class of the plugin that will be instantiated.
		 </apiDesc></apiParam><apiParam><apiItemName>pluginVO</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISomaPluginVO</apiOperationClassifier><apiDesc>Value Object class of the plugin.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a plugin instance.
		 </apiDesc><example><codeblock rev="3.0">
var pluginVO:SomaDebuggerVO = new SomaDebuggerVO(this, SomaDebugger.NAME_DEFAULT, getCommands(), true, false);
var debugger:SomaDebugger = createPlugin(SomaDebugger, pluginVO) as SomaDebugger;
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
		 Dispatches an event into the event flow.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A value of true unless preventDefault() is called on the event, in which case it returns false.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>The event object dispatched into the event flow.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Dispatches an event into the event flow. The event target is the EventDispatcher object upon which dispatchEvent() is called.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:dispose"><apiName>dispose</apiName><shortdesc>
		 Destroys the SomaCore core classes and elements registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Destroys the SomaCore core classes and elements registered to the framework.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getCommand"><apiName>getCommand</apiName><shortdesc>
		 Retrieves the command class that has been registered with a command name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A class.
		 </apiDesc><apiType value="Class"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the command class that has been registered with a command name.
		 </apiDesc><example><codeblock rev="3.0">var commandClass:ICommand = getCommand(MyEvent.DOSOMETHING) as ICommand;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getCommands"><apiName>getCommands</apiName><shortdesc>
		 Retrieves all the command names (event type) that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An Array of String (command name).
		 </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the command names (event type) that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var commands:Array = getCommands();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getLastSequencer"><apiName>getLastSequencer</apiName><shortdesc>
		 Retrieves the last sequence command that has been instantiated in the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An ISequenceCommand instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the last sequence command that has been instantiated in the framework.
		 </apiDesc><example><codeblock rev="3.0">var lastSequencer:ISequenceCommand = getLastSequencer();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getModel"><apiName>getModel</apiName><shortdesc>
		 Retrieves the model instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A IModel instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IModel</apiOperationClassifier></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the model instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myModel:MyModel = getModel(MyModel.NAME) as MyModel;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getModels"><apiName>getModels</apiName><shortdesc>
		 Retrieves all the model instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the model instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var models:Dictionary = getModels();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getRunningSequencers"><apiName>getRunningSequencers</apiName><shortdesc>
		 Retrieves all the sequence command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An Array of ISequenceCommand instances.
		 </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the sequence command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">var sequencers:Array = getRunningSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getSequencer"><apiName>getSequencer</apiName><shortdesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A sequencer (ISequenceCommand).
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the sequence command instance using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var sequencer:ISequenceCommand = getSequencer(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getView"><apiName>getView</apiName><shortdesc>
		 Retrieves the view instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An Object instance.
		 </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the view instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var mySprite:MySprite = getView(MySprite.NAME) as MySprite;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getViews"><apiName>getViews</apiName><shortdesc>
		 Retrieves all the view instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the view instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var sprites:Dictionary = getViews();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getWire"><apiName>getWire</apiName><shortdesc>
		 Retrieves the wire instance that has been registered using its name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A wire instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:IWire</apiOperationClassifier></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the wire instance that has been registered using its name.
		 </apiDesc><example><codeblock rev="3.0">var myWire:MyWire = getWire(MyWire.NAME) as MyWire;</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:getWires"><apiName>getWires</apiName><shortdesc>
		 Retrieves all the wire instances that have been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Dictionary (the key of the Dictionary is the name used for the registration).
		 </apiDesc><apiType value="flash.utils:Dictionary"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves all the wire instances that have been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">var wires:Dictionary = getWires();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:hasCommand"><apiName>hasCommand</apiName><shortdesc>
		 Indicates whether a command has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates whether a command has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
		 Checks whether the EventDispatcher object has any listeners registered for a specific type of event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A value of true if a listener of the specified type is registered; false otherwise.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Checks whether the EventDispatcher object has any listeners registered for a specific type of event.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:hasModel"><apiName>hasModel</apiName><shortdesc>
		 Indicates whether a model has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates whether a model has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:hasView"><apiName>hasView</apiName><shortdesc>
		 Indicates whether a view has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates whether a view has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:hasWire"><apiName>hasWire</apiName><shortdesc>
		 Indicates whether a wire has been registered to the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates whether a wire has been registered to the framework.
		 </apiDesc><example><codeblock rev="3.0">hasWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:isPartOfASequence"><apiName>isPartOfASequence</apiName><shortdesc>
		 Indicates whether an event has been instantiated from a ISequenceCommand class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
		 Indicates whether an event has been instantiated from a ISequenceCommand class.
		 </apiDesc><example><codeblock rev="3.0">var inSequence:Boolean = isPartOfASequence(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:removeCommand"><apiName>removeCommand</apiName><shortdesc>
		 Removes a command from the framework.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiType value="String"/><apiDesc>Event type that is used as a command name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a command from the framework.
		 </apiDesc><example><codeblock rev="3.0">removeCommand(MyEvent.DOSOMETHING);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
		 Removes a listener from the EventDispatcher object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event. 
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener object to remove. 
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies whether the listener was registered for the capture phase or the target and bubbling phases.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a listener from the EventDispatcher object. If there is no matching listener registered with the EventDispatcher object, a call to this method has no effect.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:removeModel"><apiName>removeModel</apiName><shortdesc>
		 Removes a model from the framework and call the dispose method of this model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>modelName</apiItemName><apiType value="String"/><apiDesc>Name of the model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a model from the framework and call the dispose method of this model.
		 </apiDesc><example><codeblock rev="3.0">removeModel(MyModel.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.model.xml#SomaModels"><linktext>com.soma.core.model.SomaModels</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:removeView"><apiName>removeView</apiName><shortdesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewName</apiItemName><apiType value="String"/><apiDesc>Name of the view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a view from the framework and call the (optional) dispose method of this view.
		 </apiDesc><example><codeblock rev="3.0">removeView(MySprite.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.view.xml#SomaViews"><linktext>com.soma.core.view.SomaViews</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:removeWire"><apiName>removeWire</apiName><shortdesc>
		 Removes a wire from the framework and call the dispose method of this wire.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>wireName</apiItemName><apiType value="String"/><apiDesc>Name of the wire.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a wire from the framework and call the dispose method of this wire.
		 </apiDesc><example><codeblock rev="3.0">removeWire(MyWire.NAME);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:setup"><apiName>setup</apiName><shortdesc>
		 Register elements that the frameworks needs to be ready, such as the stage and the optional injector class (default is SomaInjector).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>stage</apiItemName><apiType value="flash.display:Stage"/><apiData>null</apiData><apiDesc>The stage is used as a global EventDispatcher (as well as the Soma class), and is required to instantiate the framework.
		 </apiDesc></apiParam><apiParam><apiItemName>injectorClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Class that must extend ISomaInjector.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Register elements that the frameworks needs to be ready, such as the stage and the optional injector class (default is SomaInjector).
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:stopAllSequencers"><apiName>stopAllSequencers</apiName><shortdesc>
		 Stops all the sequence command instances that are running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Stops all the sequence command instances that are running.
		 </apiDesc><example><codeblock rev="3.0">stopAllSequencers();</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:stopSequencerWithEvent"><apiName>stopSequencerWithEvent</apiName><shortdesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean (true if a sequence command has been stopped).
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using an event instance that has been created from this sequence command.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencerWithEvent(myEvent);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:stopSequencer"><apiName>stopSequencer</apiName><shortdesc>
		 Stops a sequence command using the sequence command instance itself.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean (true if the sequence command has been stopped).
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>sequencer</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISequenceCommand</apiOperationClassifier><apiDesc>The sequence command instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Stops a sequence command using the sequence command instance itself.
		 </apiDesc><example><codeblock rev="3.0">var success:Boolean = stopSequencer(mySequenceCommand);</codeblock>
		 </example></apiOperationDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link></related-links></apiOperation><apiOperation id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:willTrigger"><apiName>willTrigger</apiName><shortdesc>
		 Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A value of true if a listener of the specified type will be triggered; false otherwise. 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:controller:get"><apiName>controller</apiName><shortdesc>
		 Gets the commands manager instance.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.controller:SomaController</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the commands manager instance.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:injectorClass:get"><apiName>injectorClass</apiName><shortdesc>
		 Retrieves the injector Class registered to the framework.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
		 Retrieves the injector Class registered to the framework.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:injector:get"><apiName>injector</apiName><shortdesc>
		 Retrieves the injector instance that has been created by the framework from the injector Class registered.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.interfaces:ISomaInjector</apiValueClassifier></apiValueDef><apiDesc>
		 Retrieves the injector instance that has been created by the framework from the injector Class registered.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:mediators:get"><apiName>mediators</apiName><shortdesc>
		 Gets the mediator manager instance that has been created by the framework from the injector Class registered.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.mediator:SomaMediators</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the mediator manager instance that has been created by the framework from the injector Class registered.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:models:get"><apiName>models</apiName><shortdesc>
		 Gets the model manager instance.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.model:SomaModels</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the model manager instance.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:reflector:get"><apiName>reflector</apiName><shortdesc>
		 Retrieves the refletor instance.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.interfaces:ISomaReflector</apiValueClassifier></apiValueDef><apiDesc>
		 Retrieves the refletor instance.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:stage:get"><apiName>stage</apiName><shortdesc>
		 Get the stage that has been registered to the framework.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Stage"/></apiValueDef><apiDesc>
		 Get the stage that has been registered to the framework.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:views:get"><apiName>views</apiName><shortdesc>
		 Gets the view manager class.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.view:SomaViews</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the view manager class.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.interfaces:ISoma:com.soma.core.interfaces:ISoma:wires:get"><apiName>wires</apiName><shortdesc>
		 Gets the wires manager instance.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.soma.core.wire:SomaWires</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the wires manager instance.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.soma.core.interfaces:IModel"><apiName>IModel</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 </apiDesc></apiClassifierDetail><related-links><link href="com.soma.core.model.xml#Model"><linktext>com.soma.core.model.Model</linktext></link></related-links><apiOperation id="com.soma.core.interfaces:IModel:com.soma.core.interfaces:IModel:dispose"><apiName>dispose</apiName><shortdesc>
		 Method that you can overwrite, called by the framework when the model is removed.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Method that you can overwrite, called by the framework when the model is removed.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:IModel:com.soma.core.interfaces:IModel:getName"><apiName>getName</apiName><shortdesc>
		 Retrieves the name of the model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A String.
		 </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the name of the model.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:IModel:com.soma.core.interfaces:IModel:initialize"><apiName>initialize</apiName><shortdesc>
		 Method that you can overwrite, called by the framework when the model is initialized.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Method that you can overwrite, called by the framework when the model is initialized.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:IModel:com.soma.core.interfaces:IModel:setName"><apiName>setName</apiName><shortdesc>
		 Sets the name of the model.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>A String.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets the name of the model.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.soma.core.interfaces:IModel:com.soma.core.interfaces:IModel:data:get"><apiName>data</apiName><shortdesc>
		 Data of the model.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
		 Data of the model.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.interfaces:IModel:com.soma.core.interfaces:IModel:dispatcher:get"><apiName>dispatcher</apiName><shortdesc>
		 EventDispatcher instance of the model.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:IEventDispatcher"/><apiDefaultValue>The framework instance.
		 </apiDefaultValue></apiValueDef><apiDesc>
		 EventDispatcher instance of the model.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.soma.core.interfaces:ISomaInjector"><apiName>ISomaInjector</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 The ISomaInjector interface exposes the injection methods used by the framework.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 The ISomaInjector interface exposes the injection methods used by the framework. 
	 </apiDesc></apiClassifierDetail><related-links><link href="com.soma.core.di.xml#SomaInjector"><linktext>com.soma.core.di.SomaInjector</linktext></link></related-links><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:createChildInjector"><apiName>createChildInjector</apiName><shortdesc>
		 Creates a child injector.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A ISomaInjector instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISomaInjector</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Creates a child injector.
		 The child injector inherits the rules of its parents.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:createInstance"><apiName>createInstance</apiName><shortdesc>
		 Instantiates a new instance from a given class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An instance of the Class target.
		 </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>classTarget</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Instantiates a new instance from a given class.
		 This method will always creates a new instance, regardless of any singleton mapping.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:dispose"><apiName>dispose</apiName><shortdesc>
		 Destroys the injector elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Destroys the injector elements.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:getInstance"><apiName>getInstance</apiName><shortdesc>
		 Retrieves or instantiates an instance of the given Class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An instance of the Class target.
		 </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>classTarget</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData/><apiDesc>Injection name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves or instantiates an instance of the given Class.
		 This method needs a mapping rule, the instance can be a singleton or a new one.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:getParentInjector"><apiName>getParentInjector</apiName><shortdesc>
		 Retrieves the injector parent if any.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A ISomaInjector instance.
		 </apiDesc><apiOperationClassifier>com.soma.core.interfaces:ISomaInjector</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the injector parent if any.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:hasMapping"><apiName>hasMapping</apiName><shortdesc>
		 Indicates whether a mapping rule exists for the given Class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>classTarget</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData/><apiDesc>Injection name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates whether a mapping rule exists for the given Class.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:injectInto"><apiName>injectInto</apiName><shortdesc>
		 Performs injection into the given instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>An instance.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Performs injection into the given instance.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:mapSingletonOf"><apiName>mapSingletonOf</apiName><shortdesc>
		 Rule that defines the "whenAskFor" (usually an interface) to be injected with the same instance "useSingletonOf".</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>whenAskFor</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>useSingletonOf</apiItemName><apiType value="Class"/><apiDesc>A class.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData/><apiDesc>Injection name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Rule that defines the "whenAskFor" (usually an interface) to be injected with the same instance "useSingletonOf".
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:mapSingleton"><apiName>mapSingleton</apiName><shortdesc>
		 Rule that defines the "classTarget" to be injected with always the same instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>classTarget</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData/><apiDesc>Injection name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Rule that defines the "classTarget" to be injected with always the same instance.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:mapToInstance"><apiName>mapToInstance</apiName><shortdesc>
		 Rule that defines the "whenAskFor" to be injected the given instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>whenAskFor</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>An instance.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData/><apiDesc>Injection name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Rule that defines the "whenAskFor" to be injected the given instance.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:map"><apiName>map</apiName><shortdesc>
		 Rule that defines the "whenAskFor" to be injected with an instance of the "createClass" Class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>whenAskFor</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>createClass</apiItemName><apiType value="Class"/><apiDesc>A class.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData/><apiDesc>Injection name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Rule that defines the "whenAskFor" to be injected with an instance of the "createClass" Class.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:removeMapping"><apiName>removeMapping</apiName><shortdesc>
		 Removes a mapping rule exists for the given Class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="void"/></apiReturn><apiParam><apiItemName>classTarget</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData/><apiDesc>Injection name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a mapping rule exists for the given Class.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.soma.core.interfaces:ISomaInjector:com.soma.core.interfaces:ISomaInjector:applicationDomain:get"><apiName>applicationDomain</apiName><shortdesc>
		 ApplicationDomain in use in the injector.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.system:ApplicationDomain"/></apiValueDef><apiDesc>
		 ApplicationDomain in use in the injector.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.soma.core.interfaces:IResponder"><apiName>IResponder</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 Interface used by a class that receive data from a asynchronous call.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 Interface used by a class that receive data from a asynchronous call.
	 </apiDesc></apiClassifierDetail><related-links><link href="com.soma.core.controller.xml#SequenceCommand"><linktext>com.soma.core.controller.SequenceCommand</linktext></link></related-links><apiOperation id="com.soma.core.interfaces:IResponder:com.soma.core.interfaces:IResponder:fault"><apiName>fault</apiName><shortdesc>
		 Method that receives a fault object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>info</apiItemName><apiType value="Object"/><apiDesc>The fault Object.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Method that receives a fault object.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:IResponder:com.soma.core.interfaces:IResponder:result"><apiName>result</apiName><shortdesc>
		 Method that receives a success object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>THe success Object.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Method that receives a success object.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.soma.core.interfaces:IWire"><apiName>IWire</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 </apiDesc></apiClassifierDetail><related-links><link href="com.soma.core.wire.xml#Wire"><linktext>com.soma.core.wire.Wire</linktext></link><link href="com.soma.core.wire.xml#SomaWires"><linktext>com.soma.core.wire.SomaWires</linktext></link></related-links><apiOperation id="com.soma.core.interfaces:IWire:com.soma.core.interfaces:IWire:dispose"><apiName>dispose</apiName><shortdesc>
		 Method that you can overwrite, called by the framework when the model is removed.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Method that you can overwrite, called by the framework when the model is removed.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:IWire:com.soma.core.interfaces:IWire:getName"><apiName>getName</apiName><shortdesc>
		 Retrieves the name of the wire.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A String.
		 </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves the name of the wire.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:IWire:com.soma.core.interfaces:IWire:initialize"><apiName>initialize</apiName><shortdesc>
		 Method that you can overwrite, called by the framework when the model is initialized.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Method that you can overwrite, called by the framework when the model is initialized.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:IWire:com.soma.core.interfaces:IWire:setName"><apiName>setName</apiName><shortdesc>
		 Sets the name of the wire.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>A String.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets the name of the wire.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.soma.core.interfaces:IWire:com.soma.core.interfaces:IWire:instance:get"><apiName>instance</apiName><shortdesc>
		 Instance of the framework.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>com.soma.core.interfaces:ISoma</apiValueClassifier></apiValueDef><apiDesc>
		 Instance of the framework.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.soma.core.interfaces:ISomaReflector"><apiName>ISomaReflector</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 The ISomaReflector interface exposes the reflection methods used by the framework.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 The ISomaReflector interface exposes the reflection methods used by the framework. 
	 </apiDesc></apiClassifierDetail><related-links><link href="com.soma.core.di.xml#SomaReflector"><linktext>com.soma.core.di.SomaReflector</linktext></link></related-links><apiOperation id="com.soma.core.interfaces:ISomaReflector:com.soma.core.interfaces:ISomaReflector:classExtendsOrImplements"><apiName>classExtendsOrImplements</apiName><shortdesc>
		 Indicates whether a Class or Class name extends or implements a given Class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Boolean.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>classOrClassName</apiItemName><apiType value="Object"/><apiDesc>A Class or a Class name.
		 </apiDesc></apiParam><apiParam><apiItemName>superclass</apiItemName><apiType value="Class"/><apiDesc>A Class.
		 </apiDesc></apiParam><apiParam><apiItemName>application</apiItemName><apiType value="flash.system:ApplicationDomain"/><apiData>null</apiData><apiDesc>An ApplicationDomain.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates whether a Class or Class name extends or implements a given Class.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaReflector:com.soma.core.interfaces:ISomaReflector:dispose"><apiName>dispose</apiName><shortdesc>
		 Destroys the reflector elements.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Destroys the reflector elements.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaReflector:com.soma.core.interfaces:ISomaReflector:getClass"><apiName>getClass</apiName><shortdesc>
		 Retrieves a Class.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Class.
		 </apiDesc><apiType value="Class"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>Class, Class name or instance. 
		 </apiDesc></apiParam><apiParam><apiItemName>applicationDomain</apiItemName><apiType value="flash.system:ApplicationDomain"/><apiData>null</apiData><apiDesc>An ApplicationDomain.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves a Class.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaReflector:com.soma.core.interfaces:ISomaReflector:getFQCN"><apiName>getFQCN</apiName><shortdesc>
		 Retrieves a fully qualified Class name.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A String.
		 </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>Class, Class name or instance. 
		 </apiDesc></apiParam><apiParam><apiItemName>replaceColons</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves a fully qualified Class name.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.soma.core.interfaces:ISequenceCommand"><apiName>ISequenceCommand</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:ICommand</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 </apiDesc></apiClassifierDetail><related-links><link href="com.soma.core.controller.xml#SequenceCommand"><linktext>com.soma.core.controller.SequenceCommand</linktext></link></related-links><apiOperation id="com.soma.core.interfaces:ISequenceCommand:com.soma.core.interfaces:ISequenceCommand:executeNextCommand"><apiName>executeNextCommand</apiName><shortdesc>
		 Method used to execute the next command in the list of subcommands.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Method used to execute the next command in the list of subcommands.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISequenceCommand:com.soma.core.interfaces:ISequenceCommand:stop"><apiName>stop</apiName><shortdesc>
		 Stops the current sequence.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Stops the current sequence.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.soma.core.interfaces:ISequenceCommand:com.soma.core.interfaces:ISequenceCommand:commands:get"><apiName>commands</apiName><shortdesc>
		 Retrieves the list of commands added as subcommands.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		 Retrieves the list of commands added as subcommands.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.interfaces:ISequenceCommand:com.soma.core.interfaces:ISequenceCommand:currentCommand:get"><apiName>currentCommand</apiName><shortdesc>
		 Retrieves the command that is currently executed (running).</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.events:Event"/></apiValueDef><apiDesc>
		 Retrieves the command that is currently executed (running).
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.interfaces:ISequenceCommand:com.soma.core.interfaces:ISequenceCommand:length:get"><apiName>length</apiName><shortdesc>
		 Retrieves the number of commands added as subcommands.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Retrieves the number of commands added as subcommands.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.soma.core.interfaces:IMediator"><apiName>IMediator</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 The IMediator interface exposes the methods of a Mediator instance.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:IWire</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 The IMediator interface exposes the methods of a Mediator instance. 
	 </apiDesc></apiClassifierDetail><related-links><link href="com.soma.core.mediator.xml#Mediator"><linktext>com.soma.core.mediator.Mediator</linktext></link><link href="com.soma.core.mediator.xml#SomaMediators"><linktext>com.soma.core.mediator.SomaMediators</linktext></link></related-links><apiValue id="com.soma.core.interfaces:IMediator:com.soma.core.interfaces:IMediator:viewComponent:get"><apiName>viewComponent</apiName><shortdesc>
		 View that has been mapped to the mediator instance.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
		 View that has been mapped to the mediator instance.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.soma.core.interfaces:ICommand"><apiName>ICommand</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 </apiDesc></apiClassifierDetail><related-links><link href="com.soma.core.controller.xml#Command"><linktext>com.soma.core.controller.Command</linktext></link></related-links><apiOperation id="com.soma.core.interfaces:ICommand:com.soma.core.interfaces:ICommand:execute"><apiName>execute</apiName><shortdesc>
		 Method called by the framework, this is the execution of the command.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event instance dispatched to execute the command.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Method called by the framework, this is the execution of the command.
		 You can access from all the framework elements in this method (wires, commands, models, views, instance of the framework and stage).
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.soma.core.interfaces:IParallelCommand"><apiName>IParallelCommand</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:ICommand</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 </apiDesc></apiClassifierDetail><related-links><link href="com.soma.core.controller.xml#SomaController"><linktext>com.soma.core.controller.SomaController</linktext></link><link href="com.soma.core.controller.xml#Command"><linktext>com.soma.core.controller.Command</linktext></link><link href="com.soma.core.interfaces.xml#ICommand"><linktext>com.soma.core.interfaces.ICommand</linktext></link><link href="com.soma.core.interfaces.xml#IParallelCommand"><linktext>com.soma.core.interfaces.IParallelCommand</linktext></link></related-links><apiValue id="com.soma.core.interfaces:IParallelCommand:com.soma.core.interfaces:IParallelCommand:commands:get"><apiName>commands</apiName><shortdesc>
		 Retrieves the list of commands added as subcommands.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		 Retrieves the list of commands added as subcommands.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="com.soma.core.interfaces:IParallelCommand:com.soma.core.interfaces:IParallelCommand:length:get"><apiName>length</apiName><shortdesc>
		 Retrieves the number of commands added as subcommands.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Retrieves the number of commands added as subcommands.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.soma.core.interfaces:ICommandASync"><apiName>ICommandASync</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 Interface used to create asynchronous command.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>com.soma.core.interfaces:ICommand</apiBaseInterface><apiBaseInterface>com.soma.core.interfaces:IResponder</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 Interface used to create asynchronous command.
	 </apiDesc><example><codeblock rev="3.0">
package {
	import flash.utils.clearTimeout;
	import flash.utils.setTimeout;
	import flash.events.Event;
	import com.soma.core.interfaces.ICommandASync;
	import com.soma.core.controller.Command;
	
	public class CommandASyncExample extends Command implements ICommandASync {
		private var _event:Event;
		private var _timer:int;
		public function CommandASyncExample() {
			
		}
		
		public function execute(event:Event):void {
			_event = event;
			_timer = setTimeout(result, 1000, {});
		}
		
		public function fault(info:Object):void {
			
		}
		
		public function result(data:Object):void {
			if (isPartOfASequence(_event)) {
				getSequencer(_event).executeNextCommand();
			}
			_event = null;
			clearTimeout(_timer);
		}
		
	}
}
	 </codeblock>
	 </example></apiClassifierDetail><related-links><link href="com.soma.core.controller.xml#Command"><linktext>com.soma.core.controller.Command</linktext></link><link href="com.soma.core.interfaces.xml#ICommand"><linktext>com.soma.core.interfaces.ICommand</linktext></link><link href="com.soma.core.interfaces.xml#IResponder"><linktext>com.soma.core.interfaces.IResponder</linktext></link></related-links></apiClassifier><apiClassifier id="com.soma.core.interfaces:ISomaPlugin"><apiName>ISomaPlugin</apiName><shortdesc>
	 Author: Romuald Quantin - www.soundstep.com
	 Resources: http://www.soundstep.com/downloads/somacore
	 Actionscript version: 3.0
	 Copyright:
	 Mozilla Public License 1.1 (MPL 1.1) 
	 http://www.opensource.org/licenses/mozilla1.1.php
	 Interface used by a class that is meant to be instantiated by the framework (ex:SomaDebugger).</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 <p><b>Author:</b> Romuald Quantin - <xref href="http://www.soundstep.com/" scope="external">www.soundstep.com</xref></p>
	 <p><b>Resources:</b> <xref href="http://www.soundstep.com/downloads/somacore" scope="external">http://www.soundstep.com/downloads/somacore</xref></p>
	 <p><b>Actionscript version:</b> 3.0</p>
	 <p><b>Copyright:</b>
	 Mozilla Public License 1.1 (MPL 1.1) 
	 <xref href="http://www.opensource.org/licenses/mozilla1.1.php" scope="external">http://www.opensource.org/licenses/mozilla1.1.php</xref></p>
	 Interface used by a class that is meant to be instantiated by the framework (ex:SomaDebugger).
	 </apiDesc></apiClassifierDetail><related-links><link href="com.soma.core.xml#Soma"><linktext>com.soma.core.Soma</linktext></link><link href="com.soma.core.interfaces.xml#ISomaPluginVO"><linktext>com.soma.core.interfaces.ISomaPluginVO</linktext></link></related-links><apiOperation id="com.soma.core.interfaces:ISomaPlugin:com.soma.core.interfaces:ISomaPlugin:dispose"><apiName>dispose</apiName><shortdesc>
		 Destroys the elements created by the plugin.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Destroys the elements created by the plugin.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.soma.core.interfaces:ISomaPlugin:com.soma.core.interfaces:ISomaPlugin:initialize"><apiName>initialize</apiName><shortdesc>
		 Initializes the plugin.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>pluginVO</apiItemName><apiOperationClassifier>com.soma.core.interfaces:ISomaPluginVO</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes the plugin.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier></apiPackage>